name: "Publish all libs, Arrow-stack and Docs"

on:
  push:
    tags:
      - '**'

env:
  BASEDIR: ${{github.workspace}}/arrow-libs
  GRADLE_OPTS: -Dorg.gradle.parallel=false -Dorg.gradle.jvmargs="-Xmx5g -XX:+UseParallelGC -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8"
  SONATYPE_USER: ${{ secrets.SONATYPE_USER }}
  SONATYPE_PWD: ${{ secrets.SONATYPE_PWD }}
  ORG_GRADLE_PROJECT_signingKey: ${{ secrets.ORG_GRADLE_PROJECT_signingKey }}
  ORG_GRADLE_PROJECT_signingPassword: ${{ secrets.ORG_GRADLE_PROJECT_signingPassword }}
  OSS_USER: '${{ secrets.OSS_USER }}'
  OSS_TOKEN: '${{ secrets.OSS_TOKEN }}'
  OSS_STAGING_PROFILE_ID: '${{ secrets.OSS_STAGING_PROFILE_ID }}'
  SIGNING_KEY_NAME: '${{ secrets.SIGNING_KEY_NAME }}'
  SIGNING_KEY_ID: '${{ secrets.SIGNING_KEY_ID }}'
  SIGNING_KEY_PASSPHRASE: '${{ secrets.SIGNING_KEY_PASSPHRASE }}'
  SIGNING_KEY: '${{ secrets.SIGNING_KEY }}'
  GRADLE_PUBLISH_KEY: '${{ secrets.GRADLE_PUBLISH_KEY }}'
  GRADLE_PUBLISH_SECRET: '${{ secrets.GRADLE_PUBLISH_SECRET }}'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ 'macos-latest', 'ubuntu-latest', 'windows-latest' ]

    outputs:
      arrow-version: ${{ steps.get-arrow-version.outputs.arrow-version }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v2.5.0
        with:
          distribution: 'zulu'
          java-version: 11

      - name: appleTest
        uses: gradle/gradle-build-action@v2.0.1
        if: matrix.os == 'macos-latest'
        with:
          arguments: --full-stacktrace --scan appleTest

      - name: Ubuntu build
        uses: gradle/gradle-build-action@v2.0.1
        if: matrix.os == 'ubuntu-latest'
        with:
          arguments: --full-stacktrace --scan build

      - name: mingwX64Test
        uses: gradle/gradle-build-action@v2.0.1
        if: matrix.os == 'windows-latest'
        with:
          arguments: --full-stacktrace --scan mingwX64Test

      - id: get-arrow-version
        name: Get Arrow version
        run: echo "::set-output name=arrow-version::$(head -n 1 build/semver/version.txt)"

      - name: Upload reports
        uses: actions/upload-artifact@v2.3.1
        with:
          name: 'reports-${{ matrix.os }}'
          path: '**/build/reports/**'

      - name: Stop Gradle daemons
        run: ./gradlew --stop

  publish:
    needs: build
    timeout-minutes: 120
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v2.5.0
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Publish alpha/beta/rc version
        uses: gradle/gradle-build-action@v2.0.1
        if: |
          contains(needs.build.outputs.arrow-version, 'alpha') ||
          contains(needs.build.outputs.arrow-version, 'beta') ||
          contains(needs.build.outputs.arrow-version, 'rc')
        with:
          arguments: --full-stacktrace publishToSonatype closeAndReleaseSonatypeStagingRepository

      - name: Publish final version
        uses: gradle/gradle-build-action@v2.0.1
        if: |
          !contains(needs.build.outputs.arrow-version, 'alpha') &&
          !contains(needs.build.outputs.arrow-version, 'beta') &&
          !contains(needs.build.outputs.arrow-version, 'rc')
        with:
          arguments: --full-stacktrace publishToSonatype closeSonatypeStagingRepository

      - name: Stop Gradle daemons
        run: ./gradlew --stop

  publish_doc:
    needs: publish
    timeout-minutes: 60
    runs-on: macos-latest

    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_CLOUDFRONT_ID: ${{ secrets.AWS_CLOUDFRONT_ID }}
      AWS_DEFAULT_REGION: eu-west-1
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      JEKYLL_ENV: production
      S3_BUCKET: ${{ secrets.S3_BUCKET }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2.4.0
        with:
          fetch-depth: 0

      - name: Set up Java
        uses: actions/setup-java@v2.5.0
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Prepare environment
        working-directory: arrow-site
        run: |
          mkdir $BASEDIR/logs
          brew install tree
          bundle config set --local path 'vendor/bundle'
          bundle install --gemfile Gemfile

      - name: Create API doc
        run: ./gradlew dokkaGfm

      - name: Build landing page
        working-directory: arrow-site
        run: |
          bundle exec jekyll build -b docs -s docs --config docs/_config_for_landing_page.yml
          tree _site > $BASEDIR/logs/content.log

      - name: Publish landing page
        working-directory: arrow-site
        run: |
          echo ">>> Landing page" >> $BASEDIR/logs/aws_sync.log
          ${GITHUB_WORKSPACE}/.github/scripts/sync-main-with-aws.sh

      - name: Build release directory (/docs)
        working-directory: arrow-site
        if: |
          !contains(needs.build.outputs.arrow-version, 'alpha') &&
          !contains(needs.build.outputs.arrow-version, 'beta') &&
          !contains(needs.build.outputs.arrow-version, 'rc')
        run: |
          bundle exec jekyll build -b docs -s docs
          tree _site > $BASEDIR/logs/content_docs-${{ needs.build.outputs.arrow-version }}.log

      - name: Publish documentation (/docs)
        working-directory: arrow-site
        if: |
          !contains(needs.build.outputs.arrow-version, 'alpha') &&
          !contains(needs.build.outputs.arrow-version, 'beta') &&
          !contains(needs.build.outputs.arrow-version, 'rc')
        run: |
          echo ">>> Latest release" >> $BASEDIR/logs/aws_sync.log
          ${GITHUB_WORKSPACE}/.github/scripts/sync-docs-with-aws.sh

      - name: Build release directory (/docs/<major.minor>)
        working-directory: arrow-site
        if: |
          !contains(needs.build.outputs.arrow-version, 'alpha') &&
          !contains(needs.build.outputs.arrow-version, 'beta') &&
          !contains(needs.build.outputs.arrow-version, 'rc')
        run: |
          bundle exec jekyll build -b docs/${{ needs.build.outputs.arrow-version }} -s docs
          tree _site > $BASEDIR/logs/content_docs-${{ needs.build.outputs.arrow-version }}.log

      - name: Publish release directory (/docs/<major.minor>)
        working-directory: arrow-site
        if: |
          !contains(needs.build.outputs.arrow-version, 'alpha') &&
          !contains(needs.build.outputs.arrow-version, 'beta') &&
          !contains(needs.build.outputs.arrow-version, 'rc')
        run: |
          aws s3 sync _site s3://$S3_BUCKET/docs/${{ needs.build.outputs.arrow-version }} --delete --exclude "/CNAME" --exclude "/code/*" --exclude "/index.html" --exclude "/redirects.json" >> $BASEDIR/logs/aws_sync.log

      - name: Build latest version (/docs/next)
        working-directory: arrow-site
        run: |
          bundle exec jekyll build -b docs/next -s docs
          tree _site > $BASEDIR/logs/content_docs-next.log

      - name: Publish latest version (/docs/next)
        working-directory: arrow-site
        run: |
          aws s3 sync _site s3://$S3_BUCKET/docs/next --delete --exclude "/CNAME" --exclude "/code/*" --exclude "/index.html" --exclude "/redirects.json" >> $BASEDIR/logs/aws_sync.log

      - name: Publish sitemap.xml
        if: |
          !contains(needs.build.outputs.arrow-version, 'alpha') &&
          !contains(needs.build.outputs.arrow-version, 'beta') &&
          !contains(needs.build.outputs.arrow-version, 'rc')
        run: |
          ${GITHUB_WORKSPACE}/.github/scripts/create-sitemap.sh > sitemap.xml
          aws s3 cp sitemap.xml s3://$S3_BUCKET/sitemap.xml >> $BASEDIR/logs/aws_sync.log

      - name: Invalidate CloudFront cache
        run: aws cloudfront create-invalidation --distribution-id $AWS_CLOUDFRONT_ID --paths "/*"

      - name: List S3
        run: aws s3 ls s3://$S3_BUCKET --recursive --summarize > $BASEDIR/logs/site-content.log

      - uses: actions/upload-artifact@v2
        with:
          name: logs
          path: arrow-libs/logs.

      - name: Stop Gradle daemons
        run: ./gradlew --stop
