/*
 * Copyright (C) 2021 The Arrow Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'maven-publish'
apply plugin: 'signing'

task javadocJar(type: Jar) {
    archiveClassifier = 'javadoc'
}

afterEvaluate {
    publishing {
        def variantName = "${project.name}"
        publications.all {
            version = VERSION_NAME

            artifact javadocJar

            def type = it.name
            logger.error("Configuring $type")
            switch (type) {
                case 'kotlinMultiplatform':
                    // With Kotlin 1.4.0, the root module ID has no suffix, but for compatibility with
                    // the consumers who can't read Gradle module metadata, we publish the JVM artifacts in it
                    it.artifactId = variantName
                    apply from: "$rootDir/gradle/publish-mpp-root-module-in-platform.gradle"
                    publishPlatformArtifactsInRootModule(publications["jvm"])
                    logger.error("after publishPlatformArtifactsInRootModule")
                    break
                case 'metadata':
                case 'jvm':
                case 'js':
                    it.artifactId = "$variantName-$type"
                    break
            }
            logger.error("Artifact id = ${it.artifactId}")

            pom {
                name = POM_NAME
                //packaging = POM_PACKAGING
                description = POM_DESCRIPTION
                url = POM_URL

                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }
                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                        distribution = POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                    }
                }
            }
        }
        repositories {
            maven {
                credentials {
                    username "$System.env.SONATYPE_USER"
                    password "$System.env.SONATYPE_PWD"
                }
                url = VERSION_NAME.endsWith('SNAPSHOT') ? SNAPSHOT_REPOSITORY : RELEASE_REPOSITORY
            }
        }
    }

    // Guide: https://docs.gradle.org/current/userguide/signing_plugin.html
    if (project.hasProperty("signingKey") && project.hasProperty("signingPassword")) {
        signing {
            def signingKey = findProperty("signingKey")
            def signingPassword = findProperty("signingPassword")
            useInMemoryPgpKeys(signingKey, signingPassword)

            sign publishing.publications
        }
    }
}