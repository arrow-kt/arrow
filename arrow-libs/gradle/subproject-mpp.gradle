/*
 * Copyright (C) 2020 The Arrow Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "com.android.library"

kotlin {
    explicitApi()
    jvm {
        withJava()
    }

    android {
        publishAllLibraryVariants()
    }
    androidNativeArm32 {
        publishAllLibraryVariants()
    }
    androidNativeArm64 {
        publishAllLibraryVariants()
    }
    androidNativeX64 {
        publishAllLibraryVariants()
    }
    androidNativeX86 {
        publishAllLibraryVariants()
    }

    js(IR) {
        browser()
        nodejs()
    }
    linuxX64()
    linuxArm64()
    linuxArm32Hfp()
    linuxMipsel32()
    linuxMips32()

    mingwX64()
    mingwX86()

    macosX64()
    macosArm64()

    tvosArm64()
    tvosX64()
    tvosSimulatorArm64()

    watchosArm32()
    watchosArm64()
    watchosX86()
    watchosX64()
    watchosSimulatorArm64()

    iosX64()
    iosArm64()
    iosArm32()
    iosSimulatorArm64()

    wasm32()

    targets.all {
        compilations.all {
            kotlinOptions {
                verbose = true
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-common:$KOTLIN_VERSION"
            }
        }
        jvmMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$KOTLIN_VERSION"
            }
        }
        jvmTest {
            dependencies {
                runtimeOnly "io.kotest:kotest-runner-junit5:$KOTEST_VERSION"
            }
        }
        jsMain {
            dependencies {
                implementation "org.jetbrains.kotlin:kotlin-stdlib-js:$KOTLIN_VERSION"
            }
        }
        nativeMain {
            dependsOn(commonMain)

            androidNativeArm32Main.dependsOn(it)
            androidNativeArm64Main.dependsOn(it)
            androidNativeX64Main.dependsOn(it)
            androidNativeX86Main.dependsOn(it)

            macosX64Main.dependsOn(it)
            macosArm64Main.dependsOn(it)

            mingwX64Main.dependsOn(it)
            mingwX86Main.dependsOn(it)

            linuxX64Main.dependsOn(it)
            linuxArm64Main.dependsOn(it)
            linuxArm32HfpMain.dependsOn(it)
            linuxMips32Main.dependsOn(it)
            linuxMipsel32Main.dependsOn(it)

            iosX64Main.dependsOn(it)
            iosArm64Main.dependsOn(it)
            iosArm32Main.dependsOn(it)
            iosSimulatorArm64Main.dependsOn(it)

            watchosX86Main.dependsOn(it)
            watchosArm32Main.dependsOn(it)
            watchosArm64Main.dependsOn(it)
            watchosX64Main.dependsOn(it)
            watchosSimulatorArm64Main.dependsOn(it)

            tvosMain.dependsOn(it)
            tvosSimulatorArm64Main.dependsOn(it)

            wasm32Main.dependsOn(it)
        }
        nativeTest {
            dependsOn(commonTest)

            androidNativeArm32Test.dependsOn(it)
            androidNativeArm64Testt.dependsOn(it)
            androidNativeX64Test.dependsOn(it)
            androidNativeX86Test.dependsOn(it)

            macosX64Test.dependsOn(it)
            macosArm64Test.dependsOn(it)

            mingwX64Test.dependsOn(it)
            mingwX86Test.dependsOn(it)

            linuxX64Test.dependsOn(it)
            linuxArm64Test.dependsOn(it)
            linuxArm32HfpTest.dependsOn(it)
            linuxMips32Test.dependsOn(it)
            linuxMipsel32Test.dependsOn(it)

            iosX64Test.dependsOn(it)
            iosArm64Test.dependsOn(it)
            iosArm32Test.dependsOn(it)
            iosSimulatorArm64Test.dependsOn(it)

            watchosX86Test.dependsOn(it)
            watchosArm32Test.dependsOn(it)
            watchosArm64Test.dependsOn(it)
            watchosX64Test.dependsOn(it)
            watchosSimulatorArm64Test.dependsOn(it)

            tvosTest.dependsOn(it)
            tvosSimulatorArm64Test.dependsOn(it)

            wasm32Main.dependsOn(it)
        }
    }
}

ktlint {
    version = KTLINT_VERSION
}

clean.doFirst {
    delete "${projectDir}/docs/apidocs"
}

group = GROUP
archivesBaseName = POM_ARTIFACT_ID

configurations.all {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

tasks.withType(Test) {
    maxParallelForks = Runtime.runtime.availableProcessors()
}

tasks.jvmTest {
    useJUnitPlatform()
    testLogging {
        exceptionFormat 'full'
        events "passed", "skipped", "failed", "standardOut", "standardError"
    }
}
