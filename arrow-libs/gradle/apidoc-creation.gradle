/*
 * Copyright (C) 2020 The Arrow Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: "org.jetbrains.dokka"

dokkaGfm {
    outputDirectory = file("${rootDir}/../arrow-site/docs/apidocs")
    dokkaSourceSets {
        if (file("src/commonMain/kotlin").exists()) {
            commonMain {
                perPackageOption {
                    matchingRegex.set(".*\\.internal.*") // will match all .internal packages and sub-packages
                    suppress.set(true)
                }
                skipDeprecated.set(true)
                reportUndocumented.set(false)
                sourceLink {
                    localDirectory.set(file("src/commonMain/kotlin"))
                    remoteUrl.set(uri("https://github.com/arrow-kt/arrow/blob/main/${relativeProjectPath('src/commonMain/kotlin')}").toURL())
                    remoteLineSuffix.set("#L")
                }
            }
        } else if(file("src/main/kotlin").exists()) {
            main {
                perPackageOption {
                    matchingRegex.set(".*\\.internal.*") // will match all .internal packages and sub-packages
                    suppress.set(true)
                }
                skipDeprecated.set(true)
                reportUndocumented.set(false)
                sourceLink {
                    localDirectory.set(file("src/main/kotlin"))
                    remoteUrl.set(uri("https://github.com/arrow-kt/arrow/blob/main/${relativeProjectPath('src/main/kotlin')}").toURL())
                    remoteLineSuffix.set("#L")
                }
            }
        }
        if(file("src/jvmMain/kotlin").exists()) {
            jvmMain {
                perPackageOption {
                    matchingRegex.set(".*\\.internal.*") // will match all .internal packages and sub-packages
                    suppress.set(true)
                }
                skipDeprecated.set(true)
                reportUndocumented.set(false)
                sourceLink {
                    localDirectory.set(file("src/jvmMain/kotlin"))
                    remoteUrl.set(uri("https://github.com/arrow-kt/arrow/blob/main/${relativeProjectPath('src/jvmMain/kotlin')}").toURL())
                    remoteLineSuffix.set("#L")
                }
            }
        }
        if(file("src/jsMain/kotlin").exists()) {
            jsMain {
                perPackageOption {
                    matchingRegex.set(".*\\.internal.*") // will match all .internal packages and sub-packages
                    suppress.set(true)
                }
                skipDeprecated.set(true)
                reportUndocumented.set(false)
                sourceLink {
                    localDirectory.set(file("src/jsMain/kotlin"))
                    remoteUrl.set(uri("https://github.com/arrow-kt/arrow/blob/main/${relativeProjectPath('src/jsMain/kotlin')}").toURL())
                    remoteLineSuffix.set("#L")
                }
            }
        }
    }
}

dependencies {
    dokkaGfmPlugin(project(":jekyll"))
}
