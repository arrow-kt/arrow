// Generated by raise-ktor-server.main.kts

package arrow.raise.ktor.server

import arrow.core.raise.RaiseDSL
import io.ktor.http.*
import io.ktor.server.routing.*
import io.ktor.utils.io.*
import kotlin.jvm.JvmName

@KtorDsl
@RaiseDSL
@JvmName("deleteOrRaise")
public inline fun <reified R> Route.deleteOrRaise(
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = delete { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("deleteOrRaisePath")
public inline fun <reified R> Route.deleteOrRaise(
  path: String,
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = delete(path) { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("deleteOrRaiseRegex")
public inline fun <reified R> Route.deleteOrRaise(
  path: Regex,
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = delete(path) { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("getOrRaise")
public inline fun <reified R> Route.getOrRaise(
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = get { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("getOrRaisePath")
public inline fun <reified R> Route.getOrRaise(
  path: String,
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = get(path) { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("getOrRaiseRegex")
public inline fun <reified R> Route.getOrRaise(
  path: Regex,
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = get(path) { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("headOrRaise")
public inline fun <reified R> Route.headOrRaise(
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = head { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("headOrRaisePath")
public inline fun <reified R> Route.headOrRaise(
  path: String,
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = head(path) { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("headOrRaiseRegex")
public inline fun <reified R> Route.headOrRaise(
  path: Regex,
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = head(path) { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("optionsOrRaise")
public inline fun <reified R> Route.optionsOrRaise(
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = options { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("optionsOrRaisePath")
public inline fun <reified R> Route.optionsOrRaise(
  path: String,
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = options(path) { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("optionsOrRaiseRegex")
public inline fun <reified R> Route.optionsOrRaise(
  path: Regex,
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = options(path) { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("patchOrRaise")
public inline fun <reified R> Route.patchOrRaise(
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = patch { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("patchOrRaisePath")
public inline fun <reified R> Route.patchOrRaise(
  path: String,
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = patch(path) { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("patchOrRaiseRegex")
public inline fun <reified R> Route.patchOrRaise(
  path: Regex,
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = patch(path) { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("postOrRaise")
public inline fun <reified R> Route.postOrRaise(
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = post { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("postOrRaisePath")
public inline fun <reified R> Route.postOrRaise(
  path: String,
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = post(path) { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("postOrRaiseRegex")
public inline fun <reified R> Route.postOrRaise(
  path: Regex,
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = post(path) { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("putOrRaise")
public inline fun <reified R> Route.putOrRaise(
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = put { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("putOrRaisePath")
public inline fun <reified R> Route.putOrRaise(
  path: String,
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = put(path) { respondOrRaise<R>(statusCode, body) }

@KtorDsl
@RaiseDSL
@JvmName("putOrRaiseRegex")
public inline fun <reified R> Route.putOrRaise(
  path: Regex,
  statusCode: HttpStatusCode? = null,
  crossinline body: suspend RaiseRoutingContext.() -> R,
): Route = put(path) { respondOrRaise<R>(statusCode, body) }
