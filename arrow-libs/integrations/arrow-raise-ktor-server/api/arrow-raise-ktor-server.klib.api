// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.arrow-kt:arrow-raise-ktor-server>
abstract fun interface <#A: kotlin/Any?, #B: kotlin/Any?> arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler { // arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler|null[0]
    abstract suspend fun (arrow.raise.ktor.server/RaiseRoutingContext).handle(#A): #B // arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler.handle|handle@arrow.raise.ktor.server.RaiseRoutingContext(1:0){}[0]
}

sealed interface arrow.raise.ktor.server.request/Parameter : arrow.raise.ktor.server.request/RequestComponent { // arrow.raise.ktor.server.request/Parameter|null[0]
    abstract val name // arrow.raise.ktor.server.request/Parameter.name|{}name[0]
        abstract fun <get-name>(): kotlin/String // arrow.raise.ktor.server.request/Parameter.name.<get-name>|<get-name>(){}[0]

    final class Form : arrow.raise.ktor.server.request/Parameter { // arrow.raise.ktor.server.request/Parameter.Form|null[0]
        constructor <init>(kotlin/String) // arrow.raise.ktor.server.request/Parameter.Form.<init>|<init>(kotlin.String){}[0]

        final val name // arrow.raise.ktor.server.request/Parameter.Form.name|{}name[0]
            final fun <get-name>(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Form.name.<get-name>|<get-name>(){}[0]

        final fun component1(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Form.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): arrow.raise.ktor.server.request/Parameter.Form // arrow.raise.ktor.server.request/Parameter.Form.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server.request/Parameter.Form.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.raise.ktor.server.request/Parameter.Form.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Form.toString|toString(){}[0]
    }

    final class Path : arrow.raise.ktor.server.request/Parameter { // arrow.raise.ktor.server.request/Parameter.Path|null[0]
        constructor <init>(kotlin/String) // arrow.raise.ktor.server.request/Parameter.Path.<init>|<init>(kotlin.String){}[0]

        final val name // arrow.raise.ktor.server.request/Parameter.Path.name|{}name[0]
            final fun <get-name>(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Path.name.<get-name>|<get-name>(){}[0]

        final fun component1(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Path.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): arrow.raise.ktor.server.request/Parameter.Path // arrow.raise.ktor.server.request/Parameter.Path.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server.request/Parameter.Path.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.raise.ktor.server.request/Parameter.Path.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Path.toString|toString(){}[0]
    }

    final class Query : arrow.raise.ktor.server.request/Parameter { // arrow.raise.ktor.server.request/Parameter.Query|null[0]
        constructor <init>(kotlin/String) // arrow.raise.ktor.server.request/Parameter.Query.<init>|<init>(kotlin.String){}[0]

        final val name // arrow.raise.ktor.server.request/Parameter.Query.name|{}name[0]
            final fun <get-name>(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Query.name.<get-name>|<get-name>(){}[0]

        final fun component1(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Query.component1|component1(){}[0]
        final fun copy(kotlin/String = ...): arrow.raise.ktor.server.request/Parameter.Query // arrow.raise.ktor.server.request/Parameter.Query.copy|copy(kotlin.String){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server.request/Parameter.Query.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.raise.ktor.server.request/Parameter.Query.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // arrow.raise.ktor.server.request/Parameter.Query.toString|toString(){}[0]
    }
}

sealed interface arrow.raise.ktor.server.request/RequestComponent // arrow.raise.ktor.server.request/RequestComponent|null[0]

sealed interface arrow.raise.ktor.server.request/RequestError // arrow.raise.ktor.server.request/RequestError|null[0]

sealed interface arrow.raise.ktor.server/Response { // arrow.raise.ktor.server/Response|null[0]
    abstract suspend fun respondTo(io.ktor.server.application/ApplicationCall) // arrow.raise.ktor.server/Response.respondTo|respondTo(io.ktor.server.application.ApplicationCall){}[0]

    final object Companion { // arrow.raise.ktor.server/Response.Companion|null[0]
        final fun Response(io.ktor.http.content/OutgoingContent): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/Response.Companion.Response|Response(io.ktor.http.content.OutgoingContent){}[0]
        final fun Response(io.ktor.http/HttpStatusCode): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/Response.Companion.Response|Response(io.ktor.http.HttpStatusCode){}[0]
        final fun Response(io.ktor.http/HttpStatusCode, kotlin/Any?, io.ktor.util.reflect/TypeInfo): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/Response.Companion.Response|Response(io.ktor.http.HttpStatusCode;kotlin.Any?;io.ktor.util.reflect.TypeInfo){}[0]
        final fun empty(io.ktor.http/HttpStatusCode = ...): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/Response.Companion.empty|empty(io.ktor.http.HttpStatusCode){}[0]
        final fun raw(io.ktor.http.content/OutgoingContent): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/Response.Companion.raw|raw(io.ktor.http.content.OutgoingContent){}[0]
        final inline fun <#A2: reified kotlin/Any> (io.ktor.http/HttpStatusCode).invoke(#A2): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/Response.Companion.invoke|invoke@io.ktor.http.HttpStatusCode(0:0){0§<kotlin.Any>}[0]
        final inline fun <#A2: reified kotlin/Any?> Response(io.ktor.http/HttpStatusCode, #A2): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/Response.Companion.Response|Response(io.ktor.http.HttpStatusCode;0:0){0§<kotlin.Any?>}[0]
        final inline fun <#A2: reified kotlin/Any?> payload(#A2, io.ktor.http/HttpStatusCode = ...): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/Response.Companion.payload|payload(0:0;io.ktor.http.HttpStatusCode){0§<kotlin.Any?>}[0]
    }
}

abstract class arrow.raise.ktor.server.request/AccumulatingParameterProvider { // arrow.raise.ktor.server.request/AccumulatingParameterProvider|null[0]
    abstract fun parameter(kotlin/String): arrow.raise.ktor.server.request/Parameter // arrow.raise.ktor.server.request/AccumulatingParameterProvider.parameter|parameter(kotlin.String){}[0]
    final fun <#A1: kotlin/Any> getReified(kotlin/String, io.ktor.util.reflect/TypeInfo): arrow.core.raise/RaiseAccumulate.Value<#A1> // arrow.raise.ktor.server.request/AccumulatingParameterProvider.getReified|getReified(kotlin.String;io.ktor.util.reflect.TypeInfo){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> getTransformed(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A1>): arrow.core.raise/RaiseAccumulate.Value<#A1> // arrow.raise.ktor.server.request/AccumulatingParameterProvider.getTransformed|getTransformed(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> invoke(io.ktor.util.reflect/TypeInfo): kotlin.properties/PropertyDelegateProvider<kotlin/Nothing?, arrow.core.raise/RaiseAccumulate.Value<#A1>> // arrow.raise.ktor.server.request/AccumulatingParameterProvider.invoke|invoke(io.ktor.util.reflect.TypeInfo){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> invoke(kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A1>): kotlin.properties/PropertyDelegateProvider<kotlin/Nothing?, arrow.core.raise/RaiseAccumulate.Value<#A1>> // arrow.raise.ktor.server.request/AccumulatingParameterProvider.invoke|invoke(kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> invoke(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A1>): arrow.core.raise/RaiseAccumulate.Value<#A1> // arrow.raise.ktor.server.request/AccumulatingParameterProvider.invoke|invoke(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any>}[0]
    final fun getString(kotlin/String): arrow.core.raise/RaiseAccumulate.Value<kotlin/String> // arrow.raise.ktor.server.request/AccumulatingParameterProvider.getString|getString(kotlin.String){}[0]
    final fun invoke(): kotlin.properties/PropertyDelegateProvider<kotlin/Nothing?, arrow.core.raise/RaiseAccumulate.Value<kotlin/String>> // arrow.raise.ktor.server.request/AccumulatingParameterProvider.invoke|invoke(){}[0]
    final fun invoke(kotlin/String): arrow.core.raise/RaiseAccumulate.Value<kotlin/String> // arrow.raise.ktor.server.request/AccumulatingParameterProvider.invoke|invoke(kotlin.String){}[0]
    final inline fun <#A1: reified kotlin/Any> invoke(): kotlin.properties/PropertyDelegateProvider<kotlin/Nothing?, arrow.core.raise/RaiseAccumulate.Value<#A1>> // arrow.raise.ktor.server.request/AccumulatingParameterProvider.invoke|invoke(){0§<kotlin.Any>}[0]
    final inline fun <#A1: reified kotlin/Any> invoke(kotlin/String): arrow.core.raise/RaiseAccumulate.Value<#A1> // arrow.raise.ktor.server.request/AccumulatingParameterProvider.invoke|invoke(kotlin.String){0§<kotlin.Any>}[0]
    final inline fun <#A1: reified kotlin/Any> provideDelegate(kotlin/Nothing?, kotlin.reflect/KProperty<*>): arrow.core.raise/RaiseAccumulate.Value<#A1> // arrow.raise.ktor.server.request/AccumulatingParameterProvider.provideDelegate|provideDelegate(kotlin.Nothing?;kotlin.reflect.KProperty<*>){0§<kotlin.Any>}[0]

    final object Companion { // arrow.raise.ktor.server.request/AccumulatingParameterProvider.Companion|null[0]
        final inline fun invoke(arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>, io.ktor.http/Parameters, crossinline kotlin/Function1<kotlin/String, arrow.raise.ktor.server.request/Parameter>): arrow.raise.ktor.server.request/AccumulatingParameterProvider // arrow.raise.ktor.server.request/AccumulatingParameterProvider.Companion.invoke|invoke(arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>;io.ktor.http.Parameters;kotlin.Function1<kotlin.String,arrow.raise.ktor.server.request.Parameter>){}[0]
    }
}

abstract class arrow.raise.ktor.server.request/RaisingParameterProvider { // arrow.raise.ktor.server.request/RaisingParameterProvider|null[0]
    abstract fun parameter(kotlin/String): arrow.raise.ktor.server.request/Parameter // arrow.raise.ktor.server.request/RaisingParameterProvider.parameter|parameter(kotlin.String){}[0]
    final fun <#A1: kotlin/Any> getReified(kotlin/String, io.ktor.util.reflect/TypeInfo): #A1 // arrow.raise.ktor.server.request/RaisingParameterProvider.getReified|getReified(kotlin.String;io.ktor.util.reflect.TypeInfo){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> getTransformed(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A1>): #A1 // arrow.raise.ktor.server.request/RaisingParameterProvider.getTransformed|getTransformed(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> invoke(io.ktor.util.reflect/TypeInfo): kotlin.properties/ReadOnlyProperty<kotlin/Nothing?, #A1> // arrow.raise.ktor.server.request/RaisingParameterProvider.invoke|invoke(io.ktor.util.reflect.TypeInfo){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> invoke(kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A1>): kotlin.properties/ReadOnlyProperty<kotlin/Nothing?, #A1> // arrow.raise.ktor.server.request/RaisingParameterProvider.invoke|invoke(kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> invoke(kotlin/String, io.ktor.util.reflect/TypeInfo): kotlin.properties/ReadOnlyProperty<kotlin/Nothing?, #A1> // arrow.raise.ktor.server.request/RaisingParameterProvider.invoke|invoke(kotlin.String;io.ktor.util.reflect.TypeInfo){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any> invoke(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A1>): kotlin.properties/ReadOnlyProperty<kotlin/Nothing?, #A1> // arrow.raise.ktor.server.request/RaisingParameterProvider.invoke|invoke(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any>}[0]
    final fun getString(kotlin/String): kotlin/String // arrow.raise.ktor.server.request/RaisingParameterProvider.getString|getString(kotlin.String){}[0]
    final fun invoke(): kotlin.properties/ReadOnlyProperty<kotlin/Nothing?, kotlin/String> // arrow.raise.ktor.server.request/RaisingParameterProvider.invoke|invoke(){}[0]
    final fun invoke(kotlin/String): kotlin.properties/ReadOnlyProperty<kotlin/Nothing?, kotlin/String> // arrow.raise.ktor.server.request/RaisingParameterProvider.invoke|invoke(kotlin.String){}[0]
    final inline fun <#A1: reified kotlin/Any> getValue(kotlin/Nothing?, kotlin.reflect/KProperty<*>): #A1 // arrow.raise.ktor.server.request/RaisingParameterProvider.getValue|getValue(kotlin.Nothing?;kotlin.reflect.KProperty<*>){0§<kotlin.Any>}[0]
    final inline fun <#A1: reified kotlin/Any> invoke(): kotlin.properties/ReadOnlyProperty<kotlin/Nothing?, #A1> // arrow.raise.ktor.server.request/RaisingParameterProvider.invoke|invoke(){0§<kotlin.Any>}[0]
    final inline fun <#A1: reified kotlin/Any> invoke(kotlin/String): kotlin.properties/ReadOnlyProperty<kotlin/Nothing?, #A1> // arrow.raise.ktor.server.request/RaisingParameterProvider.invoke|invoke(kotlin.String){0§<kotlin.Any>}[0]

    final object Companion { // arrow.raise.ktor.server.request/RaisingParameterProvider.Companion|null[0]
        final fun invoke(arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>, io.ktor.http/Parameters, kotlin/Function1<kotlin/String, arrow.raise.ktor.server.request/Parameter>): arrow.raise.ktor.server.request/RaisingParameterProvider // arrow.raise.ktor.server.request/RaisingParameterProvider.Companion.invoke|invoke(arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>;io.ktor.http.Parameters;kotlin.Function1<kotlin.String,arrow.raise.ktor.server.request.Parameter>){}[0]
    }
}

final class arrow.raise.ktor.server.request/CallValidationContext : arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError> { // arrow.raise.ktor.server.request/CallValidationContext|null[0]
    constructor <init>(io.ktor.server.routing/RoutingCall, arrow.core.raise/Raise<arrow.core/NonEmptyList<arrow.raise.ktor.server.request/RequestError>>) // arrow.raise.ktor.server.request/CallValidationContext.<init>|<init>(io.ktor.server.routing.RoutingCall;arrow.core.raise.Raise<arrow.core.NonEmptyList<arrow.raise.ktor.server.request.RequestError>>){}[0]

    final val call // arrow.raise.ktor.server.request/CallValidationContext.call|{}call[0]
        final fun <get-call>(): io.ktor.server.routing/RoutingCall // arrow.raise.ktor.server.request/CallValidationContext.call.<get-call>|<get-call>(){}[0]
    final val pathAccumulating // arrow.raise.ktor.server.request/CallValidationContext.pathAccumulating|{}pathAccumulating[0]
        final fun <get-pathAccumulating>(): arrow.raise.ktor.server.request/AccumulatingParameterProvider // arrow.raise.ktor.server.request/CallValidationContext.pathAccumulating.<get-pathAccumulating>|<get-pathAccumulating>(){}[0]
    final val queryAccumulating // arrow.raise.ktor.server.request/CallValidationContext.queryAccumulating|{}queryAccumulating[0]
        final fun <get-queryAccumulating>(): arrow.raise.ktor.server.request/AccumulatingParameterProvider // arrow.raise.ktor.server.request/CallValidationContext.queryAccumulating.<get-queryAccumulating>|<get-queryAccumulating>(){}[0]

    final suspend fun formParametersDelegate(): arrow.raise.ktor.server.request/AccumulatingParameterProvider // arrow.raise.ktor.server.request/CallValidationContext.formParametersDelegate|formParametersDelegate(){}[0]
    final suspend inline fun <#A1: reified kotlin/Any> receiveAccumulating(): arrow.core.raise/RaiseAccumulate.Value<#A1> // arrow.raise.ktor.server.request/CallValidationContext.receiveAccumulating|receiveAccumulating(){0§<kotlin.Any>}[0]
    final suspend inline fun <#A1: reified kotlin/Any> receiveNullableAccumulating(): arrow.core.raise/RaiseAccumulate.Value<#A1?> // arrow.raise.ktor.server.request/CallValidationContext.receiveNullableAccumulating|receiveNullableAccumulating(){0§<kotlin.Any>}[0]
}

final class arrow.raise.ktor.server.request/Malformed : arrow.raise.ktor.server.request/RequestError { // arrow.raise.ktor.server.request/Malformed|null[0]
    constructor <init>(arrow.raise.ktor.server.request/RequestComponent, kotlin/String, kotlin/Throwable? = ...) // arrow.raise.ktor.server.request/Malformed.<init>|<init>(arrow.raise.ktor.server.request.RequestComponent;kotlin.String;kotlin.Throwable?){}[0]

    final val cause // arrow.raise.ktor.server.request/Malformed.cause|{}cause[0]
        final fun <get-cause>(): kotlin/Throwable? // arrow.raise.ktor.server.request/Malformed.cause.<get-cause>|<get-cause>(){}[0]
    final val component // arrow.raise.ktor.server.request/Malformed.component|{}component[0]
        final fun <get-component>(): arrow.raise.ktor.server.request/RequestComponent // arrow.raise.ktor.server.request/Malformed.component.<get-component>|<get-component>(){}[0]
    final val message // arrow.raise.ktor.server.request/Malformed.message|{}message[0]
        final fun <get-message>(): kotlin/String // arrow.raise.ktor.server.request/Malformed.message.<get-message>|<get-message>(){}[0]

    final fun component1(): arrow.raise.ktor.server.request/RequestComponent // arrow.raise.ktor.server.request/Malformed.component1|component1(){}[0]
    final fun component2(): kotlin/String // arrow.raise.ktor.server.request/Malformed.component2|component2(){}[0]
    final fun component3(): kotlin/Throwable? // arrow.raise.ktor.server.request/Malformed.component3|component3(){}[0]
    final fun copy(arrow.raise.ktor.server.request/RequestComponent = ..., kotlin/String = ..., kotlin/Throwable? = ...): arrow.raise.ktor.server.request/Malformed // arrow.raise.ktor.server.request/Malformed.copy|copy(arrow.raise.ktor.server.request.RequestComponent;kotlin.String;kotlin.Throwable?){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server.request/Malformed.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.raise.ktor.server.request/Malformed.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.raise.ktor.server.request/Malformed.toString|toString(){}[0]
}

final class arrow.raise.ktor.server.request/MissingParameter : arrow.raise.ktor.server.request/RequestError { // arrow.raise.ktor.server.request/MissingParameter|null[0]
    constructor <init>(arrow.raise.ktor.server.request/Parameter) // arrow.raise.ktor.server.request/MissingParameter.<init>|<init>(arrow.raise.ktor.server.request.Parameter){}[0]

    final val parameter // arrow.raise.ktor.server.request/MissingParameter.parameter|{}parameter[0]
        final fun <get-parameter>(): arrow.raise.ktor.server.request/Parameter // arrow.raise.ktor.server.request/MissingParameter.parameter.<get-parameter>|<get-parameter>(){}[0]

    final fun component1(): arrow.raise.ktor.server.request/Parameter // arrow.raise.ktor.server.request/MissingParameter.component1|component1(){}[0]
    final fun copy(arrow.raise.ktor.server.request/Parameter = ...): arrow.raise.ktor.server.request/MissingParameter // arrow.raise.ktor.server.request/MissingParameter.copy|copy(arrow.raise.ktor.server.request.Parameter){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server.request/MissingParameter.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.raise.ktor.server.request/MissingParameter.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.raise.ktor.server.request/MissingParameter.toString|toString(){}[0]
}

final class arrow.raise.ktor.server/RaiseErrorResponseConfig { // arrow.raise.ktor.server/RaiseErrorResponseConfig|null[0]
    constructor <init>(kotlin/Function1<arrow.core/NonEmptyList<arrow.raise.ktor.server.request/RequestError>, arrow.raise.ktor.server/Response> = ...) // arrow.raise.ktor.server/RaiseErrorResponseConfig.<init>|<init>(kotlin.Function1<arrow.core.NonEmptyList<arrow.raise.ktor.server.request.RequestError>,arrow.raise.ktor.server.Response>){}[0]

    final var errorResponse // arrow.raise.ktor.server/RaiseErrorResponseConfig.errorResponse|{}errorResponse[0]
        final fun <get-errorResponse>(): kotlin/Function1<arrow.core/NonEmptyList<arrow.raise.ktor.server.request/RequestError>, arrow.raise.ktor.server/Response> // arrow.raise.ktor.server/RaiseErrorResponseConfig.errorResponse.<get-errorResponse>|<get-errorResponse>(){}[0]
        final fun <set-errorResponse>(kotlin/Function1<arrow.core/NonEmptyList<arrow.raise.ktor.server.request/RequestError>, arrow.raise.ktor.server/Response>) // arrow.raise.ktor.server/RaiseErrorResponseConfig.errorResponse.<set-errorResponse>|<set-errorResponse>(kotlin.Function1<arrow.core.NonEmptyList<arrow.raise.ktor.server.request.RequestError>,arrow.raise.ktor.server.Response>){}[0]

    final fun errorResponse(kotlin/Function1<arrow.core/NonEmptyList<arrow.raise.ktor.server.request/RequestError>, arrow.raise.ktor.server/Response>) // arrow.raise.ktor.server/RaiseErrorResponseConfig.errorResponse|errorResponse(kotlin.Function1<arrow.core.NonEmptyList<arrow.raise.ktor.server.request.RequestError>,arrow.raise.ktor.server.Response>){}[0]
}

final class arrow.raise.ktor.server/RaiseRoutingContext : arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, arrow.raise.ktor.server/CallRaiseContext { // arrow.raise.ktor.server/RaiseRoutingContext|null[0]
    constructor <init>(arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, io.ktor.server.routing/RoutingContext) // arrow.raise.ktor.server/RaiseRoutingContext.<init>|<init>(arrow.core.raise.Raise<arrow.raise.ktor.server.Response>;io.ktor.server.routing.RoutingContext){}[0]

    final val errorRaise // arrow.raise.ktor.server/RaiseRoutingContext.errorRaise|{}errorRaise[0]
        final fun <get-errorRaise>(): arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError> // arrow.raise.ktor.server/RaiseRoutingContext.errorRaise.<get-errorRaise>|<get-errorRaise>(){}[0]
    final val pathRaising // arrow.raise.ktor.server/RaiseRoutingContext.pathRaising|{}pathRaising[0]
        final fun <get-pathRaising>(): arrow.raise.ktor.server.request/RaisingParameterProvider // arrow.raise.ktor.server/RaiseRoutingContext.pathRaising.<get-pathRaising>|<get-pathRaising>(){}[0]
    final val queryRaising // arrow.raise.ktor.server/RaiseRoutingContext.queryRaising|{}queryRaising[0]
        final fun <get-queryRaising>(): arrow.raise.ktor.server.request/RaisingParameterProvider // arrow.raise.ktor.server/RaiseRoutingContext.queryRaising.<get-queryRaising>|<get-queryRaising>(){}[0]

    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (kotlin.collections/Map<#A1, arrow.core/Either<arrow.raise.ktor.server/Response, #B1>>).bindAll(): kotlin.collections/Map<#A1, #B1> // arrow.raise.ktor.server/RaiseRoutingContext.bindAll|bindAll@kotlin.collections.Map<0:0,arrow.core.Either<arrow.raise.ktor.server.Response,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/Either<arrow.raise.ktor.server/Response, #A1>).bind(): #A1 // arrow.raise.ktor.server/RaiseRoutingContext.bind|bind@arrow.core.Either<arrow.raise.ktor.server.Response,0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptyList<arrow.core/Either<arrow.raise.ktor.server/Response, #A1>>).bindAll(): arrow.core/NonEmptyList<#A1> // arrow.raise.ktor.server/RaiseRoutingContext.bindAll|bindAll@arrow.core.NonEmptyList<arrow.core.Either<arrow.raise.ktor.server.Response,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptySet<arrow.core/Either<arrow.raise.ktor.server/Response, #A1>>).bindAll(): arrow.core/NonEmptySet<#A1> // arrow.raise.ktor.server/RaiseRoutingContext.bindAll|bindAll@arrow.core.NonEmptySet<arrow.core.Either<arrow.raise.ktor.server.Response,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Either<arrow.raise.ktor.server/Response, #A1>>).bindAll(): kotlin.collections/List<#A1> // arrow.raise.ktor.server/RaiseRoutingContext.bindAll|bindAll@kotlin.collections.Iterable<arrow.core.Either<arrow.raise.ktor.server.Response,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, #A1>).bind(): #A1 // arrow.raise.ktor.server/RaiseRoutingContext.bind|bind@kotlin.Function1<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, #A1>).invoke(): #A1 // arrow.raise.ktor.server/RaiseRoutingContext.invoke|invoke@kotlin.Function1<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,0:0>(){0§<kotlin.Any?>}[0]
    final fun raise(arrow.raise.ktor.server.request/RequestError): kotlin/Nothing // arrow.raise.ktor.server/RaiseRoutingContext.raise|raise(arrow.raise.ktor.server.request.RequestError){}[0]
    final fun raise(arrow.raise.ktor.server/Response): kotlin/Nothing // arrow.raise.ktor.server/RaiseRoutingContext.raise|raise(arrow.raise.ktor.server.Response){}[0]
    final suspend fun <#A1: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, #A1>).bind(): #A1 // arrow.raise.ktor.server/RaiseRoutingContext.bind|bind@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,0:0>(){0§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<arrow.raise.ktor.server/Response>, #A1>).invoke(): #A1 // arrow.raise.ktor.server/RaiseRoutingContext.invoke|invoke@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<arrow.raise.ktor.server.Response>,0:0>(){0§<kotlin.Any?>}[0]
    final suspend fun formParametersDelegate(): arrow.raise.ktor.server.request/RaisingParameterProvider // arrow.raise.ktor.server/RaiseRoutingContext.formParametersDelegate|formParametersDelegate(){}[0]
}

final value class <#A: kotlin/Any?> arrow.raise.ktor.server.request/Value { // arrow.raise.ktor.server.request/Value|null[0]
    constructor <init>(#A) // arrow.raise.ktor.server.request/Value.<init>|<init>(1:0){}[0]

    final val value // arrow.raise.ktor.server.request/Value.value|{}value[0]
        final fun <get-value>(): #A // arrow.raise.ktor.server.request/Value.value.<get-value>|<get-value>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server.request/Value.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.raise.ktor.server.request/Value.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.raise.ktor.server.request/Value.toString|toString(){}[0]
    final inline fun getValue(kotlin/Nothing?, kotlin.reflect/KProperty<*>): #A // arrow.raise.ktor.server.request/Value.getValue|getValue(kotlin.Nothing?;kotlin.reflect.KProperty<*>){}[0]
}

open class arrow.raise.ktor.server/CallRaiseContext { // arrow.raise.ktor.server/CallRaiseContext|null[0]
    final val call // arrow.raise.ktor.server/CallRaiseContext.call|{}call[0]
        final fun <get-call>(): io.ktor.server.routing/RoutingCall // arrow.raise.ktor.server/CallRaiseContext.call.<get-call>|<get-call>(){}[0]

    final fun (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).pathOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server/CallRaiseContext.pathOrRaise|pathOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(kotlin.String){}[0]
    final fun (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).queryOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server/CallRaiseContext.queryOrRaise|queryOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(kotlin.String){}[0]
    final fun (arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>).pathOrAccumulate(kotlin/String): arrow.core.raise/RaiseAccumulate.Value<kotlin/String> // arrow.raise.ktor.server/CallRaiseContext.pathOrAccumulate|pathOrAccumulate@arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>(kotlin.String){}[0]
    final fun (arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>).queryOrAccumulate(kotlin/String): arrow.core.raise/RaiseAccumulate.Value<kotlin/String> // arrow.raise.ktor.server/CallRaiseContext.queryOrAccumulate|queryOrAccumulate@arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>(kotlin.String){}[0]
    final inline fun <#A1: kotlin/Any> (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).pathOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A1>): #A1 // arrow.raise.ktor.server/CallRaiseContext.pathOrRaise|pathOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any>}[0]
    final inline fun <#A1: kotlin/Any> (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).queryOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A1>): #A1 // arrow.raise.ktor.server/CallRaiseContext.queryOrRaise|queryOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any>}[0]
    final inline fun <#A1: kotlin/Any> (arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>).pathOrAccumulate(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A1>): arrow.core.raise/RaiseAccumulate.Value<#A1> // arrow.raise.ktor.server/CallRaiseContext.pathOrAccumulate|pathOrAccumulate@arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any>}[0]
    final inline fun <#A1: kotlin/Any> (arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>).queryOrAccumulate(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A1>): arrow.core.raise/RaiseAccumulate.Value<#A1> // arrow.raise.ktor.server/CallRaiseContext.queryOrAccumulate|queryOrAccumulate@arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any>}[0]
    final inline fun <#A1: reified kotlin/Any> (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).pathOrRaise(kotlin/String): #A1 // arrow.raise.ktor.server/CallRaiseContext.pathOrRaise|pathOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(kotlin.String){0§<kotlin.Any>}[0]
    final inline fun <#A1: reified kotlin/Any> (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).queryOrRaise(kotlin/String): #A1 // arrow.raise.ktor.server/CallRaiseContext.queryOrRaise|queryOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(kotlin.String){0§<kotlin.Any>}[0]
    final inline fun <#A1: reified kotlin/Any> (arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>).pathOrAccumulate(kotlin/String): arrow.core.raise/RaiseAccumulate.Value<#A1> // arrow.raise.ktor.server/CallRaiseContext.pathOrAccumulate|pathOrAccumulate@arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>(kotlin.String){0§<kotlin.Any>}[0]
    final inline fun <#A1: reified kotlin/Any> (arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>).queryOrAccumulate(kotlin/String): arrow.core.raise/RaiseAccumulate.Value<#A1> // arrow.raise.ktor.server/CallRaiseContext.queryOrAccumulate|queryOrAccumulate@arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>(kotlin.String){0§<kotlin.Any>}[0]
    final suspend inline fun <#A1: reified kotlin/Any> (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).receiveNullableOrRaise(): #A1? // arrow.raise.ktor.server/CallRaiseContext.receiveNullableOrRaise|receiveNullableOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(){0§<kotlin.Any>}[0]
    final suspend inline fun <#A1: reified kotlin/Any> (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).receiveOrRaise(): #A1 // arrow.raise.ktor.server/CallRaiseContext.receiveOrRaise|receiveOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(){0§<kotlin.Any>}[0]
    final suspend inline fun <#A1: reified kotlin/Any> (arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>).receiveNullableOrAccumulate(): arrow.core.raise/RaiseAccumulate.Value<#A1?> // arrow.raise.ktor.server/CallRaiseContext.receiveNullableOrAccumulate|receiveNullableOrAccumulate@arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>(){0§<kotlin.Any>}[0]
    final suspend inline fun <#A1: reified kotlin/Any> (arrow.core.raise/RaiseAccumulate<arrow.raise.ktor.server.request/RequestError>).receiveOrAccumulate(): arrow.core.raise/RaiseAccumulate.Value<#A1> // arrow.raise.ktor.server/CallRaiseContext.receiveOrAccumulate|receiveOrAccumulate@arrow.core.raise.RaiseAccumulate<arrow.raise.ktor.server.request.RequestError>(){0§<kotlin.Any>}[0]
}

final object arrow.raise.ktor.server.request/ReceiveBody : arrow.raise.ktor.server.request/RequestComponent { // arrow.raise.ktor.server.request/ReceiveBody|null[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server.request/ReceiveBody.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.raise.ktor.server.request/ReceiveBody.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.raise.ktor.server.request/ReceiveBody.toString|toString(){}[0]
}

final val arrow.raise.ktor.server/RaiseErrorResponse // arrow.raise.ktor.server/RaiseErrorResponse|{}RaiseErrorResponse[0]
    final fun <get-RaiseErrorResponse>(): io.ktor.server.application/RouteScopedPlugin<arrow.raise.ktor.server/RaiseErrorResponseConfig> // arrow.raise.ktor.server/RaiseErrorResponse.<get-RaiseErrorResponse>|<get-RaiseErrorResponse>(){}[0]

final fun (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/pathOrRaise(io.ktor.server.routing/RoutingCall, kotlin/String): kotlin/String // arrow.raise.ktor.server.request/pathOrRaise|pathOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(io.ktor.server.routing.RoutingCall;kotlin.String){}[0]
final fun (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/queryOrRaise(io.ktor.server.routing/RoutingCall, kotlin/String): kotlin/String // arrow.raise.ktor.server.request/queryOrRaise|queryOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(io.ktor.server.routing.RoutingCall;kotlin.String){}[0]
final fun (arrow.core.raise/Raise<arrow.raise.ktor.server/Response>).arrow.raise.ktor.server/raise(io.ktor.http.content/OutgoingContent): kotlin/Nothing // arrow.raise.ktor.server/raise|raise@arrow.core.raise.Raise<arrow.raise.ktor.server.Response>(io.ktor.http.content.OutgoingContent){}[0]
final fun (arrow.core.raise/Raise<arrow.raise.ktor.server/Response>).arrow.raise.ktor.server/raise(io.ktor.http/HttpStatusCode): kotlin/Nothing // arrow.raise.ktor.server/raise|raise@arrow.core.raise.Raise<arrow.raise.ktor.server.Response>(io.ktor.http.HttpStatusCode){}[0]
final fun (arrow.core.raise/Raise<arrow.raise.ktor.server/Response>).arrow.raise.ktor.server/raiseBadRequest(): kotlin/Nothing // arrow.raise.ktor.server/raiseBadRequest|raiseBadRequest@arrow.core.raise.Raise<arrow.raise.ktor.server.Response>(){}[0]
final fun (arrow.core.raise/Raise<arrow.raise.ktor.server/Response>).arrow.raise.ktor.server/raiseNotFound(): kotlin/Nothing // arrow.raise.ktor.server/raiseNotFound|raiseNotFound@arrow.core.raise.Raise<arrow.raise.ktor.server.Response>(){}[0]
final fun (arrow.raise.ktor.server.request/RequestError).arrow.raise.ktor.server.request/toSimpleMessage(): kotlin/String // arrow.raise.ktor.server.request/toSimpleMessage|toSimpleMessage@arrow.raise.ktor.server.request.RequestError(){}[0]
final fun (arrow.raise.ktor.server/RaiseRoutingContext).arrow.raise.ktor.server.request/pathOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server.request/pathOrRaise|pathOrRaise@arrow.raise.ktor.server.RaiseRoutingContext(kotlin.String){}[0]
final fun (arrow.raise.ktor.server/RaiseRoutingContext).arrow.raise.ktor.server.request/queryOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server.request/queryOrRaise|queryOrRaise@arrow.raise.ktor.server.RaiseRoutingContext(kotlin.String){}[0]
final fun (io.ktor.server.application/ApplicationCall).arrow.raise.ktor.server/errorResponse(arrow.core/NonEmptyList<arrow.raise.ktor.server.request/RequestError>): arrow.raise.ktor.server/Response // arrow.raise.ktor.server/errorResponse|errorResponse@io.ktor.server.application.ApplicationCall(arrow.core.NonEmptyList<arrow.raise.ktor.server.request.RequestError>){}[0]
final fun (io.ktor.server.routing/Route).arrow.raise.ktor.server/handleOrRaise(kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, kotlin/Unit>) // arrow.raise.ktor.server/handleOrRaise|handleOrRaise@io.ktor.server.routing.Route(kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,kotlin.Unit>){}[0]
final fun <#A: arrow.raise.ktor.server.request/Parameter> (arrow.core.raise/Raise<arrow.raise.ktor.server.request/MissingParameter>).arrow.raise.ktor.server.request/parameterOrRaise(io.ktor.http/Parameters, #A): kotlin/String // arrow.raise.ktor.server.request/parameterOrRaise|parameterOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.MissingParameter>(io.ktor.http.Parameters;0:0){0§<arrow.raise.ktor.server.request.Parameter>}[0]
final fun <#A: kotlin/Any> (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/parameterOrRaise(io.ktor.http/Parameters, arrow.raise.ktor.server.request/Parameter, io.ktor.util.reflect/TypeInfo): #A // arrow.raise.ktor.server.request/parameterOrRaise|parameterOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(io.ktor.http.Parameters;arrow.raise.ktor.server.request.Parameter;io.ktor.util.reflect.TypeInfo){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>).arrow.raise.ktor.server/asKtorHandler(io.ktor.http/HttpStatusCode?, io.ktor.util.reflect/TypeInfo): kotlin.coroutines/SuspendFunction2<io.ktor.server.routing/RoutingContext, #A, kotlin/Unit> // arrow.raise.ktor.server/asKtorHandler|asKtorHandler@arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>(io.ktor.http.HttpStatusCode?;io.ktor.util.reflect.TypeInfo){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>).arrow.raise.ktor.server/asKtorHandler(io.ktor.http/HttpStatusCode?, io.ktor.util.reflect/TypeInfo): kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit> // arrow.raise.ktor.server/asKtorHandler|asKtorHandler@kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>(io.ktor.http.HttpStatusCode?;io.ktor.util.reflect.TypeInfo){0§<kotlin.Any?>}[0]
final inline fun <#A: arrow.raise.ktor.server.request/Parameter, #B: kotlin/Any> (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/parameterOrRaise(io.ktor.http/Parameters, #A, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #B>): #B // arrow.raise.ktor.server.request/parameterOrRaise|parameterOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(io.ktor.http.Parameters;0:0;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:1>){0§<arrow.raise.ktor.server.request.Parameter>;1§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/pathOrRaise(io.ktor.server.routing/RoutingCall, kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server.request/pathOrRaise|pathOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(io.ktor.server.routing.RoutingCall;kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/queryOrRaise(io.ktor.server.routing/RoutingCall, kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server.request/queryOrRaise|queryOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(io.ktor.server.routing.RoutingCall;kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (arrow.raise.ktor.server/RaiseRoutingContext).arrow.raise.ktor.server.request/pathOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server.request/pathOrRaise|pathOrRaise@arrow.raise.ktor.server.RaiseRoutingContext(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any> (arrow.raise.ktor.server/RaiseRoutingContext).arrow.raise.ktor.server.request/queryOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server.request/queryOrRaise|queryOrRaise@arrow.raise.ktor.server.RaiseRoutingContext(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: reified kotlin/Any?> (arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>).arrow.raise.ktor.server/asKtorHandler(io.ktor.http/HttpStatusCode?): kotlin.coroutines/SuspendFunction2<io.ktor.server.routing/RoutingContext, #A, kotlin/Unit> // arrow.raise.ktor.server/asKtorHandler|asKtorHandler@arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>(io.ktor.http.HttpStatusCode?){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (arrow.raise.ktor.server/RaiseRoutingContext).arrow.raise.ktor.server.request/validate(kotlin/Function1<arrow.core/NonEmptyList<arrow.raise.ktor.server.request/RequestError>, arrow.raise.ktor.server/Response> = ..., kotlin/Function1<arrow.raise.ktor.server.request/CallValidationContext, #A>): #A // arrow.raise.ktor.server.request/validate|validate@arrow.raise.ktor.server.RaiseRoutingContext(kotlin.Function1<arrow.core.NonEmptyList<arrow.raise.ktor.server.request.RequestError>,arrow.raise.ktor.server.Response>;kotlin.Function1<arrow.raise.ktor.server.request.CallValidationContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (io.ktor.server.routing/RoutingCall).arrow.raise.ktor.server.request/validate(kotlin/Function1<arrow.core/NonEmptyList<arrow.raise.ktor.server.request/RequestError>, #A>, kotlin/Function1<arrow.raise.ktor.server.request/CallValidationContext, #A>): #A // arrow.raise.ktor.server.request/validate|validate@io.ktor.server.routing.RoutingCall(kotlin.Function1<arrow.core.NonEmptyList<arrow.raise.ktor.server.request.RequestError>,0:0>;kotlin.Function1<arrow.raise.ktor.server.request.CallValidationContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any> (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/pathOrRaise(io.ktor.server.routing/RoutingCall, kotlin/String): #A // arrow.raise.ktor.server.request/pathOrRaise|pathOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(io.ktor.server.routing.RoutingCall;kotlin.String){0§<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/queryOrRaise(io.ktor.server.routing/RoutingCall, kotlin/String): #A // arrow.raise.ktor.server.request/queryOrRaise|queryOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(io.ktor.server.routing.RoutingCall;kotlin.String){0§<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (arrow.raise.ktor.server/RaiseRoutingContext).arrow.raise.ktor.server.request/pathOrRaise(kotlin/String): #A // arrow.raise.ktor.server.request/pathOrRaise|pathOrRaise@arrow.raise.ktor.server.RaiseRoutingContext(kotlin.String){0§<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any> (arrow.raise.ktor.server/RaiseRoutingContext).arrow.raise.ktor.server.request/queryOrRaise(kotlin/String): #A // arrow.raise.ktor.server.request/queryOrRaise|queryOrRaise@arrow.raise.ktor.server.RaiseRoutingContext(kotlin.String){0§<kotlin.Any>}[0]
final inline fun <#A: reified kotlin/Any?> (arrow.core.raise/Raise<arrow.raise.ktor.server/Response>).arrow.raise.ktor.server/raise(io.ktor.http/HttpStatusCode, #A): kotlin/Nothing // arrow.raise.ktor.server/raise|raise@arrow.core.raise.Raise<arrow.raise.ktor.server.Response>(io.ktor.http.HttpStatusCode;0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (arrow.core.raise/Raise<arrow.raise.ktor.server/Response>).arrow.raise.ktor.server/raiseBadRequest(#A): kotlin/Nothing // arrow.raise.ktor.server/raiseBadRequest|raiseBadRequest@arrow.core.raise.Raise<arrow.raise.ktor.server.Response>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (arrow.core.raise/Raise<arrow.raise.ktor.server/Response>).arrow.raise.ktor.server/raiseNotFound(#A): kotlin/Nothing // arrow.raise.ktor.server/raiseNotFound|raiseNotFound@arrow.core.raise.Raise<arrow.raise.ktor.server.Response>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/deleteOrRaise(io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/deleteOrRaise|deleteOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/deleteOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/deleteOrRaise|deleteOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/deleteOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/deleteOrRaise|deleteOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/getOrRaise(io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/getOrRaise|getOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/getOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/getOrRaise|getOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/getOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/getOrRaise|getOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/headOrRaise(io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/headOrRaise|headOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/headOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/headOrRaise|headOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/headOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/headOrRaise|headOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/optionsOrRaise(io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/optionsOrRaise|optionsOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/optionsOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/optionsOrRaise|optionsOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/optionsOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/optionsOrRaise|optionsOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>).arrow.raise.ktor.server/asKtorHandler(io.ktor.http/HttpStatusCode?): kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit> // arrow.raise.ktor.server/asKtorHandler|asKtorHandler@kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>(io.ktor.http.HttpStatusCode?){0§<kotlin.Any?>}[0]
final suspend fun (io.ktor.server.routing/RoutingCall).arrow.raise.ktor.server/respondSafely(io.ktor.http/HttpStatusCode?, kotlin/Any?, io.ktor.util.reflect/TypeInfo) // arrow.raise.ktor.server/respondSafely|respondSafely@io.ktor.server.routing.RoutingCall(io.ktor.http.HttpStatusCode?;kotlin.Any?;io.ktor.util.reflect.TypeInfo){}[0]
final suspend fun <#A: kotlin/Any> (arrow.core.raise/Raise<arrow.raise.ktor.server.request/Malformed>).arrow.raise.ktor.server.request/receiveNullableOrRaise(io.ktor.server.routing/RoutingCall, io.ktor.util.reflect/TypeInfo): #A? // arrow.raise.ktor.server.request/receiveNullableOrRaise|receiveNullableOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.Malformed>(io.ktor.server.routing.RoutingCall;io.ktor.util.reflect.TypeInfo){0§<kotlin.Any>}[0]
final suspend fun <#A: kotlin/Any> (arrow.core.raise/Raise<arrow.raise.ktor.server.request/Malformed>).arrow.raise.ktor.server.request/receiveOrRaise(io.ktor.server.routing/RoutingCall, io.ktor.util.reflect/TypeInfo): #A // arrow.raise.ktor.server.request/receiveOrRaise|receiveOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.Malformed>(io.ktor.server.routing.RoutingCall;io.ktor.util.reflect.TypeInfo){0§<kotlin.Any>}[0]
final suspend inline fun (io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server/handleOrRaise(kotlin/Function1<arrow.raise.ktor.server/RaiseRoutingContext, kotlin/Unit>) // arrow.raise.ktor.server/handleOrRaise|handleOrRaise@io.ktor.server.routing.RoutingContext(kotlin.Function1<arrow.raise.ktor.server.RaiseRoutingContext,kotlin.Unit>){}[0]
final suspend inline fun <#A: kotlin/Any?> (io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server/respondOrRaise(io.ktor.http/HttpStatusCode? = ..., io.ktor.util.reflect/TypeInfo, kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>) // arrow.raise.ktor.server/respondOrRaise|respondOrRaise@io.ktor.server.routing.RoutingContext(io.ktor.http.HttpStatusCode?;io.ktor.util.reflect.TypeInfo;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final suspend inline fun <#A: reified kotlin/Any> (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/receiveNullableOrRaise(io.ktor.server.routing/RoutingCall): #A? // arrow.raise.ktor.server.request/receiveNullableOrRaise|receiveNullableOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(io.ktor.server.routing.RoutingCall){0§<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any> (arrow.core.raise/Raise<arrow.raise.ktor.server.request/RequestError>).arrow.raise.ktor.server.request/receiveOrRaise(io.ktor.server.routing/RoutingCall): #A // arrow.raise.ktor.server.request/receiveOrRaise|receiveOrRaise@arrow.core.raise.Raise<arrow.raise.ktor.server.request.RequestError>(io.ktor.server.routing.RoutingCall){0§<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any> (arrow.raise.ktor.server/RaiseRoutingContext).arrow.raise.ktor.server.request/receiveNullableOrRaise(): #A? // arrow.raise.ktor.server.request/receiveNullableOrRaise|receiveNullableOrRaise@arrow.raise.ktor.server.RaiseRoutingContext(){0§<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any> (arrow.raise.ktor.server/RaiseRoutingContext).arrow.raise.ktor.server.request/receiveOrRaise(): #A // arrow.raise.ktor.server.request/receiveOrRaise|receiveOrRaise@arrow.raise.ktor.server.RaiseRoutingContext(){0§<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server/respondOrRaise(io.ktor.http/HttpStatusCode? = ..., kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>) // arrow.raise.ktor.server/respondOrRaise|respondOrRaise@io.ktor.server.routing.RoutingContext(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
