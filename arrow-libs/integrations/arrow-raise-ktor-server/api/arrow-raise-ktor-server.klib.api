// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.arrow-kt:arrow-raise-ktor-server>
abstract fun interface <#A: kotlin/Any?, #B: kotlin/Any?> arrow.raise.ktor.server.routing/ReceivingRespondingRaiseRoutingHandler { // arrow.raise.ktor.server.routing/ReceivingRespondingRaiseRoutingHandler|null[0]
    abstract suspend fun (arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>).handle(#A): #B // arrow.raise.ktor.server.routing/ReceivingRespondingRaiseRoutingHandler.handle|handle@arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>(1:0){}[0]
}

sealed interface arrow.raise.ktor.server.response/Response { // arrow.raise.ktor.server.response/Response|null[0]
    abstract suspend fun respondTo(io.ktor.server.application/ApplicationCall) // arrow.raise.ktor.server.response/Response.respondTo|respondTo(io.ktor.server.application.ApplicationCall){}[0]

    final object Companion { // arrow.raise.ktor.server.response/Response.Companion|null[0]
        final fun Response(io.ktor.http.content/OutgoingContent): arrow.raise.ktor.server.response/Response // arrow.raise.ktor.server.response/Response.Companion.Response|Response(io.ktor.http.content.OutgoingContent){}[0]
        final fun Response(io.ktor.http/HttpStatusCode): arrow.raise.ktor.server.response/Response // arrow.raise.ktor.server.response/Response.Companion.Response|Response(io.ktor.http.HttpStatusCode){}[0]
        final fun Response(io.ktor.http/HttpStatusCode, kotlin/Any?, io.ktor.util.reflect/TypeInfo): arrow.raise.ktor.server.response/Response // arrow.raise.ktor.server.response/Response.Companion.Response|Response(io.ktor.http.HttpStatusCode;kotlin.Any?;io.ktor.util.reflect.TypeInfo){}[0]
        final fun empty(io.ktor.http/HttpStatusCode = ...): arrow.raise.ktor.server.response/Response // arrow.raise.ktor.server.response/Response.Companion.empty|empty(io.ktor.http.HttpStatusCode){}[0]
        final fun raw(io.ktor.http.content/OutgoingContent): arrow.raise.ktor.server.response/Response // arrow.raise.ktor.server.response/Response.Companion.raw|raw(io.ktor.http.content.OutgoingContent){}[0]
        final inline fun <#A2: reified kotlin/Any> (io.ktor.http/HttpStatusCode).invoke(#A2): arrow.raise.ktor.server.response/Response // arrow.raise.ktor.server.response/Response.Companion.invoke|invoke@io.ktor.http.HttpStatusCode(0:0){0§<kotlin.Any>}[0]
        final inline fun <#A2: reified kotlin/Any?> Response(io.ktor.http/HttpStatusCode, #A2): arrow.raise.ktor.server.response/Response // arrow.raise.ktor.server.response/Response.Companion.Response|Response(io.ktor.http.HttpStatusCode;0:0){0§<kotlin.Any?>}[0]
        final inline fun <#A2: reified kotlin/Any?> payload(#A2, io.ktor.http/HttpStatusCode = ...): arrow.raise.ktor.server.response/Response // arrow.raise.ktor.server.response/Response.Companion.payload|payload(0:0;io.ktor.http.HttpStatusCode){0§<kotlin.Any?>}[0]
    }
}

final class <#A: io.ktor.server.application/ApplicationCall> arrow.raise.ktor.server.routing/RaiseRoutingContext : arrow.core.raise/Raise<arrow.raise.ktor.server.response/Response> { // arrow.raise.ktor.server.routing/RaiseRoutingContext|null[0]
    constructor <init>(#A, arrow.core.raise/Raise<arrow.raise.ktor.server.response/Response>) // arrow.raise.ktor.server.routing/RaiseRoutingContext.<init>|<init>(1:0;arrow.core.raise.Raise<arrow.raise.ktor.server.response.Response>){}[0]

    final val call // arrow.raise.ktor.server.routing/RaiseRoutingContext.call|{}call[0]
        final fun <get-call>(): #A // arrow.raise.ktor.server.routing/RaiseRoutingContext.call.<get-call>|<get-call>(){}[0]

    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (kotlin.collections/Map<#A1, arrow.core/Either<arrow.raise.ktor.server.response/Response, #B1>>).bindAll(): kotlin.collections/Map<#A1, #B1> // arrow.raise.ktor.server.routing/RaiseRoutingContext.bindAll|bindAll@kotlin.collections.Map<0:0,arrow.core.Either<arrow.raise.ktor.server.response.Response,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/Either<arrow.raise.ktor.server.response/Response, #A1>).bind(): #A1 // arrow.raise.ktor.server.routing/RaiseRoutingContext.bind|bind@arrow.core.Either<arrow.raise.ktor.server.response.Response,0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptyList<arrow.core/Either<arrow.raise.ktor.server.response/Response, #A1>>).bindAll(): arrow.core/NonEmptyList<#A1> // arrow.raise.ktor.server.routing/RaiseRoutingContext.bindAll|bindAll@arrow.core.NonEmptyList<arrow.core.Either<arrow.raise.ktor.server.response.Response,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptySet<arrow.core/Either<arrow.raise.ktor.server.response/Response, #A1>>).bindAll(): arrow.core/NonEmptySet<#A1> // arrow.raise.ktor.server.routing/RaiseRoutingContext.bindAll|bindAll@arrow.core.NonEmptySet<arrow.core.Either<arrow.raise.ktor.server.response.Response,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Either<arrow.raise.ktor.server.response/Response, #A1>>).bindAll(): kotlin.collections/List<#A1> // arrow.raise.ktor.server.routing/RaiseRoutingContext.bindAll|bindAll@kotlin.collections.Iterable<arrow.core.Either<arrow.raise.ktor.server.response.Response,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<arrow.raise.ktor.server.response/Response>, #A1>).bind(): #A1 // arrow.raise.ktor.server.routing/RaiseRoutingContext.bind|bind@kotlin.Function1<arrow.core.raise.Raise<arrow.raise.ktor.server.response.Response>,0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<arrow.raise.ktor.server.response/Response>, #A1>).invoke(): #A1 // arrow.raise.ktor.server.routing/RaiseRoutingContext.invoke|invoke@kotlin.Function1<arrow.core.raise.Raise<arrow.raise.ktor.server.response.Response>,0:0>(){0§<kotlin.Any?>}[0]
    final fun raise(arrow.raise.ktor.server.response/Response): kotlin/Nothing // arrow.raise.ktor.server.routing/RaiseRoutingContext.raise|raise(arrow.raise.ktor.server.response.Response){}[0]
    final suspend fun <#A1: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<arrow.raise.ktor.server.response/Response>, #A1>).bind(): #A1 // arrow.raise.ktor.server.routing/RaiseRoutingContext.bind|bind@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<arrow.raise.ktor.server.response.Response>,0:0>(){0§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<arrow.raise.ktor.server.response/Response>, #A1>).invoke(): #A1 // arrow.raise.ktor.server.routing/RaiseRoutingContext.invoke|invoke@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<arrow.raise.ktor.server.response.Response>,0:0>(){0§<kotlin.Any?>}[0]
}

final fun (arrow.core.raise/Raise<arrow.raise.ktor.server.response/Response>).arrow.raise.ktor.server.response/raise(io.ktor.http.content/OutgoingContent): kotlin/Nothing // arrow.raise.ktor.server.response/raise|raise@arrow.core.raise.Raise<arrow.raise.ktor.server.response.Response>(io.ktor.http.content.OutgoingContent){}[0]
final fun (arrow.core.raise/Raise<arrow.raise.ktor.server.response/Response>).arrow.raise.ktor.server.response/raise(io.ktor.http/HttpStatusCode): kotlin/Nothing // arrow.raise.ktor.server.response/raise|raise@arrow.core.raise.Raise<arrow.raise.ktor.server.response.Response>(io.ktor.http.HttpStatusCode){}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/patchOrRaise(io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server.routing/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.routing.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/patchOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server.routing/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.routing.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/patchOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server.routing/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.routing.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/postOrRaise(io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server.routing/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/postOrRaise|postOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.routing.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/postOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server.routing/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/postOrRaise|postOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.routing.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/postOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server.routing/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/postOrRaise|postOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.routing.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/putOrRaise(io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server.routing/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/putOrRaise|putOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.routing.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/putOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server.routing/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/putOrRaise|putOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.routing.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/putOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server.routing/ReceivingRespondingRaiseRoutingHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/putOrRaise|putOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.routing.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (arrow.core.raise/Raise<arrow.raise.ktor.server.response/Response>).arrow.raise.ktor.server.response/raise(io.ktor.http/HttpStatusCode, #A): kotlin/Nothing // arrow.raise.ktor.server.response/raise|raise@arrow.core.raise.Raise<arrow.raise.ktor.server.response.Response>(io.ktor.http.HttpStatusCode;0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/deleteOrRaise(io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/deleteOrRaise|deleteOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/deleteOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/deleteOrRaise|deleteOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/deleteOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/deleteOrRaise|deleteOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/getOrRaise(io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/getOrRaise|getOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/getOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/getOrRaise|getOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/getOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/getOrRaise|getOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/headOrRaise(io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/headOrRaise|headOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/headOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/headOrRaise|headOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/headOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/headOrRaise|headOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/optionsOrRaise(io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/optionsOrRaise|optionsOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/optionsOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/optionsOrRaise|optionsOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/optionsOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/optionsOrRaise|optionsOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/patchOrRaise(io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/patchOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/patchOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/postOrRaise(io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/postOrRaise|postOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/postOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/postOrRaise|postOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/postOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/postOrRaise|postOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/putOrRaise(io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/putOrRaise|putOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/putOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/putOrRaise|putOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server.routing/putOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., crossinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server.routing/putOrRaise|putOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
final suspend fun (io.ktor.server.application/ApplicationCall).arrow.raise.ktor.server.response/respondSafely(io.ktor.http/HttpStatusCode?, kotlin/Any?, io.ktor.util.reflect/TypeInfo) // arrow.raise.ktor.server.response/respondSafely|respondSafely@io.ktor.server.application.ApplicationCall(io.ktor.http.HttpStatusCode?;kotlin.Any?;io.ktor.util.reflect.TypeInfo){}[0]
final suspend inline fun <#A: kotlin/Any?, #B: reified kotlin/Any?> (io.ktor.server.application/ApplicationCall).arrow.raise.ktor.server.response/respondOrRaise(kotlin/Function1<#A, arrow.raise.ktor.server.response/Response>, io.ktor.http/HttpStatusCode? = ..., kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #B>) // arrow.raise.ktor.server.response/respondOrRaise|respondOrRaise@io.ktor.server.application.ApplicationCall(kotlin.Function1<0:0,arrow.raise.ktor.server.response.Response>;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<0:0>,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?> (io.ktor.server.application/ApplicationCall).arrow.raise.ktor.server.response/respondOrRaise(io.ktor.http/HttpStatusCode? = ..., io.ktor.util.reflect/TypeInfo, kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<arrow.raise.ktor.server.response/Response>, #A>) // arrow.raise.ktor.server.response/respondOrRaise|respondOrRaise@io.ktor.server.application.ApplicationCall(io.ktor.http.HttpStatusCode?;io.ktor.util.reflect.TypeInfo;kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<arrow.raise.ktor.server.response.Response>,0:0>){0§<kotlin.Any?>}[0]
final suspend inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server.routing/respondOrRaise(io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server.routing/ReceivingRespondingRaiseRoutingHandler<#A, #B>) // arrow.raise.ktor.server.routing/respondOrRaise|respondOrRaise@io.ktor.server.routing.RoutingContext(io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.routing.ReceivingRespondingRaiseRoutingHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final suspend inline fun <#A: reified kotlin/Any?> (io.ktor.server.application/ApplicationCall).arrow.raise.ktor.server.response/respondOrRaise(io.ktor.http/HttpStatusCode? = ..., kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<arrow.raise.ktor.server.response/Response>, #A>) // arrow.raise.ktor.server.response/respondOrRaise|respondOrRaise@io.ktor.server.application.ApplicationCall(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<arrow.raise.ktor.server.response.Response>,0:0>){0§<kotlin.Any?>}[0]
final suspend inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server.routing/respondOrRaise(io.ktor.http/HttpStatusCode? = ..., kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server.routing/RaiseRoutingContext<io.ktor.server.routing/RoutingCall>, #A>) // arrow.raise.ktor.server.routing/respondOrRaise|respondOrRaise@io.ktor.server.routing.RoutingContext(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.routing.RaiseRoutingContext<io.ktor.server.routing.RoutingCall>,0:0>){0§<kotlin.Any?>}[0]
