// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.arrow-kt:arrow-raise-ktor-server>
final class arrow.raise.ktor.server/ValidatedContent : io.ktor.http.content/OutgoingContent.ByteArrayContent { // arrow.raise.ktor.server/ValidatedContent|null[0]
    constructor <init>(kotlin/String, io.ktor.http/HttpStatusCode) // arrow.raise.ktor.server/ValidatedContent.<init>|<init>(kotlin.String;io.ktor.http.HttpStatusCode){}[0]

    final val contentLength // arrow.raise.ktor.server/ValidatedContent.contentLength|{}contentLength[0]
        final fun <get-contentLength>(): kotlin/Long // arrow.raise.ktor.server/ValidatedContent.contentLength.<get-contentLength>|<get-contentLength>(){}[0]
    final val contentType // arrow.raise.ktor.server/ValidatedContent.contentType|{}contentType[0]
        final fun <get-contentType>(): io.ktor.http/ContentType // arrow.raise.ktor.server/ValidatedContent.contentType.<get-contentType>|<get-contentType>(){}[0]
    final val status // arrow.raise.ktor.server/ValidatedContent.status|{}status[0]
        final fun <get-status>(): io.ktor.http/HttpStatusCode // arrow.raise.ktor.server/ValidatedContent.status.<get-status>|<get-status>(){}[0]
    final val text // arrow.raise.ktor.server/ValidatedContent.text|{}text[0]
        final fun <get-text>(): kotlin/String // arrow.raise.ktor.server/ValidatedContent.text.<get-text>|<get-text>(){}[0]

    final fun bytes(): kotlin/ByteArray // arrow.raise.ktor.server/ValidatedContent.bytes|bytes(){}[0]
    final fun toString(): kotlin/String // arrow.raise.ktor.server/ValidatedContent.toString|toString(){}[0]
}

final class arrow.raise.ktor.server/ValidationContent : io.ktor.http.content/OutgoingContent.ByteArrayContent { // arrow.raise.ktor.server/ValidationContent|null[0]
    constructor <init>(arrow.core/NonEmptyList<io.ktor.http.content/TextContent>) // arrow.raise.ktor.server/ValidationContent.<init>|<init>(arrow.core.NonEmptyList<io.ktor.http.content.TextContent>){}[0]

    final val content // arrow.raise.ktor.server/ValidationContent.content|{}content[0]
        final fun <get-content>(): arrow.core/NonEmptyList<io.ktor.http.content/TextContent> // arrow.raise.ktor.server/ValidationContent.content.<get-content>|<get-content>(){}[0]
    final val contentLength // arrow.raise.ktor.server/ValidationContent.contentLength|{}contentLength[0]
        final fun <get-contentLength>(): kotlin/Long // arrow.raise.ktor.server/ValidationContent.contentLength.<get-contentLength>|<get-contentLength>(){}[0]
    final val contentType // arrow.raise.ktor.server/ValidationContent.contentType|{}contentType[0]
        final fun <get-contentType>(): io.ktor.http/ContentType // arrow.raise.ktor.server/ValidationContent.contentType.<get-contentType>|<get-contentType>(){}[0]

    final fun bytes(): kotlin/ByteArray // arrow.raise.ktor.server/ValidationContent.bytes|bytes(){}[0]
    final fun component1(): arrow.core/NonEmptyList<io.ktor.http.content/TextContent> // arrow.raise.ktor.server/ValidationContent.component1|component1(){}[0]
    final fun copy(arrow.core/NonEmptyList<io.ktor.http.content/TextContent> = ...): arrow.raise.ktor.server/ValidationContent // arrow.raise.ktor.server/ValidationContent.copy|copy(arrow.core.NonEmptyList<io.ktor.http.content.TextContent>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server/ValidationContent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.raise.ktor.server/ValidationContent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.raise.ktor.server/ValidationContent.toString|toString(){}[0]
}

open class <#A: kotlin/Any?> arrow.raise.ktor.server/RaiseAccumulate : arrow.core.raise/Raise<#A> { // arrow.raise.ktor.server/RaiseAccumulate|null[0]
    constructor <init>(arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>) // arrow.raise.ktor.server/RaiseAccumulate.<init>|<init>(arrow.core.raise.Raise<arrow.core.NonEmptyList<1:0>>){}[0]

    final val raise // arrow.raise.ktor.server/RaiseAccumulate.raise|{}raise[0]
        final fun <get-raise>(): arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>> // arrow.raise.ktor.server/RaiseAccumulate.raise.<get-raise>|<get-raise>(){}[0]

    final fun <#A1: kotlin/Any> ensureNotNullOrAccumulate(#A1?, kotlin/Function0<#A>) // arrow.raise.ktor.server/RaiseAccumulate.ensureNotNullOrAccumulate|ensureNotNullOrAccumulate(0:0?;kotlin.Function0<1:0>){0§<kotlin.Any>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/Either<#A, #A1>).bindOrAccumulate(): arrow.raise.ktor.server/RaiseAccumulate.Value<#A1, #A> // arrow.raise.ktor.server/RaiseAccumulate.bindOrAccumulate|bindOrAccumulate@arrow.core.Either<1:0,0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/Either<arrow.core/NonEmptyList<#A>, #A1>).bindNel(): #A1 // arrow.raise.ktor.server/RaiseAccumulate.bindNel|bindNel@arrow.core.Either<arrow.core.NonEmptyList<1:0>,0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/Either<arrow.core/NonEmptyList<#A>, #A1>).bindNelOrAccumulate(): arrow.raise.ktor.server/RaiseAccumulate.Value<#A1, #A> // arrow.raise.ktor.server/RaiseAccumulate.bindNelOrAccumulate|bindNelOrAccumulate@arrow.core.Either<arrow.core.NonEmptyList<1:0>,0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Either<#A, #A1>>).bindAllOrAccumulate(): arrow.raise.ktor.server/RaiseAccumulate.Value<kotlin.collections/List<#A1>, #A> // arrow.raise.ktor.server/RaiseAccumulate.bindAllOrAccumulate|bindAllOrAccumulate@kotlin.collections.Iterable<arrow.core.Either<1:0,0:0>>(){0§<kotlin.Any?>}[0]
    final fun addErrors(kotlin.collections/Iterable<#A>) // arrow.raise.ktor.server/RaiseAccumulate.addErrors|addErrors(kotlin.collections.Iterable<1:0>){}[0]
    final fun ensureOrAccumulate(kotlin/Boolean, kotlin/Function0<#A>) // arrow.raise.ktor.server/RaiseAccumulate.ensureOrAccumulate|ensureOrAccumulate(kotlin.Boolean;kotlin.Function0<1:0>){}[0]
    final fun hasErrors(): kotlin/Boolean // arrow.raise.ktor.server/RaiseAccumulate.hasErrors|hasErrors(){}[0]
    final fun raiseErrors(): kotlin/Nothing // arrow.raise.ktor.server/RaiseAccumulate.raiseErrors|raiseErrors(){}[0]
    final inline fun <#A1: kotlin/Any?> accumulating(kotlin/Function1<arrow.raise.ktor.server/RaiseAccumulate<#A>, #A1>): arrow.raise.ktor.server/RaiseAccumulate.Value<#A1, #A> // arrow.raise.ktor.server/RaiseAccumulate.accumulating|accumulating(kotlin.Function1<arrow.raise.ktor.server.RaiseAccumulate<1:0>,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> withNel(kotlin/Function1<arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>, #A1>): #A1 // arrow.raise.ktor.server/RaiseAccumulate.withNel|withNel(kotlin.Function1<arrow.core.raise.Raise<arrow.core.NonEmptyList<1:0>>,0:0>){0§<kotlin.Any?>}[0]
    open fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (kotlin.collections/Map<#A1, arrow.core/Either<#A, #B1>>).bindAll(): kotlin.collections/Map<#A1, #B1> // arrow.raise.ktor.server/RaiseAccumulate.bindAll|bindAll@kotlin.collections.Map<0:0,arrow.core.Either<1:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    open fun raise(#A): kotlin/Nothing // arrow.raise.ktor.server/RaiseAccumulate.raise|raise(1:0){}[0]

    abstract inner class <#A1: out kotlin/Any?> Value { // arrow.raise.ktor.server/RaiseAccumulate.Value|null[0]
        constructor <init>() // arrow.raise.ktor.server/RaiseAccumulate.Value.<init>|<init>(){}[0]

        abstract val result // arrow.raise.ktor.server/RaiseAccumulate.Value.result|{}result[0]
            abstract fun <get-result>(): #A1 // arrow.raise.ktor.server/RaiseAccumulate.Value.result.<get-result>|<get-result>(){}[0]

        final fun getValue(kotlin/Nothing?, kotlin.reflect/KProperty<*>): #A1 // arrow.raise.ktor.server/RaiseAccumulate.Value.getValue|getValue(kotlin.Nothing?;kotlin.reflect.KProperty<*>){}[0]
    }

    final inner class <#A1: out kotlin/Any?> Ok : arrow.raise.ktor.server/RaiseAccumulate.Value<#A1, #A> { // arrow.raise.ktor.server/RaiseAccumulate.Ok|null[0]
        constructor <init>(#A1) // arrow.raise.ktor.server/RaiseAccumulate.Ok.<init>|<init>(1:0){}[0]

        final val result // arrow.raise.ktor.server/RaiseAccumulate.Ok.result|{}result[0]
            final fun <get-result>(): #A1 // arrow.raise.ktor.server/RaiseAccumulate.Ok.result.<get-result>|<get-result>(){}[0]
    }

    final inner class Error : arrow.raise.ktor.server/RaiseAccumulate.Value<kotlin/Nothing, #A> { // arrow.raise.ktor.server/RaiseAccumulate.Error|null[0]
        constructor <init>() // arrow.raise.ktor.server/RaiseAccumulate.Error.<init>|<init>(){}[0]

        final val result // arrow.raise.ktor.server/RaiseAccumulate.Error.result|{}result[0]
            final fun <get-result>(): kotlin/Nothing // arrow.raise.ktor.server/RaiseAccumulate.Error.result.<get-result>|<get-result>(){}[0]
    }
}

final object arrow.raise.ktor.server/EmptyContent : io.ktor.http.content/OutgoingContent.NoContent { // arrow.raise.ktor.server/EmptyContent|null[0]
    final val contentLength // arrow.raise.ktor.server/EmptyContent.contentLength|{}contentLength[0]
        final fun <get-contentLength>(): kotlin/Long // arrow.raise.ktor.server/EmptyContent.contentLength.<get-contentLength>|<get-contentLength>(){}[0]

    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server/EmptyContent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.raise.ktor.server/EmptyContent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.raise.ktor.server/EmptyContent.toString|toString(){}[0]
}

final fun (io.ktor.server.routing/Routing).arrow.raise.ktor.server/getOrRaise(kotlin.text/Regex, kotlin.coroutines/SuspendFunction3<arrow.core.raise/Raise<io.ktor.http/HttpStatusCode>, arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>, io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // arrow.raise.ktor.server/getOrRaise|getOrRaise@io.ktor.server.routing.Routing(kotlin.text.Regex;kotlin.coroutines.SuspendFunction3<arrow.core.raise.Raise<io.ktor.http.HttpStatusCode>,arrow.core.raise.Raise<io.ktor.http.content.OutgoingContent>,io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Routing).arrow.raise.ktor.server/getOrRaise(kotlin/String, kotlin.coroutines/SuspendFunction3<arrow.core.raise/Raise<io.ktor.http/HttpStatusCode>, arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>, io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // arrow.raise.ktor.server/getOrRaise|getOrRaise@io.ktor.server.routing.Routing(kotlin.String;kotlin.coroutines.SuspendFunction3<arrow.core.raise.Raise<io.ktor.http.HttpStatusCode>,arrow.core.raise.Raise<io.ktor.http.content.OutgoingContent>,io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Routing).arrow.raise.ktor.server/putOrRaise(kotlin.text/Regex, kotlin.coroutines/SuspendFunction3<arrow.core.raise/Raise<io.ktor.http/HttpStatusCode>, arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>, io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Routing(kotlin.text.Regex;kotlin.coroutines.SuspendFunction3<arrow.core.raise.Raise<io.ktor.http.HttpStatusCode>,arrow.core.raise.Raise<io.ktor.http.content.OutgoingContent>,io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun (io.ktor.server.routing/Routing).arrow.raise.ktor.server/putOrRaise(kotlin/String, kotlin.coroutines/SuspendFunction3<arrow.core.raise/Raise<io.ktor.http/HttpStatusCode>, arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>, io.ktor.server.routing/RoutingContext, kotlin/Unit>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Routing(kotlin.String;kotlin.coroutines.SuspendFunction3<arrow.core.raise.Raise<io.ktor.http.HttpStatusCode>,arrow.core.raise.Raise<io.ktor.http.content.OutgoingContent>,io.ktor.server.routing.RoutingContext,kotlin.Unit>){}[0]
final fun arrow.raise.ktor.server/defaultBadRequest(arrow.core/NonEmptyList<kotlin/String>): io.ktor.http.content/TextContent // arrow.raise.ktor.server/defaultBadRequest|defaultBadRequest(arrow.core.NonEmptyList<kotlin.String>){}[0]
final fun context(arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>) (arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>).arrow.raise.ktor.server/pathOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server/pathOrRaise|pathOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<io.ktor.http.content.OutgoingContent>(kotlin.String){}[0]
final fun context(arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>) (arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>).arrow.raise.ktor.server/queryOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server/queryOrRaise|queryOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<io.ktor.http.content.OutgoingContent>(kotlin.String){}[0]
final fun context(arrow.core.raise/Raise<kotlin/String>) (arrow.core.raise/Raise<kotlin/String>).arrow.raise.ktor.server/pathOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server/pathOrRaise|pathOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<kotlin.String>(kotlin.String){}[0]
final fun context(arrow.core.raise/Raise<kotlin/String>) (arrow.core.raise/Raise<kotlin/String>).arrow.raise.ktor.server/queryIntOrRaise(kotlin/String): kotlin/Int // arrow.raise.ktor.server/queryIntOrRaise|queryIntOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<kotlin.String>(kotlin.String){}[0]
final fun context(arrow.core.raise/Raise<kotlin/String>) (arrow.core.raise/Raise<kotlin/String>).arrow.raise.ktor.server/queryOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server/queryOrRaise|queryOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<kotlin.String>(kotlin.String){}[0]
final inline fun <#A: kotlin/Any> context(arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>) (arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>).arrow.raise.ktor.server/queryOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server/queryOrRaise|queryOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<io.ktor.http.content.OutgoingContent>(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.raise.ktor.server/accumulate(kotlin/Function1<arrow.raise.ktor.server/RaiseAccumulate<#A>, #B>): #B // arrow.raise.ktor.server/accumulate|accumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.Function1<arrow.raise.ktor.server.RaiseAccumulate<0:0>,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> context(arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>) (arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>).arrow.raise.ktor.server/pathOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server/pathOrRaise|pathOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<io.ktor.http.content.OutgoingContent>(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> context(arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>) arrow.raise.ktor.server/validate(kotlin/Function1<arrow.core/NonEmptyList<kotlin/String>, io.ktor.http.content/OutgoingContent> = ..., kotlin/Function1<arrow.raise.ktor.server/RaiseAccumulate<kotlin/String>, #A>): #A // arrow.raise.ktor.server/validate|validate!arrow.core.raise.Raise<io.ktor.http.content.OutgoingContent>(kotlin.Function1<arrow.core.NonEmptyList<kotlin.String>,io.ktor.http.content.OutgoingContent>;kotlin.Function1<arrow.raise.ktor.server.RaiseAccumulate<kotlin.String>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> context(arrow.core.raise/Raise<kotlin/String>) (arrow.core.raise/Raise<kotlin/String>).arrow.raise.ktor.server/pathOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server/pathOrRaise|pathOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<kotlin.String>(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> context(arrow.core.raise/Raise<kotlin/String>) (arrow.core.raise/Raise<kotlin/String>).arrow.raise.ktor.server/queryOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server/queryOrRaise|queryOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<kotlin.String>(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any> context(arrow.core.raise/Raise<kotlin/String>) (arrow.core.raise/Raise<kotlin/String>).arrow.raise.ktor.server/receiveNullableOrRaise(io.ktor.util.reflect/TypeInfo): #A? // arrow.raise.ktor.server/receiveNullableOrRaise|receiveNullableOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<kotlin.String>(io.ktor.util.reflect.TypeInfo){0§<kotlin.Any>}[0]
final suspend fun <#A: kotlin/Any> context(arrow.core.raise/Raise<kotlin/String>) (arrow.core.raise/Raise<kotlin/String>).arrow.raise.ktor.server/receiveOrRaise(kotlin.reflect/KClass<#A>): #A // arrow.raise.ktor.server/receiveOrRaise|receiveOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<kotlin.String>(kotlin.reflect.KClass<0:0>){0§<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any> context(arrow.core.raise/Raise<kotlin/String>) (arrow.core.raise/Raise<kotlin/String>).arrow.raise.ktor.server/receiveOrRaise(): #A // arrow.raise.ktor.server/receiveOrRaise|receiveOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<kotlin.String>(){0§<kotlin.Any>}[0]
