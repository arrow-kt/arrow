// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.arrow-kt:arrow-raise-ktor-server>
abstract fun interface <#A: kotlin/Any?, #B: kotlin/Any?> arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler { // arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler|null[0]
    abstract suspend fun (arrow.raise.ktor.server/RaiseRoutingContext).handle(#A): #B // arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler.handle|handle@arrow.raise.ktor.server.RaiseRoutingContext(1:0){}[0]
}

sealed interface arrow.raise.ktor.server/RoutingResponse { // arrow.raise.ktor.server/RoutingResponse|null[0]
    final object Companion { // arrow.raise.ktor.server/RoutingResponse.Companion|null[0]
        final fun RoutingResponse(io.ktor.http.content/OutgoingContent): arrow.raise.ktor.server/RoutingResponse // arrow.raise.ktor.server/RoutingResponse.Companion.RoutingResponse|RoutingResponse(io.ktor.http.content.OutgoingContent){}[0]
        final fun RoutingResponse(io.ktor.http/HttpStatusCode): arrow.raise.ktor.server/RoutingResponse // arrow.raise.ktor.server/RoutingResponse.Companion.RoutingResponse|RoutingResponse(io.ktor.http.HttpStatusCode){}[0]
        final fun RoutingResponse(io.ktor.http/HttpStatusCode, kotlin/Any?, io.ktor.util.reflect/TypeInfo): arrow.raise.ktor.server/RoutingResponse // arrow.raise.ktor.server/RoutingResponse.Companion.RoutingResponse|RoutingResponse(io.ktor.http.HttpStatusCode;kotlin.Any?;io.ktor.util.reflect.TypeInfo){}[0]
        final inline fun <#A2: reified kotlin/Any> (io.ktor.http/HttpStatusCode).invoke(#A2): arrow.raise.ktor.server/RoutingResponse // arrow.raise.ktor.server/RoutingResponse.Companion.invoke|invoke@io.ktor.http.HttpStatusCode(0:0){0§<kotlin.Any>}[0]
        final inline fun <#A2: reified kotlin/Any?> RoutingResponse(io.ktor.http/HttpStatusCode, #A2): arrow.raise.ktor.server/RoutingResponse // arrow.raise.ktor.server/RoutingResponse.Companion.RoutingResponse|RoutingResponse(io.ktor.http.HttpStatusCode;0:0){0§<kotlin.Any?>}[0]
    }
}

final class arrow.raise.ktor.server/RaiseRoutingContext : arrow.core.raise/Raise<arrow.raise.ktor.server/RoutingResponse> { // arrow.raise.ktor.server/RaiseRoutingContext|null[0]
    constructor <init>(arrow.core.raise/Raise<arrow.raise.ktor.server/RoutingResponse>, io.ktor.server.routing/RoutingContext) // arrow.raise.ktor.server/RaiseRoutingContext.<init>|<init>(arrow.core.raise.Raise<arrow.raise.ktor.server.RoutingResponse>;io.ktor.server.routing.RoutingContext){}[0]

    final val call // arrow.raise.ktor.server/RaiseRoutingContext.call|{}call[0]
        final fun <get-call>(): io.ktor.server.routing/RoutingCall // arrow.raise.ktor.server/RaiseRoutingContext.call.<get-call>|<get-call>(){}[0]

    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (kotlin.collections/Map<#A1, arrow.core/Either<arrow.raise.ktor.server/RoutingResponse, #B1>>).bindAll(): kotlin.collections/Map<#A1, #B1> // arrow.raise.ktor.server/RaiseRoutingContext.bindAll|bindAll@kotlin.collections.Map<0:0,arrow.core.Either<arrow.raise.ktor.server.RoutingResponse,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/Either<arrow.raise.ktor.server/RoutingResponse, #A1>).bind(): #A1 // arrow.raise.ktor.server/RaiseRoutingContext.bind|bind@arrow.core.Either<arrow.raise.ktor.server.RoutingResponse,0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptyList<arrow.core/Either<arrow.raise.ktor.server/RoutingResponse, #A1>>).bindAll(): arrow.core/NonEmptyList<#A1> // arrow.raise.ktor.server/RaiseRoutingContext.bindAll|bindAll@arrow.core.NonEmptyList<arrow.core.Either<arrow.raise.ktor.server.RoutingResponse,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptySet<arrow.core/Either<arrow.raise.ktor.server/RoutingResponse, #A1>>).bindAll(): arrow.core/NonEmptySet<#A1> // arrow.raise.ktor.server/RaiseRoutingContext.bindAll|bindAll@arrow.core.NonEmptySet<arrow.core.Either<arrow.raise.ktor.server.RoutingResponse,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Either<arrow.raise.ktor.server/RoutingResponse, #A1>>).bindAll(): kotlin.collections/List<#A1> // arrow.raise.ktor.server/RaiseRoutingContext.bindAll|bindAll@kotlin.collections.Iterable<arrow.core.Either<arrow.raise.ktor.server.RoutingResponse,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<arrow.raise.ktor.server/RoutingResponse>, #A1>).bind(): #A1 // arrow.raise.ktor.server/RaiseRoutingContext.bind|bind@kotlin.Function1<arrow.core.raise.Raise<arrow.raise.ktor.server.RoutingResponse>,0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<arrow.raise.ktor.server/RoutingResponse>, #A1>).invoke(): #A1 // arrow.raise.ktor.server/RaiseRoutingContext.invoke|invoke@kotlin.Function1<arrow.core.raise.Raise<arrow.raise.ktor.server.RoutingResponse>,0:0>(){0§<kotlin.Any?>}[0]
    final fun raise(arrow.raise.ktor.server/RoutingResponse): kotlin/Nothing // arrow.raise.ktor.server/RaiseRoutingContext.raise|raise(arrow.raise.ktor.server.RoutingResponse){}[0]
    final suspend fun <#A1: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<arrow.raise.ktor.server/RoutingResponse>, #A1>).bind(): #A1 // arrow.raise.ktor.server/RaiseRoutingContext.bind|bind@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<arrow.raise.ktor.server.RoutingResponse>,0:0>(){0§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<arrow.raise.ktor.server/RoutingResponse>, #A1>).invoke(): #A1 // arrow.raise.ktor.server/RaiseRoutingContext.invoke|invoke@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<arrow.raise.ktor.server.RoutingResponse>,0:0>(){0§<kotlin.Any?>}[0]
}

final class arrow.raise.ktor.server/TypedResponse : arrow.raise.ktor.server/RoutingResponse { // arrow.raise.ktor.server/TypedResponse|null[0]
    constructor <init>(io.ktor.http/HttpStatusCode = ..., kotlin/Any?, io.ktor.util.reflect/TypeInfo) // arrow.raise.ktor.server/TypedResponse.<init>|<init>(io.ktor.http.HttpStatusCode;kotlin.Any?;io.ktor.util.reflect.TypeInfo){}[0]

    final val content // arrow.raise.ktor.server/TypedResponse.content|{}content[0]
        final fun <get-content>(): kotlin/Any? // arrow.raise.ktor.server/TypedResponse.content.<get-content>|<get-content>(){}[0]
    final val statusCode // arrow.raise.ktor.server/TypedResponse.statusCode|{}statusCode[0]
        final fun <get-statusCode>(): io.ktor.http/HttpStatusCode // arrow.raise.ktor.server/TypedResponse.statusCode.<get-statusCode>|<get-statusCode>(){}[0]
    final val typeInfo // arrow.raise.ktor.server/TypedResponse.typeInfo|{}typeInfo[0]
        final fun <get-typeInfo>(): io.ktor.util.reflect/TypeInfo // arrow.raise.ktor.server/TypedResponse.typeInfo.<get-typeInfo>|<get-typeInfo>(){}[0]

    final fun component1(): io.ktor.http/HttpStatusCode // arrow.raise.ktor.server/TypedResponse.component1|component1(){}[0]
    final fun component2(): kotlin/Any? // arrow.raise.ktor.server/TypedResponse.component2|component2(){}[0]
    final fun component3(): io.ktor.util.reflect/TypeInfo // arrow.raise.ktor.server/TypedResponse.component3|component3(){}[0]
    final fun copy(io.ktor.http/HttpStatusCode = ..., kotlin/Any? = ..., io.ktor.util.reflect/TypeInfo = ...): arrow.raise.ktor.server/TypedResponse // arrow.raise.ktor.server/TypedResponse.copy|copy(io.ktor.http.HttpStatusCode;kotlin.Any?;io.ktor.util.reflect.TypeInfo){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server/TypedResponse.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.raise.ktor.server/TypedResponse.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.raise.ktor.server/TypedResponse.toString|toString(){}[0]
}

final class arrow.raise.ktor.server/ValidatedContent : io.ktor.http.content/OutgoingContent.ByteArrayContent { // arrow.raise.ktor.server/ValidatedContent|null[0]
    constructor <init>(kotlin/String, io.ktor.http/HttpStatusCode) // arrow.raise.ktor.server/ValidatedContent.<init>|<init>(kotlin.String;io.ktor.http.HttpStatusCode){}[0]

    final val contentLength // arrow.raise.ktor.server/ValidatedContent.contentLength|{}contentLength[0]
        final fun <get-contentLength>(): kotlin/Long // arrow.raise.ktor.server/ValidatedContent.contentLength.<get-contentLength>|<get-contentLength>(){}[0]
    final val contentType // arrow.raise.ktor.server/ValidatedContent.contentType|{}contentType[0]
        final fun <get-contentType>(): io.ktor.http/ContentType // arrow.raise.ktor.server/ValidatedContent.contentType.<get-contentType>|<get-contentType>(){}[0]
    final val status // arrow.raise.ktor.server/ValidatedContent.status|{}status[0]
        final fun <get-status>(): io.ktor.http/HttpStatusCode // arrow.raise.ktor.server/ValidatedContent.status.<get-status>|<get-status>(){}[0]
    final val text // arrow.raise.ktor.server/ValidatedContent.text|{}text[0]
        final fun <get-text>(): kotlin/String // arrow.raise.ktor.server/ValidatedContent.text.<get-text>|<get-text>(){}[0]

    final fun bytes(): kotlin/ByteArray // arrow.raise.ktor.server/ValidatedContent.bytes|bytes(){}[0]
    final fun toString(): kotlin/String // arrow.raise.ktor.server/ValidatedContent.toString|toString(){}[0]
}

final class arrow.raise.ktor.server/ValidationContent : io.ktor.http.content/OutgoingContent.ByteArrayContent { // arrow.raise.ktor.server/ValidationContent|null[0]
    constructor <init>(arrow.core/NonEmptyList<io.ktor.http.content/TextContent>) // arrow.raise.ktor.server/ValidationContent.<init>|<init>(arrow.core.NonEmptyList<io.ktor.http.content.TextContent>){}[0]

    final val content // arrow.raise.ktor.server/ValidationContent.content|{}content[0]
        final fun <get-content>(): arrow.core/NonEmptyList<io.ktor.http.content/TextContent> // arrow.raise.ktor.server/ValidationContent.content.<get-content>|<get-content>(){}[0]
    final val contentLength // arrow.raise.ktor.server/ValidationContent.contentLength|{}contentLength[0]
        final fun <get-contentLength>(): kotlin/Long // arrow.raise.ktor.server/ValidationContent.contentLength.<get-contentLength>|<get-contentLength>(){}[0]
    final val contentType // arrow.raise.ktor.server/ValidationContent.contentType|{}contentType[0]
        final fun <get-contentType>(): io.ktor.http/ContentType // arrow.raise.ktor.server/ValidationContent.contentType.<get-contentType>|<get-contentType>(){}[0]

    final fun bytes(): kotlin/ByteArray // arrow.raise.ktor.server/ValidationContent.bytes|bytes(){}[0]
    final fun component1(): arrow.core/NonEmptyList<io.ktor.http.content/TextContent> // arrow.raise.ktor.server/ValidationContent.component1|component1(){}[0]
    final fun copy(arrow.core/NonEmptyList<io.ktor.http.content/TextContent> = ...): arrow.raise.ktor.server/ValidationContent // arrow.raise.ktor.server/ValidationContent.copy|copy(arrow.core.NonEmptyList<io.ktor.http.content.TextContent>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.raise.ktor.server/ValidationContent.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.raise.ktor.server/ValidationContent.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.raise.ktor.server/ValidationContent.toString|toString(){}[0]
}

final fun (arrow.core.raise/Raise<arrow.raise.ktor.server/RoutingResponse>).arrow.raise.ktor.server/raise(io.ktor.http.content/OutgoingContent): kotlin/Nothing // arrow.raise.ktor.server/raise|raise@arrow.core.raise.Raise<arrow.raise.ktor.server.RoutingResponse>(io.ktor.http.content.OutgoingContent){}[0]
final fun (arrow.core.raise/Raise<arrow.raise.ktor.server/RoutingResponse>).arrow.raise.ktor.server/raise(io.ktor.http/HttpStatusCode): kotlin/Nothing // arrow.raise.ktor.server/raise|raise@arrow.core.raise.Raise<arrow.raise.ktor.server.RoutingResponse>(io.ktor.http.HttpStatusCode){}[0]
final fun (arrow.core.raise/Raise<arrow.raise.ktor.server/RoutingResponse>).arrow.raise.ktor.server/raiseBadRequest(): kotlin/Nothing // arrow.raise.ktor.server/raiseBadRequest|raiseBadRequest@arrow.core.raise.Raise<arrow.raise.ktor.server.RoutingResponse>(){}[0]
final fun (arrow.core.raise/Raise<arrow.raise.ktor.server/RoutingResponse>).arrow.raise.ktor.server/raiseNotFound(): kotlin/Nothing // arrow.raise.ktor.server/raiseNotFound|raiseNotFound@arrow.core.raise.Raise<arrow.raise.ktor.server.RoutingResponse>(){}[0]
final fun (io.ktor.server.routing/Route).arrow.raise.ktor.server/handleOrRaise(kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, kotlin/Unit>) // arrow.raise.ktor.server/handleOrRaise|handleOrRaise@io.ktor.server.routing.Route(kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,kotlin.Unit>){}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>).arrow.raise.ktor.server/asKtorHandler(io.ktor.http/HttpStatusCode?, io.ktor.util.reflect/TypeInfo): kotlin.coroutines/SuspendFunction2<io.ktor.server.routing/RoutingContext, #A, kotlin/Unit> // arrow.raise.ktor.server/asKtorHandler|asKtorHandler@arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>(io.ktor.http.HttpStatusCode?;io.ktor.util.reflect.TypeInfo){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>).arrow.raise.ktor.server/asKtorHandler(io.ktor.http/HttpStatusCode?, io.ktor.util.reflect/TypeInfo): kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit> // arrow.raise.ktor.server/asKtorHandler|asKtorHandler@kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>(io.ktor.http.HttpStatusCode?;io.ktor.util.reflect.TypeInfo){0§<kotlin.Any?>}[0]
final fun arrow.raise.ktor.server/defaultBadRequest(arrow.core/NonEmptyList<kotlin/String>): io.ktor.http.content/TextContent // arrow.raise.ktor.server/defaultBadRequest|defaultBadRequest(arrow.core.NonEmptyList<kotlin.String>){}[0]
final fun context(arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>) (arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>).arrow.raise.ktor.server/pathOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server/pathOrRaise|pathOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<io.ktor.http.content.OutgoingContent>(kotlin.String){}[0]
final fun context(arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>) (arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>).arrow.raise.ktor.server/queryOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server/queryOrRaise|queryOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<io.ktor.http.content.OutgoingContent>(kotlin.String){}[0]
final fun context(arrow.core.raise/Raise<kotlin/String>) (arrow.core.raise/Raise<kotlin/String>).arrow.raise.ktor.server/pathOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server/pathOrRaise|pathOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<kotlin.String>(kotlin.String){}[0]
final fun context(arrow.core.raise/Raise<kotlin/String>) (arrow.core.raise/Raise<kotlin/String>).arrow.raise.ktor.server/queryIntOrRaise(kotlin/String): kotlin/Int // arrow.raise.ktor.server/queryIntOrRaise|queryIntOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<kotlin.String>(kotlin.String){}[0]
final fun context(arrow.core.raise/Raise<kotlin/String>) (arrow.core.raise/Raise<kotlin/String>).arrow.raise.ktor.server/queryOrRaise(kotlin/String): kotlin/String // arrow.raise.ktor.server/queryOrRaise|queryOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<kotlin.String>(kotlin.String){}[0]
final inline fun <#A: kotlin/Any> context(arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>) (arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>).arrow.raise.ktor.server/queryOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server/queryOrRaise|queryOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<io.ktor.http.content.OutgoingContent>(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: reified kotlin/Any?> (arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>).arrow.raise.ktor.server/asKtorHandler(io.ktor.http/HttpStatusCode?): kotlin.coroutines/SuspendFunction2<io.ktor.server.routing/RoutingContext, #A, kotlin/Unit> // arrow.raise.ktor.server/asKtorHandler|asKtorHandler@arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>(io.ktor.http.HttpStatusCode?){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> context(arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>) (arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>).arrow.raise.ktor.server/pathOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server/pathOrRaise|pathOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<io.ktor.http.content.OutgoingContent>(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> context(arrow.core.raise/Raise<io.ktor.http.content/OutgoingContent>) arrow.raise.ktor.server/validate(kotlin/Function1<arrow.core/NonEmptyList<kotlin/String>, io.ktor.http.content/OutgoingContent> = ..., kotlin/Function1<arrow.core.raise/RaiseAccumulate<kotlin/String>, #A>): #A // arrow.raise.ktor.server/validate|validate!arrow.core.raise.Raise<io.ktor.http.content.OutgoingContent>(kotlin.Function1<arrow.core.NonEmptyList<kotlin.String>,io.ktor.http.content.OutgoingContent>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<kotlin.String>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> context(arrow.core.raise/Raise<kotlin/String>) (arrow.core.raise/Raise<kotlin/String>).arrow.raise.ktor.server/pathOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server/pathOrRaise|pathOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<kotlin.String>(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> context(arrow.core.raise/Raise<kotlin/String>) (arrow.core.raise/Raise<kotlin/String>).arrow.raise.ktor.server/queryOrRaise(kotlin/String, kotlin/Function2<arrow.core.raise/Raise<kotlin/String>, kotlin/String, #A>): #A // arrow.raise.ktor.server/queryOrRaise|queryOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<kotlin.String>(kotlin.String;kotlin.Function2<arrow.core.raise.Raise<kotlin.String>,kotlin.String,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any, #B: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., arrow.raise.ktor.server/ReceivingRespondOrRaiseHandler<#A, #B>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;arrow.raise.ktor.server.ReceivingRespondOrRaiseHandler<0:0,0:1>){0§<kotlin.Any>;1§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (arrow.core.raise/Raise<arrow.raise.ktor.server/RoutingResponse>).arrow.raise.ktor.server/raise(io.ktor.http/HttpStatusCode, #A): kotlin/Nothing // arrow.raise.ktor.server/raise|raise@arrow.core.raise.Raise<arrow.raise.ktor.server.RoutingResponse>(io.ktor.http.HttpStatusCode;0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (arrow.core.raise/Raise<arrow.raise.ktor.server/RoutingResponse>).arrow.raise.ktor.server/raiseBadRequest(#A): kotlin/Nothing // arrow.raise.ktor.server/raiseBadRequest|raiseBadRequest@arrow.core.raise.Raise<arrow.raise.ktor.server.RoutingResponse>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (arrow.core.raise/Raise<arrow.raise.ktor.server/RoutingResponse>).arrow.raise.ktor.server/raiseNotFound(#A): kotlin/Nothing // arrow.raise.ktor.server/raiseNotFound|raiseNotFound@arrow.core.raise.Raise<arrow.raise.ktor.server.RoutingResponse>(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/deleteOrRaise(io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/deleteOrRaise|deleteOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/deleteOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/deleteOrRaise|deleteOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/deleteOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/deleteOrRaise|deleteOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/getOrRaise(io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/getOrRaise|getOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/getOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/getOrRaise|getOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/getOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/getOrRaise|getOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/headOrRaise(io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/headOrRaise|headOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/headOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/headOrRaise|headOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/headOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/headOrRaise|headOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/optionsOrRaise(io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/optionsOrRaise|optionsOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/optionsOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/optionsOrRaise|optionsOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/optionsOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/optionsOrRaise|optionsOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/patchOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/patchOrRaise|patchOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/postOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/postOrRaise|postOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(kotlin.text/Regex, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(kotlin.text.Regex;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/Route).arrow.raise.ktor.server/putOrRaise(kotlin/String, io.ktor.http/HttpStatusCode? = ..., noinline kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>): io.ktor.server.routing/Route // arrow.raise.ktor.server/putOrRaise|putOrRaise@io.ktor.server.routing.Route(kotlin.String;io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>).arrow.raise.ktor.server/asKtorHandler(io.ktor.http/HttpStatusCode?): kotlin.coroutines/SuspendFunction1<io.ktor.server.routing/RoutingContext, kotlin/Unit> // arrow.raise.ktor.server/asKtorHandler|asKtorHandler@kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>(io.ktor.http.HttpStatusCode?){0§<kotlin.Any?>}[0]
final suspend fun (io.ktor.server.routing/RoutingCall).arrow.raise.ktor.server/respond(arrow.raise.ktor.server/RoutingResponse) // arrow.raise.ktor.server/respond|respond@io.ktor.server.routing.RoutingCall(arrow.raise.ktor.server.RoutingResponse){}[0]
final suspend fun (io.ktor.server.routing/RoutingCall).arrow.raise.ktor.server/respondSafely(io.ktor.http/HttpStatusCode?, kotlin/Any?, io.ktor.util.reflect/TypeInfo) // arrow.raise.ktor.server/respondSafely|respondSafely@io.ktor.server.routing.RoutingCall(io.ktor.http.HttpStatusCode?;kotlin.Any?;io.ktor.util.reflect.TypeInfo){}[0]
final suspend fun <#A: kotlin/Any> context(arrow.core.raise/Raise<kotlin/String>) (arrow.core.raise/Raise<kotlin/String>).arrow.raise.ktor.server/receiveNullableOrRaise(io.ktor.util.reflect/TypeInfo): #A? // arrow.raise.ktor.server/receiveNullableOrRaise|receiveNullableOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<kotlin.String>(io.ktor.util.reflect.TypeInfo){0§<kotlin.Any>}[0]
final suspend fun <#A: kotlin/Any> context(arrow.core.raise/Raise<kotlin/String>) (arrow.core.raise/Raise<kotlin/String>).arrow.raise.ktor.server/receiveOrRaise(kotlin.reflect/KClass<#A>): #A // arrow.raise.ktor.server/receiveOrRaise|receiveOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<kotlin.String>(kotlin.reflect.KClass<0:0>){0§<kotlin.Any>}[0]
final suspend inline fun (io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server/handleOrRaise(kotlin/Function1<arrow.raise.ktor.server/RaiseRoutingContext, kotlin/Unit>) // arrow.raise.ktor.server/handleOrRaise|handleOrRaise@io.ktor.server.routing.RoutingContext(kotlin.Function1<arrow.raise.ktor.server.RaiseRoutingContext,kotlin.Unit>){}[0]
final suspend inline fun <#A: kotlin/Any?> (io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server/respondOrRaise(io.ktor.http/HttpStatusCode? = ..., io.ktor.util.reflect/TypeInfo, kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>) // arrow.raise.ktor.server/respondOrRaise|respondOrRaise@io.ktor.server.routing.RoutingContext(io.ktor.http.HttpStatusCode?;io.ktor.util.reflect.TypeInfo;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
final suspend inline fun <#A: reified kotlin/Any> context(arrow.core.raise/Raise<kotlin/String>) (arrow.core.raise/Raise<kotlin/String>).arrow.raise.ktor.server/receiveOrRaise(): #A // arrow.raise.ktor.server/receiveOrRaise|receiveOrRaise!io.ktor.server.routing.RoutingContext@arrow.core.raise.Raise<kotlin.String>(){0§<kotlin.Any>}[0]
final suspend inline fun <#A: reified kotlin/Any?> (io.ktor.server.routing/RoutingContext).arrow.raise.ktor.server/respondOrRaise(io.ktor.http/HttpStatusCode? = ..., kotlin.coroutines/SuspendFunction1<arrow.raise.ktor.server/RaiseRoutingContext, #A>) // arrow.raise.ktor.server/respondOrRaise|respondOrRaise@io.ktor.server.routing.RoutingContext(io.ktor.http.HttpStatusCode?;kotlin.coroutines.SuspendFunction1<arrow.raise.ktor.server.RaiseRoutingContext,0:0>){0§<kotlin.Any?>}[0]
