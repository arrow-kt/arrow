public final class arrow/resilience/CircuitBreaker {
	public static final field Companion Larrow/resilience/CircuitBreaker$Companion;
	public synthetic fun <init> (Ljava/util/concurrent/atomic/AtomicReference;JDJLkotlin/time/TimeSource;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun awaitClose (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun doOnClosed (Lkotlin/jvm/functions/Function1;)Larrow/resilience/CircuitBreaker;
	public final fun doOnHalfOpen (Lkotlin/jvm/functions/Function1;)Larrow/resilience/CircuitBreaker;
	public final fun doOnOpen (Lkotlin/jvm/functions/Function1;)Larrow/resilience/CircuitBreaker;
	public final fun doOnRejectedTask (Lkotlin/jvm/functions/Function1;)Larrow/resilience/CircuitBreaker;
	public final fun protectEither (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun protectOrThrow (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun state (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class arrow/resilience/CircuitBreaker$Companion {
	public final fun invoke-MWqDXGA (JLarrow/resilience/CircuitBreaker$OpeningStrategy;DJLkotlin/time/TimeSource;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;)Larrow/resilience/CircuitBreaker;
	public static synthetic fun invoke-MWqDXGA$default (Larrow/resilience/CircuitBreaker$Companion;JLarrow/resilience/CircuitBreaker$OpeningStrategy;DJLkotlin/time/TimeSource;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function1;ILjava/lang/Object;)Larrow/resilience/CircuitBreaker;
}

public final class arrow/resilience/CircuitBreaker$ExecutionRejected : java/lang/Throwable {
	public fun <init> (Ljava/lang/String;Larrow/resilience/CircuitBreaker$State;)V
	public final fun getReason ()Ljava/lang/String;
	public final fun getState ()Larrow/resilience/CircuitBreaker$State;
}

public abstract class arrow/resilience/CircuitBreaker$OpeningStrategy {
}

public final class arrow/resilience/CircuitBreaker$OpeningStrategy$Count : arrow/resilience/CircuitBreaker$OpeningStrategy {
	public static final field Companion Larrow/resilience/CircuitBreaker$OpeningStrategy$Count$Companion;
	public fun <init> (II)V
	public synthetic fun <init> (IIILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()I
	public final fun component2 ()I
	public final fun copy (II)Larrow/resilience/CircuitBreaker$OpeningStrategy$Count;
	public static synthetic fun copy$default (Larrow/resilience/CircuitBreaker$OpeningStrategy$Count;IIILjava/lang/Object;)Larrow/resilience/CircuitBreaker$OpeningStrategy$Count;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getFailuresCount ()I
	public final fun getMaxFailures ()I
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class arrow/resilience/CircuitBreaker$OpeningStrategy$Count$Companion {
	public final fun invoke (I)Larrow/resilience/CircuitBreaker$OpeningStrategy$Count;
}

public final class arrow/resilience/CircuitBreaker$OpeningStrategy$SlidingWindow : arrow/resilience/CircuitBreaker$OpeningStrategy {
	public static final field Companion Larrow/resilience/CircuitBreaker$OpeningStrategy$SlidingWindow$Companion;
	public synthetic fun <init> (Lkotlin/time/TimeSource;Ljava/util/List;JILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public final fun component1 ()Lkotlin/time/TimeSource;
	public final fun component2 ()Ljava/util/List;
	public final fun component3-UwyO8pc ()J
	public final fun component4 ()I
	public final fun copy-exY8QGI (Lkotlin/time/TimeSource;Ljava/util/List;JI)Larrow/resilience/CircuitBreaker$OpeningStrategy$SlidingWindow;
	public static synthetic fun copy-exY8QGI$default (Larrow/resilience/CircuitBreaker$OpeningStrategy$SlidingWindow;Lkotlin/time/TimeSource;Ljava/util/List;JIILjava/lang/Object;)Larrow/resilience/CircuitBreaker$OpeningStrategy$SlidingWindow;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getFailures ()Ljava/util/List;
	public final fun getMaxFailures ()I
	public final fun getTimeSource ()Lkotlin/time/TimeSource;
	public final fun getWindowDuration-UwyO8pc ()J
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class arrow/resilience/CircuitBreaker$OpeningStrategy$SlidingWindow$Companion {
	public final fun invoke-8Mi8wO0 (Lkotlin/time/TimeSource;JI)Larrow/resilience/CircuitBreaker$OpeningStrategy$SlidingWindow;
}

public abstract class arrow/resilience/CircuitBreaker$State {
	public abstract fun getOpeningStrategy ()Larrow/resilience/CircuitBreaker$OpeningStrategy;
}

public final class arrow/resilience/CircuitBreaker$State$Closed : arrow/resilience/CircuitBreaker$State {
	public fun <init> (Larrow/resilience/CircuitBreaker$OpeningStrategy;)V
	public fun getOpeningStrategy ()Larrow/resilience/CircuitBreaker$OpeningStrategy;
}

public final class arrow/resilience/CircuitBreaker$State$HalfOpen : arrow/resilience/CircuitBreaker$State {
	public fun <init> (Larrow/resilience/CircuitBreaker$OpeningStrategy;D)V
	public synthetic fun <init> (Larrow/resilience/CircuitBreaker$OpeningStrategy;JLkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun equals (Ljava/lang/Object;)Z
	public fun getOpeningStrategy ()Larrow/resilience/CircuitBreaker$OpeningStrategy;
	public final fun getResetTimeout-UwyO8pc ()J
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class arrow/resilience/CircuitBreaker$State$Open : arrow/resilience/CircuitBreaker$State {
	public fun equals (Ljava/lang/Object;)Z
	public final fun getExpiresAt ()Lkotlin/time/TimeMark;
	public fun getOpeningStrategy ()Larrow/resilience/CircuitBreaker$OpeningStrategy;
	public final fun getResetTimeout-UwyO8pc ()J
	public final fun getStartedAt ()Lkotlin/time/TimeMark;
	public fun hashCode ()I
	public fun toString ()Ljava/lang/String;
}

public final class arrow/resilience/FlowKt {
	public static final fun retry (Lkotlinx/coroutines/flow/Flow;Larrow/resilience/Schedule;)Lkotlinx/coroutines/flow/Flow;
}

public final class arrow/resilience/SagaActionStep {
	public static final field INSTANCE Larrow/resilience/SagaActionStep;
}

public final class arrow/resilience/SagaBuilder : arrow/resilience/SagaScope {
	public fun <init> ()V
	public fun <init> (Ljava/util/concurrent/atomic/AtomicReference;)V
	public synthetic fun <init> (Ljava/util/concurrent/atomic/AtomicReference;ILkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun bind (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun invoke (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun saga (Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun totalCompensation (Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface annotation class arrow/resilience/SagaDSLMarker : java/lang/annotation/Annotation {
}

public final class arrow/resilience/SagaKt {
	public static final fun saga (Lkotlin/jvm/functions/Function2;)Lkotlin/jvm/functions/Function2;
	public static final fun saga (Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function2;)Lkotlin/jvm/functions/Function2;
	public static final fun transact (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class arrow/resilience/SagaScope {
	public abstract fun bind (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun invoke (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun saga (Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class arrow/resilience/SagaScope$DefaultImpls {
	public static fun bind (Larrow/resilience/SagaScope;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun invoke (Larrow/resilience/SagaScope;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public abstract interface class arrow/resilience/Schedule {
	public static final field Companion Larrow/resilience/Schedule$Companion;
	public abstract fun and (Larrow/resilience/Schedule;)Larrow/resilience/Schedule;
	public abstract fun and (Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public abstract fun and (Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function3;Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public abstract fun andThen (Larrow/resilience/Schedule;)Larrow/resilience/Schedule;
	public abstract fun andThen (Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function2;)Larrow/resilience/Schedule;
	public abstract fun collect ()Larrow/resilience/Schedule;
	public abstract fun contramap (Lkotlin/jvm/functions/Function2;)Larrow/resilience/Schedule;
	public abstract fun delayed (Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public abstract fun doUntil (Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public abstract fun doWhile (Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public abstract fun fold (Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public abstract fun getStep ()Lkotlin/jvm/functions/Function2;
	public abstract fun invoke (Ljava/lang/Object;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun jittered (DDLkotlin/random/Random;)Larrow/resilience/Schedule;
	public abstract fun log (Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public abstract fun map (Lkotlin/jvm/functions/Function2;)Larrow/resilience/Schedule;
	public abstract fun mapDecision (Lkotlin/jvm/functions/Function2;)Larrow/resilience/Schedule;
	public abstract fun or (Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function3;Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public abstract fun repeat (Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun repeatOrElse (Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun repeatOrElseEither (Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun zipLeft (Larrow/resilience/Schedule;)Larrow/resilience/Schedule;
	public abstract fun zipRight (Larrow/resilience/Schedule;)Larrow/resilience/Schedule;
}

public final class arrow/resilience/Schedule$Companion {
	public final fun collect ()Larrow/resilience/Schedule;
	public final fun doUntil (Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public final fun doWhile (Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public final fun exponential-VtjQ1oo (JD)Larrow/resilience/Schedule;
	public static synthetic fun exponential-VtjQ1oo$default (Larrow/resilience/Schedule$Companion;JDILjava/lang/Object;)Larrow/resilience/Schedule;
	public final fun fibonacci-LRDsOJo (J)Larrow/resilience/Schedule;
	public final fun forever ()Larrow/resilience/Schedule;
	public final fun identity ()Larrow/resilience/Schedule;
	public final fun linear-LRDsOJo (J)Larrow/resilience/Schedule;
	public final fun recurs (J)Larrow/resilience/Schedule;
	public final fun spaced-LRDsOJo (J)Larrow/resilience/Schedule;
	public final fun unfold (Ljava/lang/Object;Lkotlin/jvm/functions/Function2;)Larrow/resilience/Schedule;
}

public abstract interface class arrow/resilience/Schedule$Decision {
	public abstract fun and (Larrow/resilience/Schedule$Decision;Lkotlin/jvm/functions/Function3;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun andThen (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun andThen (Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun contramap (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun delayed (Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun getOutput ()Ljava/lang/Object;
	public abstract fun map (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun or (Larrow/resilience/Schedule$Decision;Lkotlin/jvm/functions/Function3;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public abstract fun recursiveMap (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class arrow/resilience/Schedule$Decision$Continue : arrow/resilience/Schedule$Decision {
	public synthetic fun <init> (Ljava/lang/Object;JLkotlin/jvm/functions/Function2;Lkotlin/jvm/internal/DefaultConstructorMarker;)V
	public fun and (Larrow/resilience/Schedule$Decision;Lkotlin/jvm/functions/Function3;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun andThen (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun andThen (Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun component1 ()Ljava/lang/Object;
	public final fun component2-UwyO8pc ()J
	public final fun component3 ()Lkotlin/jvm/functions/Function2;
	public fun contramap (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun copy-8Mi8wO0 (Ljava/lang/Object;JLkotlin/jvm/functions/Function2;)Larrow/resilience/Schedule$Decision$Continue;
	public static synthetic fun copy-8Mi8wO0$default (Larrow/resilience/Schedule$Decision$Continue;Ljava/lang/Object;JLkotlin/jvm/functions/Function2;ILjava/lang/Object;)Larrow/resilience/Schedule$Decision$Continue;
	public fun delayed (Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun equals (Ljava/lang/Object;)Z
	public final fun getDelay-UwyO8pc ()J
	public fun getOutput ()Ljava/lang/Object;
	public final fun getStep ()Lkotlin/jvm/functions/Function2;
	public fun hashCode ()I
	public fun map (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun or (Larrow/resilience/Schedule$Decision;Lkotlin/jvm/functions/Function3;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun recursiveMap (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun toString ()Ljava/lang/String;
}

public final class arrow/resilience/Schedule$Decision$DefaultImpls {
	public static fun and (Larrow/resilience/Schedule$Decision;Larrow/resilience/Schedule$Decision;Lkotlin/jvm/functions/Function3;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun andThen (Larrow/resilience/Schedule$Decision;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun andThen (Larrow/resilience/Schedule$Decision;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun contramap (Larrow/resilience/Schedule$Decision;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun delayed (Larrow/resilience/Schedule$Decision;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun map (Larrow/resilience/Schedule$Decision;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun or (Larrow/resilience/Schedule$Decision;Larrow/resilience/Schedule$Decision;Lkotlin/jvm/functions/Function3;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun recursiveMap (Larrow/resilience/Schedule$Decision;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class arrow/resilience/Schedule$Decision$Done : arrow/resilience/Schedule$Decision {
	public fun <init> (Ljava/lang/Object;)V
	public fun and (Larrow/resilience/Schedule$Decision;Lkotlin/jvm/functions/Function3;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun andThen (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun andThen (Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun component1 ()Ljava/lang/Object;
	public fun contramap (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public final fun copy (Ljava/lang/Object;)Larrow/resilience/Schedule$Decision$Done;
	public static synthetic fun copy$default (Larrow/resilience/Schedule$Decision$Done;Ljava/lang/Object;ILjava/lang/Object;)Larrow/resilience/Schedule$Decision$Done;
	public fun delayed (Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun equals (Ljava/lang/Object;)Z
	public fun getOutput ()Ljava/lang/Object;
	public fun hashCode ()I
	public fun map (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun or (Larrow/resilience/Schedule$Decision;Lkotlin/jvm/functions/Function3;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun recursiveMap (Lkotlin/jvm/functions/Function2;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public fun toString ()Ljava/lang/String;
}

public final class arrow/resilience/Schedule$DefaultImpls {
	public static fun and (Larrow/resilience/Schedule;Larrow/resilience/Schedule;)Larrow/resilience/Schedule;
	public static fun and (Larrow/resilience/Schedule;Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public static fun and (Larrow/resilience/Schedule;Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function3;Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public static fun andThen (Larrow/resilience/Schedule;Larrow/resilience/Schedule;)Larrow/resilience/Schedule;
	public static fun andThen (Larrow/resilience/Schedule;Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function2;Lkotlin/jvm/functions/Function2;)Larrow/resilience/Schedule;
	public static fun collect (Larrow/resilience/Schedule;)Larrow/resilience/Schedule;
	public static fun contramap (Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function2;)Larrow/resilience/Schedule;
	public static fun delayed (Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public static fun doUntil (Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public static fun doWhile (Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public static fun fold (Larrow/resilience/Schedule;Ljava/lang/Object;Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public static fun getStep (Larrow/resilience/Schedule;)Lkotlin/jvm/functions/Function2;
	public static fun jittered (Larrow/resilience/Schedule;DDLkotlin/random/Random;)Larrow/resilience/Schedule;
	public static synthetic fun jittered$default (Larrow/resilience/Schedule;DDLkotlin/random/Random;ILjava/lang/Object;)Larrow/resilience/Schedule;
	public static fun log (Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public static fun map (Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function2;)Larrow/resilience/Schedule;
	public static fun mapDecision (Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function2;)Larrow/resilience/Schedule;
	public static fun or (Larrow/resilience/Schedule;Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function3;Lkotlin/jvm/functions/Function3;)Larrow/resilience/Schedule;
	public static fun repeat (Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun repeatOrElse (Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun repeatOrElseEither (Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static fun zipLeft (Larrow/resilience/Schedule;Larrow/resilience/Schedule;)Larrow/resilience/Schedule;
	public static fun zipRight (Larrow/resilience/Schedule;Larrow/resilience/Schedule;)Larrow/resilience/Schedule;
}

public final class arrow/resilience/ScheduleKt {
	public static final fun retry (Larrow/core/raise/Raise;Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun retry (Larrow/resilience/Schedule;Lkotlin/reflect/KClass;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun retryEither (Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function0;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun retryOrElse (Larrow/resilience/Schedule;Lkotlin/reflect/KClass;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun retryOrElseEither (Larrow/resilience/Schedule;Lkotlin/reflect/KClass;Lkotlin/jvm/functions/Function1;Lkotlin/jvm/functions/Function3;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
	public static final fun retryRaise (Larrow/resilience/Schedule;Lkotlin/jvm/functions/Function1;Lkotlin/coroutines/Continuation;)Ljava/lang/Object;
}

public final class arrow/resilience/common/Platform : java/lang/Enum {
	public static final field JS Larrow/resilience/common/Platform;
	public static final field JVM Larrow/resilience/common/Platform;
	public static final field Native Larrow/resilience/common/Platform;
	public static final field Wasm Larrow/resilience/common/Platform;
	public static fun getEntries ()Lkotlin/enums/EnumEntries;
	public static fun valueOf (Ljava/lang/String;)Larrow/resilience/common/Platform;
	public static fun values ()[Larrow/resilience/common/Platform;
}

public final class arrow/resilience/common/PlatformKt {
	public static final fun getPlatform ()Larrow/resilience/common/Platform;
}

