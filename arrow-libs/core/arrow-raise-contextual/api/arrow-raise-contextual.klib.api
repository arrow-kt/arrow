// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.arrow-kt:arrow-raise-contextual>
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (context(arrow.core.raise/Raise<#A>), kotlin.collections/Map<#B, arrow.core/Either<#A, #C>>).arrow.core.raise/bindAll(): kotlin.collections/Map<#B, #C> // arrow.core.raise/bindAll|bindAll(arrow.core.raise.Raise<0:0>)@kotlin.collections.Map<0:1,arrow.core.Either<0:0,0:2>>(){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (context(arrow.core.raise/ResultRaise), kotlin.collections/Map<#B, kotlin/Result<#C>>).arrow.core.raise/bindAll(): kotlin.collections/Map<#B, #C> // arrow.core.raise/bindAll|bindAll(arrow.core.raise.ResultRaise)@kotlin.collections.Map<0:1,kotlin.Result<0:2>>(){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (context(arrow.core.raise/SingletonRaise<#A>), kotlin.collections/Map<#B, #C?>).arrow.core.raise/bindAll(): kotlin.collections/Map<#B, #C> // arrow.core.raise/bindAll|bindAll(arrow.core.raise.SingletonRaise<0:0>)@kotlin.collections.Map<0:1,0:2?>(){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (context(arrow.core.raise/SingletonRaise<#A>), kotlin.collections/Map<#B, arrow.core/Option<#C>>).arrow.core.raise/bindAll(): kotlin.collections/Map<#B, #C> // arrow.core.raise/bindAll|bindAll(arrow.core.raise.SingletonRaise<0:0>)@kotlin.collections.Map<0:1,arrow.core.Option<0:2>>(){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/Raise<#A>), arrow.core/Either<#A, #B>).arrow.core.raise/bind(): #B // arrow.core.raise/bind|bind(arrow.core.raise.Raise<0:0>)@arrow.core.Either<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/Raise<#A>), arrow.core/NonEmptyList<arrow.core/Either<#A, #B>>).arrow.core.raise/bindAll(): arrow.core/NonEmptyList<#B> // arrow.core.raise/bindAll|bindAll(arrow.core.raise.Raise<0:0>)@arrow.core.NonEmptyList<arrow.core.Either<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/Raise<#A>), arrow.core/NonEmptySet<arrow.core/Either<#A, #B>>).arrow.core.raise/bindAll(): arrow.core/NonEmptySet<#B> // arrow.core.raise/bindAll|bindAll(arrow.core.raise.Raise<0:0>)@arrow.core.NonEmptySet<arrow.core.Either<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/Raise<#A>), kotlin.collections/Iterable<arrow.core/Either<#A, #B>>).arrow.core.raise/bindAll(): kotlin.collections/List<#B> // arrow.core.raise/bindAll|bindAll(arrow.core.raise.Raise<0:0>)@kotlin.collections.Iterable<arrow.core.Either<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/ResultRaise), arrow.core/NonEmptyList<kotlin/Result<#B>>).arrow.core.raise/bindAll(): arrow.core/NonEmptyList<#B> // arrow.core.raise/bindAll|bindAll(arrow.core.raise.ResultRaise)@arrow.core.NonEmptyList<kotlin.Result<0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/ResultRaise), arrow.core/NonEmptySet<kotlin/Result<#B>>).arrow.core.raise/bindAll(): arrow.core/NonEmptySet<#B> // arrow.core.raise/bindAll|bindAll(arrow.core.raise.ResultRaise)@arrow.core.NonEmptySet<kotlin.Result<0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/ResultRaise), kotlin.collections/Iterable<kotlin/Result<#B>>).arrow.core.raise/bindAll(): kotlin.collections/List<#B> // arrow.core.raise/bindAll|bindAll(arrow.core.raise.ResultRaise)@kotlin.collections.Iterable<kotlin.Result<0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/ResultRaise), kotlin/Result<#B>).arrow.core.raise/bind(): #B // arrow.core.raise/bind|bind(arrow.core.raise.ResultRaise)@kotlin.Result<0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/SingletonRaise<#A>), #B?).arrow.core.raise/bind(): #B // arrow.core.raise/bind|bind(arrow.core.raise.SingletonRaise<0:0>)@0:1?(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/SingletonRaise<#A>), arrow.core/NonEmptyList<#B?>).arrow.core.raise/bindAll(): arrow.core/NonEmptyList<#B> // arrow.core.raise/bindAll|bindAll(arrow.core.raise.SingletonRaise<0:0>)@arrow.core.NonEmptyList<0:1?>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/SingletonRaise<#A>), arrow.core/NonEmptyList<arrow.core/Option<#B>>).arrow.core.raise/bindAll(): arrow.core/NonEmptyList<#B> // arrow.core.raise/bindAll|bindAll(arrow.core.raise.SingletonRaise<0:0>)@arrow.core.NonEmptyList<arrow.core.Option<0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/SingletonRaise<#A>), arrow.core/NonEmptySet<#B?>).arrow.core.raise/bindAll(): arrow.core/NonEmptySet<#B> // arrow.core.raise/bindAll|bindAll(arrow.core.raise.SingletonRaise<0:0>)@arrow.core.NonEmptySet<0:1?>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/SingletonRaise<#A>), arrow.core/NonEmptySet<arrow.core/Option<#B>>).arrow.core.raise/bindAll(): arrow.core/NonEmptySet<#B> // arrow.core.raise/bindAll|bindAll(arrow.core.raise.SingletonRaise<0:0>)@arrow.core.NonEmptySet<arrow.core.Option<0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/SingletonRaise<#A>), arrow.core/Option<#B>).arrow.core.raise/bind(): #B // arrow.core.raise/bind|bind(arrow.core.raise.SingletonRaise<0:0>)@arrow.core.Option<0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/SingletonRaise<#A>), kotlin.collections/Iterable<#B?>).arrow.core.raise/bindAll(): kotlin.collections/List<#B> // arrow.core.raise/bindAll|bindAll(arrow.core.raise.SingletonRaise<0:0>)@kotlin.collections.Iterable<0:1?>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/SingletonRaise<#A>), kotlin.collections/Iterable<arrow.core/Option<#B>>).arrow.core.raise/bindAll(): kotlin.collections/List<#B> // arrow.core.raise/bindAll|bindAll(arrow.core.raise.SingletonRaise<0:0>)@kotlin.collections.Iterable<arrow.core.Option<0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (context(arrow.core.raise/Raise<#A>)).arrow.core.raise/raise(#A): kotlin/Nothing // arrow.core.raise/raise|raise(arrow.core.raise.Raise<0:0>)(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any> (context(arrow.core.raise/Raise<#A>)).arrow.core.raise/ensureNotNull(#B?, kotlin/Function0<#A>): #B // arrow.core.raise/ensureNotNull|ensureNotNull(arrow.core.raise.Raise<0:0>)(0:1?;kotlin.Function0<0:0>){0§<kotlin.Any?>;1§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?> (context(arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>)).arrow.core.raise/zipOrAccumulate(kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #D>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #E>, kotlin/Function4<#B, #C, #D, #E, #F>): #F // arrow.core.raise/zipOrAccumulate|zipOrAccumulate(arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>)(kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:3>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:4>;kotlin.Function4<0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?> (context(arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>)).arrow.core.raise/zipOrAccumulate(kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #D>, kotlin/Function3<#B, #C, #D, #E>): #E // arrow.core.raise/zipOrAccumulate|zipOrAccumulate(arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>)(kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:3>;kotlin.Function3<0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (context(arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>)).arrow.core.raise/zipOrAccumulate(kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function2<#B, #C, #D>): #D // arrow.core.raise/zipOrAccumulate|zipOrAccumulate(arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>)(kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function2<0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (context(arrow.core.raise/Raise<arrow.core/NonEmptyList<#B>>), kotlin.collections/Map<#A, #C>).arrow.core.raise/mapValuesOrAccumulate(kotlin/Function2<arrow.core.raise/RaiseAccumulate<#B>, kotlin.collections/Map.Entry<#A, #C>, #D>): kotlin.collections/Map<#A, #D> // arrow.core.raise/mapValuesOrAccumulate|mapValuesOrAccumulate(arrow.core.raise.Raise<arrow.core.NonEmptyList<0:1>>)@kotlin.collections.Map<0:0,0:2>(kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:1>,kotlin.collections.Map.Entry<0:0,0:2>,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (context(arrow.core.raise/Raise<#A>)).arrow.core.raise/withError(kotlin/Function1<#B, #A>, kotlin/Function1<arrow.core.raise/Raise<#B>, #C>): #C // arrow.core.raise/withError|withError(arrow.core.raise.Raise<0:0>)(kotlin.Function1<0:1,0:0>;kotlin.Function1<arrow.core.raise.Raise<0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (context(arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>), arrow.core/NonEmptyList<#B>).arrow.core.raise/mapOrAccumulate(kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, #C>): arrow.core/NonEmptyList<#C> // arrow.core.raise/mapOrAccumulate|mapOrAccumulate(arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>)@arrow.core.NonEmptyList<0:1>(kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (context(arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>), kotlin.collections/Iterable<#B>).arrow.core.raise/mapOrAccumulate(kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, #C>): kotlin.collections/List<#C> // arrow.core.raise/mapOrAccumulate|mapOrAccumulate(arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>)@kotlin.collections.Iterable<0:1>(kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (context(arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>), kotlin.sequences/Sequence<#B>).arrow.core.raise/mapOrAccumulate(kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, #C>): kotlin.collections/List<#C> // arrow.core.raise/mapOrAccumulate|mapOrAccumulate(arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>)@kotlin.sequences.Sequence<0:1>(kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>)).arrow.core.raise/accumulate(kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>): #B // arrow.core.raise/accumulate|accumulate(arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>)(kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (context(arrow.core.raise/Raise<#A>)).arrow.core.raise/ensure(kotlin/Boolean, kotlin/Function0<#A>) // arrow.core.raise/ensure|ensure(arrow.core.raise.Raise<0:0>)(kotlin.Boolean;kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (context(arrow.core.raise/Raise<#A>), kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/bind(): #B // arrow.core.raise/bind|bind(arrow.core.raise.Raise<0:0>)@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<0:0>,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
