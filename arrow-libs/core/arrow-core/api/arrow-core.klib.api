// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, wasmJs, watchosArm32, watchosArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.arrow-kt:arrow-core>
abstract interface <#A: in kotlin/Any?> arrow.core.raise/Raise { // arrow.core.raise/Raise|null[0]
    abstract fun raise(#A): kotlin/Nothing // arrow.core.raise/Raise.raise|raise(1:0){}[0]
    open fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (kotlin.collections/Map<#A1, arrow.core/Either<#A, #B1>>).bindAll(): kotlin.collections/Map<#A1, #B1> // arrow.core.raise/Raise.bindAll|bindAll@kotlin.collections.Map<0:0,arrow.core.Either<1:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    open fun <#A1: kotlin/Any?> (arrow.core/Either<#A, #A1>).bind(): #A1 // arrow.core.raise/Raise.bind|bind@arrow.core.Either<1:0,0:0>(){0§<kotlin.Any?>}[0]
    open fun <#A1: kotlin/Any?> (arrow.core/NonEmptyList<arrow.core/Either<#A, #A1>>).bindAll(): arrow.core/NonEmptyList<#A1> // arrow.core.raise/Raise.bindAll|bindAll@arrow.core.NonEmptyList<arrow.core.Either<1:0,0:0>>(){0§<kotlin.Any?>}[0]
    open fun <#A1: kotlin/Any?> (arrow.core/NonEmptySet<arrow.core/Either<#A, #A1>>).bindAll(): arrow.core/NonEmptySet<#A1> // arrow.core.raise/Raise.bindAll|bindAll@arrow.core.NonEmptySet<arrow.core.Either<1:0,0:0>>(){0§<kotlin.Any?>}[0]
    open fun <#A1: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Either<#A, #A1>>).bindAll(): kotlin.collections/List<#A1> // arrow.core.raise/Raise.bindAll|bindAll@kotlin.collections.Iterable<arrow.core.Either<1:0,0:0>>(){0§<kotlin.Any?>}[0]
    open fun <#A1: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<#A>, #A1>).bind(): #A1 // arrow.core.raise/Raise.bind|bind@kotlin.Function1<arrow.core.raise.Raise<1:0>,0:0>(){0§<kotlin.Any?>}[0]
    open fun <#A1: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<#A>, #A1>).invoke(): #A1 // arrow.core.raise/Raise.invoke|invoke@kotlin.Function1<arrow.core.raise.Raise<1:0>,0:0>(){0§<kotlin.Any?>}[0]
    open suspend fun <#A1: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #A1>).bind(): #A1 // arrow.core.raise/Raise.bind|bind@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<1:0>,0:0>(){0§<kotlin.Any?>}[0]
    open suspend fun <#A1: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #A1>).invoke(): #A1 // arrow.core.raise/Raise.invoke|invoke@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<1:0>,0:0>(){0§<kotlin.Any?>}[0]
}
abstract interface <#A: kotlin/Any?, #B: kotlin/Any?> arrow.core/MemoizationCache { // arrow.core/MemoizationCache|null[0]
    abstract fun get(#A): #B? // arrow.core/MemoizationCache.get|get(1:0){}[0]
    abstract fun set(#A, #B): #B // arrow.core/MemoizationCache.set|set(1:0;1:1){}[0]
}
abstract interface <#A: out kotlin/Any?> arrow.core/NonEmptyCollection : kotlin.collections/Collection<#A> { // arrow.core/NonEmptyCollection|null[0]
    abstract fun lastOrNull(): #A // arrow.core/NonEmptyCollection.lastOrNull|lastOrNull(){}[0]
    abstract fun plus(#A): arrow.core/NonEmptyCollection<#A> // arrow.core/NonEmptyCollection.plus|plus(1:0){}[0]
    abstract fun plus(kotlin.collections/Iterable<#A>): arrow.core/NonEmptyCollection<#A> // arrow.core/NonEmptyCollection.plus|plus(kotlin.collections.Iterable<1:0>){}[0]
    abstract val head // arrow.core/NonEmptyCollection.head|{}head[0]
        abstract fun <get-head>(): #A // arrow.core/NonEmptyCollection.head.<get-head>|<get-head>(){}[0]
    open fun <#A1: kotlin/Any?> distinctBy(kotlin/Function1<#A, #A1>): arrow.core/NonEmptyList<#A> // arrow.core/NonEmptyCollection.distinctBy|distinctBy(kotlin.Function1<1:0,0:0>){0§<kotlin.Any?>}[0]
    open fun <#A1: kotlin/Any?> flatMap(kotlin/Function1<#A, arrow.core/NonEmptyCollection<#A1>>): arrow.core/NonEmptyList<#A1> // arrow.core/NonEmptyCollection.flatMap|flatMap(kotlin.Function1<1:0,arrow.core.NonEmptyCollection<0:0>>){0§<kotlin.Any?>}[0]
    open fun <#A1: kotlin/Any?> map(kotlin/Function1<#A, #A1>): arrow.core/NonEmptyList<#A1> // arrow.core/NonEmptyCollection.map|map(kotlin.Function1<1:0,0:0>){0§<kotlin.Any?>}[0]
    open fun <#A1: kotlin/Any?> mapIndexed(kotlin/Function2<kotlin/Int, #A, #A1>): arrow.core/NonEmptyList<#A1> // arrow.core/NonEmptyCollection.mapIndexed|mapIndexed(kotlin.Function2<kotlin.Int,1:0,0:0>){0§<kotlin.Any?>}[0]
    open fun <#A1: kotlin/Any?> zip(arrow.core/NonEmptyCollection<#A1>): arrow.core/NonEmptyCollection<kotlin/Pair<#A, #A1>> // arrow.core/NonEmptyCollection.zip|zip(arrow.core.NonEmptyCollection<0:0>){0§<kotlin.Any?>}[0]
    open fun distinct(): arrow.core/NonEmptyList<#A> // arrow.core/NonEmptyCollection.distinct|distinct(){}[0]
    open fun firstOrNull(): #A // arrow.core/NonEmptyCollection.firstOrNull|firstOrNull(){}[0]
    open fun isEmpty(): kotlin/Boolean // arrow.core/NonEmptyCollection.isEmpty|isEmpty(){}[0]
    open fun toNonEmptyList(): arrow.core/NonEmptyList<#A> // arrow.core/NonEmptyCollection.toNonEmptyList|toNonEmptyList(){}[0]
    open fun toNonEmptySet(): arrow.core/NonEmptySet<#A> // arrow.core/NonEmptyCollection.toNonEmptySet|toNonEmptySet(){}[0]
}
final class <#A: in kotlin/Any?> arrow.core.raise/SingletonRaise : arrow.core.raise/Raise<#A> { // arrow.core.raise/SingletonRaise|null[0]
    constructor <init>(arrow.core.raise/Raise<kotlin/Unit>) // arrow.core.raise/SingletonRaise.<init>|<init>(arrow.core.raise.Raise<kotlin.Unit>){}[0]
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (kotlin.collections/Map<#A1, #B1?>).bindAll(): kotlin.collections/Map<#A1, #B1> // arrow.core.raise/SingletonRaise.bindAll|bindAll@kotlin.collections.Map<0:0,0:1?>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (kotlin.collections/Map<#A1, arrow.core/Option<#B1>>).bindAll(): kotlin.collections/Map<#A1, #B1> // arrow.core.raise/SingletonRaise.bindAll|bindAll@kotlin.collections.Map<0:0,arrow.core.Option<0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (#A1?).bind(): #A1 // arrow.core.raise/SingletonRaise.bind|bind@0:0?(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptyList<#A1?>).bindAll(): arrow.core/NonEmptyList<#A1> // arrow.core.raise/SingletonRaise.bindAll|bindAll@arrow.core.NonEmptyList<0:0?>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptyList<arrow.core/Option<#A1>>).bindAll(): arrow.core/NonEmptyList<#A1> // arrow.core.raise/SingletonRaise.bindAll|bindAll@arrow.core.NonEmptyList<arrow.core.Option<0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptySet<#A1?>).bindAll(): arrow.core/NonEmptySet<#A1> // arrow.core.raise/SingletonRaise.bindAll|bindAll@arrow.core.NonEmptySet<0:0?>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptySet<arrow.core/Option<#A1>>).bindAll(): arrow.core/NonEmptySet<#A1> // arrow.core.raise/SingletonRaise.bindAll|bindAll@arrow.core.NonEmptySet<arrow.core.Option<0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/Option<#A1>).bind(): #A1 // arrow.core.raise/SingletonRaise.bind|bind@arrow.core.Option<0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin.collections/Iterable<#A1?>).bindAll(): kotlin.collections/List<#A1> // arrow.core.raise/SingletonRaise.bindAll|bindAll@kotlin.collections.Iterable<0:0?>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Option<#A1>>).bindAll(): kotlin.collections/List<#A1> // arrow.core.raise/SingletonRaise.bindAll|bindAll@kotlin.collections.Iterable<arrow.core.Option<0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> ensureNotNull(#A1?): #A1 // arrow.core.raise/SingletonRaise.ensureNotNull|ensureNotNull(0:0?){0§<kotlin.Any?>}[0]
    final fun ensure(kotlin/Boolean) // arrow.core.raise/SingletonRaise.ensure|ensure(kotlin.Boolean){}[0]
    final fun raise(#A): kotlin/Nothing // arrow.core.raise/SingletonRaise.raise|raise(1:0){}[0]
    final fun raise(): kotlin/Nothing // arrow.core.raise/SingletonRaise.raise|raise(){}[0]
    final inline fun <#A1: kotlin/Any?> ignoreErrors(kotlin/Function1<arrow.core.raise/SingletonRaise<kotlin/Any?>, #A1>): #A1 // arrow.core.raise/SingletonRaise.ignoreErrors|ignoreErrors(kotlin.Function1<arrow.core.raise.SingletonRaise<kotlin.Any?>,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> recover(kotlin/Function1<arrow.core.raise/SingletonRaise<#A>, #A1>, kotlin/Function0<#A1>): #A1 // arrow.core.raise/SingletonRaise.recover|recover(kotlin.Function1<arrow.core.raise.SingletonRaise<1:0>,0:0>;kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
}
final class <#A: kotlin/Any?> arrow.core.raise/IorRaise : arrow.core.raise/Raise<#A> { // arrow.core.raise/IorRaise|null[0]
    constructor <init>(kotlin/Function2<#A, #A, #A>, arrow.atomic/Atomic<kotlin/Any?>, arrow.core.raise/Raise<#A>) // arrow.core.raise/IorRaise.<init>|<init>(kotlin.Function2<1:0,1:0,1:0>;arrow.atomic.Atomic<kotlin.Any?>;arrow.core.raise.Raise<1:0>){}[0]
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (kotlin.collections/Map<#A1, arrow.core/Either<#A, #B1>>).bindAll(): kotlin.collections/Map<#A1, #B1> // arrow.core.raise/IorRaise.bindAll|bindAll@kotlin.collections.Map<0:0,arrow.core.Either<1:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (kotlin.collections/Map<#A1, arrow.core/Ior<#A, #B1>>).bindAll(): kotlin.collections/Map<#A1, #B1> // arrow.core.raise/IorRaise.bindAll|bindAll@kotlin.collections.Map<0:0,arrow.core.Ior<1:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/Either<#A, #A1>).bind(): #A1 // arrow.core.raise/IorRaise.bind|bind@arrow.core.Either<1:0,0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/Either<#A, #A1>).getOrAccumulate(kotlin/Function1<#A, #A1>): #A1 // arrow.core.raise/IorRaise.getOrAccumulate|getOrAccumulate@arrow.core.Either<1:0,0:0>(kotlin.Function1<1:0,0:0>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/Ior<#A, #A1>).bind(): #A1 // arrow.core.raise/IorRaise.bind|bind@arrow.core.Ior<1:0,0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptyList<arrow.core/Either<#A, #A1>>).bindAll(): arrow.core/NonEmptyList<#A1> // arrow.core.raise/IorRaise.bindAll|bindAll@arrow.core.NonEmptyList<arrow.core.Either<1:0,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptyList<arrow.core/Ior<#A, #A1>>).bindAll(): arrow.core/NonEmptyList<#A1> // arrow.core.raise/IorRaise.bindAll|bindAll@arrow.core.NonEmptyList<arrow.core.Ior<1:0,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptySet<arrow.core/Either<#A, #A1>>).bindAll(): arrow.core/NonEmptySet<#A1> // arrow.core.raise/IorRaise.bindAll|bindAll@arrow.core.NonEmptySet<arrow.core.Either<1:0,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptySet<arrow.core/Ior<#A, #A1>>).bindAll(): arrow.core/NonEmptySet<#A1> // arrow.core.raise/IorRaise.bindAll|bindAll@arrow.core.NonEmptySet<arrow.core.Ior<1:0,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Either<#A, #A1>>).bindAll(): kotlin.collections/List<#A1> // arrow.core.raise/IorRaise.bindAll|bindAll@kotlin.collections.Iterable<arrow.core.Either<1:0,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Ior<#A, #A1>>).bindAll(): kotlin.collections/List<#A1> // arrow.core.raise/IorRaise.bindAll|bindAll@kotlin.collections.Iterable<arrow.core.Ior<1:0,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<#A>, #A1>).bind(): #A1 // arrow.core.raise/IorRaise.bind|bind@kotlin.Function1<arrow.core.raise.Raise<1:0>,0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<#A>, #A1>).invoke(): #A1 // arrow.core.raise/IorRaise.invoke|invoke@kotlin.Function1<arrow.core.raise.Raise<1:0>,0:0>(){0§<kotlin.Any?>}[0]
    final fun accumulate(#A) // arrow.core.raise/IorRaise.accumulate|accumulate(1:0){}[0]
    final fun combine(#A): #A // arrow.core.raise/IorRaise.combine|combine(1:0){}[0]
    final fun raise(#A): kotlin/Nothing // arrow.core.raise/IorRaise.raise|raise(1:0){}[0]
    final inline fun <#A1: kotlin/Any?> recover(kotlin/Function1<arrow.core.raise/IorRaise<#A>, #A1>, kotlin/Function1<#A, #A1>): #A1 // arrow.core.raise/IorRaise.recover|recover(kotlin.Function1<arrow.core.raise.IorRaise<1:0>,0:0>;kotlin.Function1<1:0,0:0>){0§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #A1>).bind(): #A1 // arrow.core.raise/IorRaise.bind|bind@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<1:0>,0:0>(){0§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #A1>).invoke(): #A1 // arrow.core.raise/IorRaise.invoke|invoke@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<1:0>,0:0>(){0§<kotlin.Any?>}[0]
    final val combineError // arrow.core.raise/IorRaise.combineError|{}combineError[0]
        final fun <get-combineError>(): kotlin/Function2<#A, #A, #A> // arrow.core.raise/IorRaise.combineError.<get-combineError>|<get-combineError>(){}[0]
}
final class <#A: out kotlin/Any?, #B: out kotlin/Any?, #C: out kotlin/Any?, #D: out kotlin/Any?, #E: out kotlin/Any?, #F: out kotlin/Any?, #G: out kotlin/Any?, #H: out kotlin/Any?, #I: out kotlin/Any?> arrow.core/Tuple9 { // arrow.core/Tuple9|null[0]
    constructor <init>(#A, #B, #C, #D, #E, #F, #G, #H, #I) // arrow.core/Tuple9.<init>|<init>(1:0;1:1;1:2;1:3;1:4;1:5;1:6;1:7;1:8){}[0]
    final fun component1(): #A // arrow.core/Tuple9.component1|component1(){}[0]
    final fun component2(): #B // arrow.core/Tuple9.component2|component2(){}[0]
    final fun component3(): #C // arrow.core/Tuple9.component3|component3(){}[0]
    final fun component4(): #D // arrow.core/Tuple9.component4|component4(){}[0]
    final fun component5(): #E // arrow.core/Tuple9.component5|component5(){}[0]
    final fun component6(): #F // arrow.core/Tuple9.component6|component6(){}[0]
    final fun component7(): #G // arrow.core/Tuple9.component7|component7(){}[0]
    final fun component8(): #H // arrow.core/Tuple9.component8|component8(){}[0]
    final fun component9(): #I // arrow.core/Tuple9.component9|component9(){}[0]
    final fun copy(#A = ..., #B = ..., #C = ..., #D = ..., #E = ..., #F = ..., #G = ..., #H = ..., #I = ...): arrow.core/Tuple9<#A, #B, #C, #D, #E, #F, #G, #H, #I> // arrow.core/Tuple9.copy|copy(1:0;1:1;1:2;1:3;1:4;1:5;1:6;1:7;1:8){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.core/Tuple9.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.core/Tuple9.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.core/Tuple9.toString|toString(){}[0]
    final object Companion // arrow.core/Tuple9.Companion|null[0]
    final val eighth // arrow.core/Tuple9.eighth|{}eighth[0]
        final fun <get-eighth>(): #H // arrow.core/Tuple9.eighth.<get-eighth>|<get-eighth>(){}[0]
    final val fifth // arrow.core/Tuple9.fifth|{}fifth[0]
        final fun <get-fifth>(): #E // arrow.core/Tuple9.fifth.<get-fifth>|<get-fifth>(){}[0]
    final val first // arrow.core/Tuple9.first|{}first[0]
        final fun <get-first>(): #A // arrow.core/Tuple9.first.<get-first>|<get-first>(){}[0]
    final val fourth // arrow.core/Tuple9.fourth|{}fourth[0]
        final fun <get-fourth>(): #D // arrow.core/Tuple9.fourth.<get-fourth>|<get-fourth>(){}[0]
    final val ninth // arrow.core/Tuple9.ninth|{}ninth[0]
        final fun <get-ninth>(): #I // arrow.core/Tuple9.ninth.<get-ninth>|<get-ninth>(){}[0]
    final val second // arrow.core/Tuple9.second|{}second[0]
        final fun <get-second>(): #B // arrow.core/Tuple9.second.<get-second>|<get-second>(){}[0]
    final val seventh // arrow.core/Tuple9.seventh|{}seventh[0]
        final fun <get-seventh>(): #G // arrow.core/Tuple9.seventh.<get-seventh>|<get-seventh>(){}[0]
    final val sixth // arrow.core/Tuple9.sixth|{}sixth[0]
        final fun <get-sixth>(): #F // arrow.core/Tuple9.sixth.<get-sixth>|<get-sixth>(){}[0]
    final val third // arrow.core/Tuple9.third|{}third[0]
        final fun <get-third>(): #C // arrow.core/Tuple9.third.<get-third>|<get-third>(){}[0]
}
final class <#A: out kotlin/Any?, #B: out kotlin/Any?, #C: out kotlin/Any?, #D: out kotlin/Any?, #E: out kotlin/Any?, #F: out kotlin/Any?, #G: out kotlin/Any?, #H: out kotlin/Any?> arrow.core/Tuple8 { // arrow.core/Tuple8|null[0]
    constructor <init>(#A, #B, #C, #D, #E, #F, #G, #H) // arrow.core/Tuple8.<init>|<init>(1:0;1:1;1:2;1:3;1:4;1:5;1:6;1:7){}[0]
    final fun component1(): #A // arrow.core/Tuple8.component1|component1(){}[0]
    final fun component2(): #B // arrow.core/Tuple8.component2|component2(){}[0]
    final fun component3(): #C // arrow.core/Tuple8.component3|component3(){}[0]
    final fun component4(): #D // arrow.core/Tuple8.component4|component4(){}[0]
    final fun component5(): #E // arrow.core/Tuple8.component5|component5(){}[0]
    final fun component6(): #F // arrow.core/Tuple8.component6|component6(){}[0]
    final fun component7(): #G // arrow.core/Tuple8.component7|component7(){}[0]
    final fun component8(): #H // arrow.core/Tuple8.component8|component8(){}[0]
    final fun copy(#A = ..., #B = ..., #C = ..., #D = ..., #E = ..., #F = ..., #G = ..., #H = ...): arrow.core/Tuple8<#A, #B, #C, #D, #E, #F, #G, #H> // arrow.core/Tuple8.copy|copy(1:0;1:1;1:2;1:3;1:4;1:5;1:6;1:7){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.core/Tuple8.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.core/Tuple8.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.core/Tuple8.toString|toString(){}[0]
    final object Companion // arrow.core/Tuple8.Companion|null[0]
    final val eighth // arrow.core/Tuple8.eighth|{}eighth[0]
        final fun <get-eighth>(): #H // arrow.core/Tuple8.eighth.<get-eighth>|<get-eighth>(){}[0]
    final val fifth // arrow.core/Tuple8.fifth|{}fifth[0]
        final fun <get-fifth>(): #E // arrow.core/Tuple8.fifth.<get-fifth>|<get-fifth>(){}[0]
    final val first // arrow.core/Tuple8.first|{}first[0]
        final fun <get-first>(): #A // arrow.core/Tuple8.first.<get-first>|<get-first>(){}[0]
    final val fourth // arrow.core/Tuple8.fourth|{}fourth[0]
        final fun <get-fourth>(): #D // arrow.core/Tuple8.fourth.<get-fourth>|<get-fourth>(){}[0]
    final val second // arrow.core/Tuple8.second|{}second[0]
        final fun <get-second>(): #B // arrow.core/Tuple8.second.<get-second>|<get-second>(){}[0]
    final val seventh // arrow.core/Tuple8.seventh|{}seventh[0]
        final fun <get-seventh>(): #G // arrow.core/Tuple8.seventh.<get-seventh>|<get-seventh>(){}[0]
    final val sixth // arrow.core/Tuple8.sixth|{}sixth[0]
        final fun <get-sixth>(): #F // arrow.core/Tuple8.sixth.<get-sixth>|<get-sixth>(){}[0]
    final val third // arrow.core/Tuple8.third|{}third[0]
        final fun <get-third>(): #C // arrow.core/Tuple8.third.<get-third>|<get-third>(){}[0]
}
final class <#A: out kotlin/Any?, #B: out kotlin/Any?, #C: out kotlin/Any?, #D: out kotlin/Any?, #E: out kotlin/Any?, #F: out kotlin/Any?, #G: out kotlin/Any?> arrow.core/Tuple7 { // arrow.core/Tuple7|null[0]
    constructor <init>(#A, #B, #C, #D, #E, #F, #G) // arrow.core/Tuple7.<init>|<init>(1:0;1:1;1:2;1:3;1:4;1:5;1:6){}[0]
    final fun component1(): #A // arrow.core/Tuple7.component1|component1(){}[0]
    final fun component2(): #B // arrow.core/Tuple7.component2|component2(){}[0]
    final fun component3(): #C // arrow.core/Tuple7.component3|component3(){}[0]
    final fun component4(): #D // arrow.core/Tuple7.component4|component4(){}[0]
    final fun component5(): #E // arrow.core/Tuple7.component5|component5(){}[0]
    final fun component6(): #F // arrow.core/Tuple7.component6|component6(){}[0]
    final fun component7(): #G // arrow.core/Tuple7.component7|component7(){}[0]
    final fun copy(#A = ..., #B = ..., #C = ..., #D = ..., #E = ..., #F = ..., #G = ...): arrow.core/Tuple7<#A, #B, #C, #D, #E, #F, #G> // arrow.core/Tuple7.copy|copy(1:0;1:1;1:2;1:3;1:4;1:5;1:6){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.core/Tuple7.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.core/Tuple7.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.core/Tuple7.toString|toString(){}[0]
    final object Companion // arrow.core/Tuple7.Companion|null[0]
    final val fifth // arrow.core/Tuple7.fifth|{}fifth[0]
        final fun <get-fifth>(): #E // arrow.core/Tuple7.fifth.<get-fifth>|<get-fifth>(){}[0]
    final val first // arrow.core/Tuple7.first|{}first[0]
        final fun <get-first>(): #A // arrow.core/Tuple7.first.<get-first>|<get-first>(){}[0]
    final val fourth // arrow.core/Tuple7.fourth|{}fourth[0]
        final fun <get-fourth>(): #D // arrow.core/Tuple7.fourth.<get-fourth>|<get-fourth>(){}[0]
    final val second // arrow.core/Tuple7.second|{}second[0]
        final fun <get-second>(): #B // arrow.core/Tuple7.second.<get-second>|<get-second>(){}[0]
    final val seventh // arrow.core/Tuple7.seventh|{}seventh[0]
        final fun <get-seventh>(): #G // arrow.core/Tuple7.seventh.<get-seventh>|<get-seventh>(){}[0]
    final val sixth // arrow.core/Tuple7.sixth|{}sixth[0]
        final fun <get-sixth>(): #F // arrow.core/Tuple7.sixth.<get-sixth>|<get-sixth>(){}[0]
    final val third // arrow.core/Tuple7.third|{}third[0]
        final fun <get-third>(): #C // arrow.core/Tuple7.third.<get-third>|<get-third>(){}[0]
}
final class <#A: out kotlin/Any?, #B: out kotlin/Any?, #C: out kotlin/Any?, #D: out kotlin/Any?, #E: out kotlin/Any?, #F: out kotlin/Any?> arrow.core/Tuple6 { // arrow.core/Tuple6|null[0]
    constructor <init>(#A, #B, #C, #D, #E, #F) // arrow.core/Tuple6.<init>|<init>(1:0;1:1;1:2;1:3;1:4;1:5){}[0]
    final fun component1(): #A // arrow.core/Tuple6.component1|component1(){}[0]
    final fun component2(): #B // arrow.core/Tuple6.component2|component2(){}[0]
    final fun component3(): #C // arrow.core/Tuple6.component3|component3(){}[0]
    final fun component4(): #D // arrow.core/Tuple6.component4|component4(){}[0]
    final fun component5(): #E // arrow.core/Tuple6.component5|component5(){}[0]
    final fun component6(): #F // arrow.core/Tuple6.component6|component6(){}[0]
    final fun copy(#A = ..., #B = ..., #C = ..., #D = ..., #E = ..., #F = ...): arrow.core/Tuple6<#A, #B, #C, #D, #E, #F> // arrow.core/Tuple6.copy|copy(1:0;1:1;1:2;1:3;1:4;1:5){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.core/Tuple6.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.core/Tuple6.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.core/Tuple6.toString|toString(){}[0]
    final object Companion // arrow.core/Tuple6.Companion|null[0]
    final val fifth // arrow.core/Tuple6.fifth|{}fifth[0]
        final fun <get-fifth>(): #E // arrow.core/Tuple6.fifth.<get-fifth>|<get-fifth>(){}[0]
    final val first // arrow.core/Tuple6.first|{}first[0]
        final fun <get-first>(): #A // arrow.core/Tuple6.first.<get-first>|<get-first>(){}[0]
    final val fourth // arrow.core/Tuple6.fourth|{}fourth[0]
        final fun <get-fourth>(): #D // arrow.core/Tuple6.fourth.<get-fourth>|<get-fourth>(){}[0]
    final val second // arrow.core/Tuple6.second|{}second[0]
        final fun <get-second>(): #B // arrow.core/Tuple6.second.<get-second>|<get-second>(){}[0]
    final val sixth // arrow.core/Tuple6.sixth|{}sixth[0]
        final fun <get-sixth>(): #F // arrow.core/Tuple6.sixth.<get-sixth>|<get-sixth>(){}[0]
    final val third // arrow.core/Tuple6.third|{}third[0]
        final fun <get-third>(): #C // arrow.core/Tuple6.third.<get-third>|<get-third>(){}[0]
}
final class <#A: out kotlin/Any?, #B: out kotlin/Any?, #C: out kotlin/Any?, #D: out kotlin/Any?, #E: out kotlin/Any?> arrow.core/Tuple5 { // arrow.core/Tuple5|null[0]
    constructor <init>(#A, #B, #C, #D, #E) // arrow.core/Tuple5.<init>|<init>(1:0;1:1;1:2;1:3;1:4){}[0]
    final fun component1(): #A // arrow.core/Tuple5.component1|component1(){}[0]
    final fun component2(): #B // arrow.core/Tuple5.component2|component2(){}[0]
    final fun component3(): #C // arrow.core/Tuple5.component3|component3(){}[0]
    final fun component4(): #D // arrow.core/Tuple5.component4|component4(){}[0]
    final fun component5(): #E // arrow.core/Tuple5.component5|component5(){}[0]
    final fun copy(#A = ..., #B = ..., #C = ..., #D = ..., #E = ...): arrow.core/Tuple5<#A, #B, #C, #D, #E> // arrow.core/Tuple5.copy|copy(1:0;1:1;1:2;1:3;1:4){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.core/Tuple5.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.core/Tuple5.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.core/Tuple5.toString|toString(){}[0]
    final object Companion // arrow.core/Tuple5.Companion|null[0]
    final val fifth // arrow.core/Tuple5.fifth|{}fifth[0]
        final fun <get-fifth>(): #E // arrow.core/Tuple5.fifth.<get-fifth>|<get-fifth>(){}[0]
    final val first // arrow.core/Tuple5.first|{}first[0]
        final fun <get-first>(): #A // arrow.core/Tuple5.first.<get-first>|<get-first>(){}[0]
    final val fourth // arrow.core/Tuple5.fourth|{}fourth[0]
        final fun <get-fourth>(): #D // arrow.core/Tuple5.fourth.<get-fourth>|<get-fourth>(){}[0]
    final val second // arrow.core/Tuple5.second|{}second[0]
        final fun <get-second>(): #B // arrow.core/Tuple5.second.<get-second>|<get-second>(){}[0]
    final val third // arrow.core/Tuple5.third|{}third[0]
        final fun <get-third>(): #C // arrow.core/Tuple5.third.<get-third>|<get-third>(){}[0]
}
final class <#A: out kotlin/Any?, #B: out kotlin/Any?, #C: out kotlin/Any?, #D: out kotlin/Any?> arrow.core/Tuple4 { // arrow.core/Tuple4|null[0]
    constructor <init>(#A, #B, #C, #D) // arrow.core/Tuple4.<init>|<init>(1:0;1:1;1:2;1:3){}[0]
    final fun component1(): #A // arrow.core/Tuple4.component1|component1(){}[0]
    final fun component2(): #B // arrow.core/Tuple4.component2|component2(){}[0]
    final fun component3(): #C // arrow.core/Tuple4.component3|component3(){}[0]
    final fun component4(): #D // arrow.core/Tuple4.component4|component4(){}[0]
    final fun copy(#A = ..., #B = ..., #C = ..., #D = ...): arrow.core/Tuple4<#A, #B, #C, #D> // arrow.core/Tuple4.copy|copy(1:0;1:1;1:2;1:3){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.core/Tuple4.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.core/Tuple4.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.core/Tuple4.toString|toString(){}[0]
    final object Companion // arrow.core/Tuple4.Companion|null[0]
    final val first // arrow.core/Tuple4.first|{}first[0]
        final fun <get-first>(): #A // arrow.core/Tuple4.first.<get-first>|<get-first>(){}[0]
    final val fourth // arrow.core/Tuple4.fourth|{}fourth[0]
        final fun <get-fourth>(): #D // arrow.core/Tuple4.fourth.<get-fourth>|<get-fourth>(){}[0]
    final val second // arrow.core/Tuple4.second|{}second[0]
        final fun <get-second>(): #B // arrow.core/Tuple4.second.<get-second>|<get-second>(){}[0]
    final val third // arrow.core/Tuple4.third|{}third[0]
        final fun <get-third>(): #C // arrow.core/Tuple4.third.<get-third>|<get-third>(){}[0]
}
final class <#A: out kotlin/Any?> arrow.core/Some : arrow.core/Option<#A> { // arrow.core/Some|null[0]
    constructor <init>(#A) // arrow.core/Some.<init>|<init>(1:0){}[0]
    final fun component1(): #A // arrow.core/Some.component1|component1(){}[0]
    final fun copy(#A = ...): arrow.core/Some<#A> // arrow.core/Some.copy|copy(1:0){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.core/Some.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.core/Some.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.core/Some.toString|toString(){}[0]
    final object Companion // arrow.core/Some.Companion|null[0]
    final val value // arrow.core/Some.value|{}value[0]
        final fun <get-value>(): #A // arrow.core/Some.value.<get-value>|<get-value>(){}[0]
}
final class arrow.core.raise/DefaultRaise : arrow.core.raise/Raise<kotlin/Any?> { // arrow.core.raise/DefaultRaise|null[0]
    constructor <init>(kotlin/Boolean) // arrow.core.raise/DefaultRaise.<init>|<init>(kotlin.Boolean){}[0]
    final fun complete(): kotlin/Boolean // arrow.core.raise/DefaultRaise.complete|complete(){}[0]
    final fun raise(kotlin/Any?): kotlin/Nothing // arrow.core.raise/DefaultRaise.raise|raise(kotlin.Any?){}[0]
    final val isTraced // arrow.core.raise/DefaultRaise.isTraced|{}isTraced[0]
        final fun <get-isTraced>(): kotlin/Boolean // arrow.core.raise/DefaultRaise.isTraced.<get-isTraced>|<get-isTraced>(){}[0]
}
final class arrow.core.raise/ResultRaise : arrow.core.raise/Raise<kotlin/Throwable> { // arrow.core.raise/ResultRaise|null[0]
    constructor <init>(arrow.core.raise/Raise<kotlin/Throwable>) // arrow.core.raise/ResultRaise.<init>|<init>(arrow.core.raise.Raise<kotlin.Throwable>){}[0]
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (kotlin.collections/Map<#A1, arrow.core/Either<kotlin/Throwable, #B1>>).bindAll(): kotlin.collections/Map<#A1, #B1> // arrow.core.raise/ResultRaise.bindAll|bindAll@kotlin.collections.Map<0:0,arrow.core.Either<kotlin.Throwable,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (kotlin.collections/Map<#A1, kotlin/Result<#B1>>).bindAll(): kotlin.collections/Map<#A1, #B1> // arrow.core.raise/ResultRaise.bindAll|bindAll@kotlin.collections.Map<0:0,kotlin.Result<0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/Either<kotlin/Throwable, #A1>).bind(): #A1 // arrow.core.raise/ResultRaise.bind|bind@arrow.core.Either<kotlin.Throwable,0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptyList<arrow.core/Either<kotlin/Throwable, #A1>>).bindAll(): arrow.core/NonEmptyList<#A1> // arrow.core.raise/ResultRaise.bindAll|bindAll@arrow.core.NonEmptyList<arrow.core.Either<kotlin.Throwable,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptyList<kotlin/Result<#A1>>).bindAll(): arrow.core/NonEmptyList<#A1> // arrow.core.raise/ResultRaise.bindAll|bindAll@arrow.core.NonEmptyList<kotlin.Result<0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptySet<arrow.core/Either<kotlin/Throwable, #A1>>).bindAll(): arrow.core/NonEmptySet<#A1> // arrow.core.raise/ResultRaise.bindAll|bindAll@arrow.core.NonEmptySet<arrow.core.Either<kotlin.Throwable,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/NonEmptySet<kotlin/Result<#A1>>).bindAll(): arrow.core/NonEmptySet<#A1> // arrow.core.raise/ResultRaise.bindAll|bindAll@arrow.core.NonEmptySet<kotlin.Result<0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Either<kotlin/Throwable, #A1>>).bindAll(): kotlin.collections/List<#A1> // arrow.core.raise/ResultRaise.bindAll|bindAll@kotlin.collections.Iterable<arrow.core.Either<kotlin.Throwable,0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin.collections/Iterable<kotlin/Result<#A1>>).bindAll(): kotlin.collections/List<#A1> // arrow.core.raise/ResultRaise.bindAll|bindAll@kotlin.collections.Iterable<kotlin.Result<0:0>>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<kotlin/Throwable>, #A1>).bind(): #A1 // arrow.core.raise/ResultRaise.bind|bind@kotlin.Function1<arrow.core.raise.Raise<kotlin.Throwable>,0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<kotlin/Throwable>, #A1>).invoke(): #A1 // arrow.core.raise/ResultRaise.invoke|invoke@kotlin.Function1<arrow.core.raise.Raise<kotlin.Throwable>,0:0>(){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> (kotlin/Result<#A1>).bind(): #A1 // arrow.core.raise/ResultRaise.bind|bind@kotlin.Result<0:0>(){0§<kotlin.Any?>}[0]
    final fun raise(kotlin/Throwable): kotlin/Nothing // arrow.core.raise/ResultRaise.raise|raise(kotlin.Throwable){}[0]
    final inline fun <#A1: kotlin/Any?> recover(kotlin/Function1<arrow.core.raise/ResultRaise, #A1>, kotlin/Function1<kotlin/Throwable, #A1>): #A1 // arrow.core.raise/ResultRaise.recover|recover(kotlin.Function1<arrow.core.raise.ResultRaise,0:0>;kotlin.Function1<kotlin.Throwable,0:0>){0§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<kotlin/Throwable>, #A1>).bind(): #A1 // arrow.core.raise/ResultRaise.bind|bind@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<kotlin.Throwable>,0:0>(){0§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<kotlin/Throwable>, #A1>).invoke(): #A1 // arrow.core.raise/ResultRaise.invoke|invoke@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<kotlin.Throwable>,0:0>(){0§<kotlin.Any?>}[0]
}
final const val arrow.core/DeprecatedAmbiguity // arrow.core/DeprecatedAmbiguity|{}DeprecatedAmbiguity[0]
    final fun <get-DeprecatedAmbiguity>(): kotlin/String // arrow.core/DeprecatedAmbiguity.<get-DeprecatedAmbiguity>|<get-DeprecatedAmbiguity>(){}[0]
final const val arrow.core/DeprecatedUnsafeAccess // arrow.core/DeprecatedUnsafeAccess|{}DeprecatedUnsafeAccess[0]
    final fun <get-DeprecatedUnsafeAccess>(): kotlin/String // arrow.core/DeprecatedUnsafeAccess.<get-DeprecatedUnsafeAccess>|<get-DeprecatedUnsafeAccess>(){}[0]
final const val arrow.core/NicheAPI // arrow.core/NicheAPI|{}NicheAPI[0]
    final fun <get-NicheAPI>(): kotlin/String // arrow.core/NicheAPI.<get-NicheAPI>|<get-NicheAPI>(){}[0]
final const val arrow.core/RedundantAPI // arrow.core/RedundantAPI|{}RedundantAPI[0]
    final fun <get-RedundantAPI>(): kotlin/String // arrow.core/RedundantAPI.<get-RedundantAPI>|<get-RedundantAPI>(){}[0]
final fun (arrow.core.raise/Traced).arrow.core.raise/withCause(arrow.core.raise/Traced): arrow.core.raise/Traced // arrow.core.raise/withCause|withCause@arrow.core.raise.Traced(arrow.core.raise.Traced){}[0]
final fun (kotlin/String).arrow.core/escaped(): kotlin/String // arrow.core/escaped|escaped@kotlin.String(){}[0]
final fun (kotlin/Throwable).arrow.core/nonFatalOrThrow(): kotlin/Throwable // arrow.core/nonFatalOrThrow|nonFatalOrThrow@kotlin.Throwable(){}[0]
final fun <#A: kotlin/Any> (kotlin/Function1<#A, kotlin/Boolean>).arrow.core/mapNullable(): kotlin/Function1<#A?, kotlin/Boolean> // arrow.core/mapNullable|mapNullable@kotlin.Function1<0:0,kotlin.Boolean>(){0§<kotlin.Any>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/zip(kotlin.sequences/Sequence<#B>, kotlin.sequences/Sequence<#C>, kotlin.sequences/Sequence<#D>, kotlin.sequences/Sequence<#E>, kotlin.sequences/Sequence<#F>, kotlin.sequences/Sequence<#G>, kotlin.sequences/Sequence<#H>, kotlin.sequences/Sequence<#I>, kotlin.sequences/Sequence<#J>, kotlin/Function10<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K>): kotlin.sequences/Sequence<#K> // arrow.core/zip|zip@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>;kotlin.sequences.Sequence<0:2>;kotlin.sequences.Sequence<0:3>;kotlin.sequences.Sequence<0:4>;kotlin.sequences.Sequence<0:5>;kotlin.sequences.Sequence<0:6>;kotlin.sequences.Sequence<0:7>;kotlin.sequences.Sequence<0:8>;kotlin.sequences.Sequence<0:9>;kotlin.Function10<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/zip(kotlin.sequences/Sequence<#B>, kotlin.sequences/Sequence<#C>, kotlin.sequences/Sequence<#D>, kotlin.sequences/Sequence<#E>, kotlin.sequences/Sequence<#F>, kotlin.sequences/Sequence<#G>, kotlin.sequences/Sequence<#H>, kotlin.sequences/Sequence<#I>, kotlin/Function9<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J>): kotlin.sequences/Sequence<#J> // arrow.core/zip|zip@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>;kotlin.sequences.Sequence<0:2>;kotlin.sequences.Sequence<0:3>;kotlin.sequences.Sequence<0:4>;kotlin.sequences.Sequence<0:5>;kotlin.sequences.Sequence<0:6>;kotlin.sequences.Sequence<0:7>;kotlin.sequences.Sequence<0:8>;kotlin.Function9<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?> (arrow.core/Tuple8<#A, #B, #C, #D, #E, #F, #G, #H>).arrow.core/plus(#I): arrow.core/Tuple9<#A, #B, #C, #D, #E, #F, #G, #H, #I> // arrow.core/plus|plus@arrow.core.Tuple8<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7>(0:8){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/zip(kotlin.sequences/Sequence<#B>, kotlin.sequences/Sequence<#C>, kotlin.sequences/Sequence<#D>, kotlin.sequences/Sequence<#E>, kotlin.sequences/Sequence<#F>, kotlin.sequences/Sequence<#G>, kotlin.sequences/Sequence<#H>, kotlin/Function8<#A, #B, #C, #D, #E, #F, #G, #H, #I>): kotlin.sequences/Sequence<#I> // arrow.core/zip|zip@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>;kotlin.sequences.Sequence<0:2>;kotlin.sequences.Sequence<0:3>;kotlin.sequences.Sequence<0:4>;kotlin.sequences.Sequence<0:5>;kotlin.sequences.Sequence<0:6>;kotlin.sequences.Sequence<0:7>;kotlin.Function8<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?> (arrow.core/Tuple7<#A, #B, #C, #D, #E, #F, #G>).arrow.core/plus(#H): arrow.core/Tuple8<#A, #B, #C, #D, #E, #F, #G, #H> // arrow.core/plus|plus@arrow.core.Tuple7<0:0,0:1,0:2,0:3,0:4,0:5,0:6>(0:7){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/zip(kotlin.sequences/Sequence<#B>, kotlin.sequences/Sequence<#C>, kotlin.sequences/Sequence<#D>, kotlin.sequences/Sequence<#E>, kotlin.sequences/Sequence<#F>, kotlin.sequences/Sequence<#G>, kotlin/Function7<#A, #B, #C, #D, #E, #F, #G, #H>): kotlin.sequences/Sequence<#H> // arrow.core/zip|zip@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>;kotlin.sequences.Sequence<0:2>;kotlin.sequences.Sequence<0:3>;kotlin.sequences.Sequence<0:4>;kotlin.sequences.Sequence<0:5>;kotlin.sequences.Sequence<0:6>;kotlin.Function7<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?> (arrow.core/Tuple6<#A, #B, #C, #D, #E, #F>).arrow.core/plus(#G): arrow.core/Tuple7<#A, #B, #C, #D, #E, #F, #G> // arrow.core/plus|plus@arrow.core.Tuple6<0:0,0:1,0:2,0:3,0:4,0:5>(0:6){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/zip(kotlin.sequences/Sequence<#B>, kotlin.sequences/Sequence<#C>, kotlin.sequences/Sequence<#D>, kotlin.sequences/Sequence<#E>, kotlin.sequences/Sequence<#F>, kotlin/Function6<#A, #B, #C, #D, #E, #F, #G>): kotlin.sequences/Sequence<#G> // arrow.core/zip|zip@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>;kotlin.sequences.Sequence<0:2>;kotlin.sequences.Sequence<0:3>;kotlin.sequences.Sequence<0:4>;kotlin.sequences.Sequence<0:5>;kotlin.Function6<0:0,0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?> (arrow.core/Tuple5<#A, #B, #C, #D, #E>).arrow.core/plus(#F): arrow.core/Tuple6<#A, #B, #C, #D, #E, #F> // arrow.core/plus|plus@arrow.core.Tuple5<0:0,0:1,0:2,0:3,0:4>(0:5){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/zip(kotlin.sequences/Sequence<#B>, kotlin.sequences/Sequence<#C>, kotlin.sequences/Sequence<#D>, kotlin.sequences/Sequence<#E>, kotlin/Function5<#A, #B, #C, #D, #E, #F>): kotlin.sequences/Sequence<#F> // arrow.core/zip|zip@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>;kotlin.sequences.Sequence<0:2>;kotlin.sequences.Sequence<0:3>;kotlin.sequences.Sequence<0:4>;kotlin.Function5<0:0,0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?> (arrow.core/Tuple4<#A, #B, #C, #D>).arrow.core/plus(#E): arrow.core/Tuple5<#A, #B, #C, #D, #E> // arrow.core/plus|plus@arrow.core.Tuple4<0:0,0:1,0:2,0:3>(0:4){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/zip(kotlin.sequences/Sequence<#B>, kotlin.sequences/Sequence<#C>, kotlin.sequences/Sequence<#D>, kotlin/Function4<#A, #B, #C, #D, #E>): kotlin.sequences/Sequence<#E> // arrow.core/zip|zip@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>;kotlin.sequences.Sequence<0:2>;kotlin.sequences.Sequence<0:3>;kotlin.Function4<0:0,0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/align(kotlin.collections/Map<#A, #C>, kotlin/Function1<kotlin.collections/Map.Entry<#A, arrow.core/Ior<#B, #C>>, #D>): kotlin.collections/Map<#A, #D> // arrow.core/align|align@kotlin.collections.Map<0:0,0:1>(kotlin.collections.Map<0:0,0:2>;kotlin.Function1<kotlin.collections.Map.Entry<0:0,arrow.core.Ior<0:1,0:2>>,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/padZip(kotlin.collections/Map<#A, #C>, kotlin/Function3<#A, #B?, #C?, #D>): kotlin.collections/Map<#A, #D> // arrow.core/padZip|padZip@kotlin.collections.Map<0:0,0:1>(kotlin.collections.Map<0:0,0:2>;kotlin.Function3<0:0,0:1?,0:2?,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/zip(kotlin.sequences/Sequence<#B>, kotlin.sequences/Sequence<#C>, kotlin/Function3<#A, #B, #C, #D>): kotlin.sequences/Sequence<#D> // arrow.core/zip|zip@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>;kotlin.sequences.Sequence<0:2>;kotlin.Function3<0:0,0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (kotlin/Triple<#A, #B, #C>).arrow.core/plus(#D): arrow.core/Tuple4<#A, #B, #C, #D> // arrow.core/plus|plus@kotlin.Triple<0:0,0:1,0:2>(0:3){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (arrow.core/NonEmptyList<#C>).arrow.core/unzip(kotlin/Function1<#C, kotlin/Pair<#A, #B>>): kotlin/Pair<arrow.core/NonEmptyList<#A>, arrow.core/NonEmptyList<#B>> // arrow.core/unzip|unzip@arrow.core.NonEmptyList<0:2>(kotlin.Function1<0:2,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/crosswalkMap(kotlin/Function1<#A, kotlin.collections/Map<#B, #C>>): kotlin.collections/Map<#B, kotlin.collections/List<#C>> // arrow.core/crosswalkMap|crosswalkMap@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.collections.Map<0:1,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/align(kotlin.collections/Map<#A, #C>): kotlin.collections/Map<#A, arrow.core/Ior<#B, #C>> // arrow.core/align|align@kotlin.collections.Map<0:0,0:1>(kotlin.collections.Map<0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/flatMap(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, kotlin.collections/Map<#A, #C>>): kotlin.collections/Map<#A, #C> // arrow.core/flatMap|flatMap@kotlin.collections.Map<0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,kotlin.collections.Map<0:0,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/mapNotNull(kotlin/Function1<kotlin.collections/Map.Entry<#A, #B>, #C?>): kotlin.collections/Map<#A, #C> // arrow.core/mapNotNull|mapNotNull@kotlin.collections.Map<0:0,0:1>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:1>,0:2?>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/padZip(kotlin.collections/Map<#A, #C>): kotlin.collections/Map<#A, kotlin/Pair<#B?, #C?>> // arrow.core/padZip|padZip@kotlin.collections.Map<0:0,0:1>(kotlin.collections.Map<0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/zip(kotlin.collections/Map<#A, #C>): kotlin.collections/Map<#A, kotlin/Pair<#B, #C>> // arrow.core/zip|zip@kotlin.collections.Map<0:0,0:1>(kotlin.collections.Map<0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Map<#A, arrow.core/Ior<#B, #C>>).arrow.core/unalign(): kotlin/Pair<kotlin.collections/Map<#A, #B>, kotlin.collections/Map<#A, #C>> // arrow.core/unalign|unalign@kotlin.collections.Map<0:0,arrow.core.Ior<0:1,0:2>>(){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Map<#A, kotlin/Pair<#B, #C>>).arrow.core/unzip(): kotlin/Pair<kotlin.collections/Map<#A, #B>, kotlin.collections/Map<#A, #C>> // arrow.core/unzip|unzip@kotlin.collections.Map<0:0,kotlin.Pair<0:1,0:2>>(){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #C>).arrow.core.raise/mapError(kotlin.coroutines/SuspendFunction1<#A, #B>): kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#B>, #C> // arrow.core.raise/mapError|mapError@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<0:0>,0:2>(kotlin.coroutines.SuspendFunction1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #C>).arrow.core.raise/recover(kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<#B>, #A, #C>): kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#B>, #C> // arrow.core.raise/recover|recover@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<0:0>,0:2>(kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<0:1>,0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/align(kotlin.sequences/Sequence<#B>, kotlin/Function1<arrow.core/Ior<#A, #B>, #C>): kotlin.sequences/Sequence<#C> // arrow.core/align|align@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>;kotlin.Function1<arrow.core.Ior<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/leftPadZip(kotlin.sequences/Sequence<#B>, kotlin/Function2<#A?, #B, #C>): kotlin.sequences/Sequence<#C> // arrow.core/leftPadZip|leftPadZip@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>;kotlin.Function2<0:0?,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/padZip(kotlin.sequences/Sequence<#B>, kotlin/Function2<#A?, #B?, #C>): kotlin.sequences/Sequence<#C> // arrow.core/padZip|padZip@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>;kotlin.Function2<0:0?,0:1?,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/rightPadZip(kotlin.sequences/Sequence<#B>, kotlin/Function2<#A, #B?, #C>): kotlin.sequences/Sequence<#C> // arrow.core/rightPadZip|rightPadZip@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>;kotlin.Function2<0:0,0:1?,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.sequences/Sequence<#B>).arrow.core/mapOrAccumulate(kotlin/Function2<#A, #A, #A>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, #C>): arrow.core/Either<#A, kotlin.collections/List<#C>> // arrow.core/mapOrAccumulate|mapOrAccumulate@kotlin.sequences.Sequence<0:1>(kotlin.Function2<0:0,0:0,0:0>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.sequences/Sequence<#B>).arrow.core/mapOrAccumulate(kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, #C>): arrow.core/Either<arrow.core/NonEmptyList<#A>, kotlin.collections/List<#C>> // arrow.core/mapOrAccumulate|mapOrAccumulate@kotlin.sequences.Sequence<0:1>(kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.sequences/Sequence<#C>).arrow.core/unalign(kotlin/Function1<#C, arrow.core/Ior<#A, #B>>): kotlin/Pair<kotlin.sequences/Sequence<#A>, kotlin.sequences/Sequence<#B>> // arrow.core/unalign|unalign@kotlin.sequences.Sequence<0:2>(kotlin.Function1<0:2,arrow.core.Ior<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.sequences/Sequence<#C>).arrow.core/unzip(kotlin/Function1<#C, kotlin/Pair<#A, #B>>): kotlin/Pair<kotlin.sequences/Sequence<#A>, kotlin.sequences/Sequence<#B>> // arrow.core/unzip|unzip@kotlin.sequences.Sequence<0:2>(kotlin.Function1<0:2,kotlin.Pair<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<#A>, #C>).arrow.core.raise/mapError(kotlin/Function1<#A, #B>): kotlin/Function1<arrow.core.raise/Raise<#B>, #C> // arrow.core.raise/mapError|mapError@kotlin.Function1<arrow.core.raise.Raise<0:0>,0:2>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<#A>, #C>).arrow.core.raise/recover(kotlin/Function2<arrow.core.raise/Raise<#B>, #A, #C>): kotlin/Function1<arrow.core.raise/Raise<#B>, #C> // arrow.core.raise/recover|recover@kotlin.Function1<arrow.core.raise.Raise<0:0>,0:2>(kotlin.Function2<arrow.core.raise.Raise<0:1>,0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin/Pair<#A, #B>).arrow.core/plus(#C): kotlin/Triple<#A, #B, #C> // arrow.core/plus|plus@kotlin.Pair<0:0,0:1>(0:2){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core/Either<#A, #B>).arrow.core/combine(arrow.core/Either<#A, #B>, kotlin/Function2<#A, #A, #A>, kotlin/Function2<#B, #B, #B>): arrow.core/Either<#A, #B> // arrow.core/combine|combine@arrow.core.Either<0:0,0:1>(arrow.core.Either<0:0,0:1>;kotlin.Function2<0:0,0:0,0:0>;kotlin.Function2<0:1,0:1,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core/Either<#A, #B>).arrow.core/toEitherNel(): arrow.core/Either<arrow.core/NonEmptyList<#A>, #B> // arrow.core/toEitherNel|toEitherNel@arrow.core.Either<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core/Either<#A, arrow.core/Either<#A, #B>>).arrow.core/flatten(): arrow.core/Either<#A, #B> // arrow.core/flatten|flatten@arrow.core.Either<0:0,arrow.core.Either<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core/Ior<#A, #B>).arrow.core/combine(arrow.core/Ior<#A, #B>, kotlin/Function2<#A, #A, #A>, kotlin/Function2<#B, #B, #B>): arrow.core/Ior<#A, #B> // arrow.core/combine|combine@arrow.core.Ior<0:0,0:1>(arrow.core.Ior<0:0,0:1>;kotlin.Function2<0:0,0:0,0:0>;kotlin.Function2<0:1,0:1,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core/Ior<#A, #B>).arrow.core/toIorNel(): arrow.core/Ior<arrow.core/NonEmptyList<#A>, #B> // arrow.core/toIorNel|toIorNel@arrow.core.Ior<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core/NonEmptyList<kotlin/Pair<#A, #B>>).arrow.core/unzip(): kotlin/Pair<arrow.core/NonEmptyList<#A>, arrow.core/NonEmptyList<#B>> // arrow.core/unzip|unzip@arrow.core.NonEmptyList<kotlin.Pair<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core/Option<kotlin/Pair<#A, #B>>).arrow.core/toMap(): kotlin.collections/Map<#A, #B> // arrow.core/toMap|toMap@arrow.core.Option<kotlin.Pair<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/align(kotlin.collections/Iterable<#B>): kotlin.collections/List<arrow.core/Ior<#A, #B>> // arrow.core/align|align@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/crosswalk(kotlin/Function1<#A, kotlin.collections/Iterable<#B>>): kotlin.collections/List<kotlin.collections/List<#B>> // arrow.core/crosswalk|crosswalk@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.collections.Iterable<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/crosswalkNull(kotlin/Function1<#A, #B?>): kotlin.collections/List<#B>? // arrow.core/crosswalkNull|crosswalkNull@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/leftPadZip(kotlin.collections/Iterable<#B>): kotlin.collections/List<kotlin/Pair<#A?, #B>> // arrow.core/leftPadZip|leftPadZip@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/padZip(kotlin.collections/Iterable<#B>): kotlin.collections/List<kotlin/Pair<#A?, #B?>> // arrow.core/padZip|padZip@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/rightPadZip(kotlin.collections/Iterable<#B>): kotlin.collections/List<kotlin/Pair<#A, #B?>> // arrow.core/rightPadZip|rightPadZip@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/unweave(kotlin/Function1<#A, kotlin.collections/Iterable<#B>>): kotlin.collections/List<#B> // arrow.core/unweave|unweave@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.collections.Iterable<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Either<#A, #B>>).arrow.core/flattenOrAccumulate(): arrow.core/Either<arrow.core/NonEmptyList<#A>, kotlin.collections/List<#B>> // arrow.core/flattenOrAccumulate|flattenOrAccumulate@kotlin.collections.Iterable<arrow.core.Either<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Either<#A, #B>>).arrow.core/separateEither(): kotlin/Pair<kotlin.collections/List<#A>, kotlin.collections/List<#B>> // arrow.core/separateEither|separateEither@kotlin.collections.Iterable<arrow.core.Either<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Either<arrow.core/NonEmptyList<#A>, #B>>).arrow.core/flattenOrAccumulate(): arrow.core/Either<arrow.core/NonEmptyList<#A>, kotlin.collections/List<#B>> // arrow.core/flattenOrAccumulate|flattenOrAccumulate@kotlin.collections.Iterable<arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Either<arrow.core/NonEmptyList<#A>, #B>>).arrow.core/flattenOrAccumulate(kotlin/Function2<#A, #A, #A>): arrow.core/Either<#A, kotlin.collections/List<#B>> // arrow.core/flattenOrAccumulate|flattenOrAccumulate@kotlin.collections.Iterable<arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:1>>(kotlin.Function2<0:0,0:0,0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Ior<#A, #B>>).arrow.core/separateIor(): kotlin/Pair<kotlin.collections/List<#A>, kotlin.collections/List<#B>> // arrow.core/separateIor|separateIor@kotlin.collections.Iterable<arrow.core.Ior<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Ior<#A, #B>>).arrow.core/unalign(): kotlin/Pair<kotlin.collections/List<#A?>, kotlin.collections/List<#B?>> // arrow.core/unalign|unalign@kotlin.collections.Iterable<arrow.core.Ior<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/combine(kotlin.collections/Map<#A, #B>, kotlin/Function2<#B, #B, #B>): kotlin.collections/Map<#A, #B> // arrow.core/combine|combine@kotlin.collections.Map<0:0,0:1>(kotlin.collections.Map<0:0,0:1>;kotlin.Function2<0:1,0:1,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/getOrNone(#A): arrow.core/Option<#B> // arrow.core/getOrNone|getOrNone@kotlin.collections.Map<0:0,0:1>(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/salign(kotlin.collections/Map<#A, #B>, kotlin/Function2<#B, #B, #B>): kotlin.collections/Map<#A, #B> // arrow.core/salign|salign@kotlin.collections.Map<0:0,0:1>(kotlin.collections.Map<0:0,0:1>;kotlin.Function2<0:1,0:1,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Map<#A, arrow.core/Option<#B>>).arrow.core/filterOption(): kotlin.collections/Map<#A, #B> // arrow.core/filterOption|filterOption@kotlin.collections.Map<0:0,arrow.core.Option<0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/catch(): kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, kotlin/Result<#B>> // arrow.core.raise/catch|catch@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<0:0>,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/catch(kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<#A>, kotlin/Throwable, #B>): kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #B> // arrow.core.raise/catch|catch@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<0:0>,0:1>(kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<0:0>,kotlin.Throwable,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/align(kotlin.sequences/Sequence<#B>): kotlin.sequences/Sequence<arrow.core/Ior<#A, #B>> // arrow.core/align|align@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/crosswalk(kotlin/Function1<#A, kotlin.collections/Iterable<#B>>): kotlin.collections/List<kotlin.collections/List<#B>> // arrow.core/crosswalk|crosswalk@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.collections.Iterable<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/crosswalkNull(kotlin/Function1<#A, #B?>): kotlin.collections/List<#B>? // arrow.core/crosswalkNull|crosswalkNull@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/leftPadZip(kotlin.sequences/Sequence<#B>): kotlin.sequences/Sequence<kotlin/Pair<#A?, #B>> // arrow.core/leftPadZip|leftPadZip@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/padZip(kotlin.sequences/Sequence<#B>): kotlin.sequences/Sequence<kotlin/Pair<#A?, #B?>> // arrow.core/padZip|padZip@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/rightPadZip(kotlin.sequences/Sequence<#B>): kotlin.sequences/Sequence<kotlin/Pair<#A, #B?>> // arrow.core/rightPadZip|rightPadZip@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/unweave(kotlin/Function1<#A, kotlin.sequences/Sequence<#B>>): kotlin.sequences/Sequence<#B> // arrow.core/unweave|unweave@kotlin.sequences.Sequence<0:0>(kotlin.Function1<0:0,kotlin.sequences.Sequence<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<arrow.core/Either<#A, #B>>).arrow.core/separateEither(): kotlin/Pair<kotlin.collections/List<#A>, kotlin.collections/List<#B>> // arrow.core/separateEither|separateEither@kotlin.sequences.Sequence<arrow.core.Either<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<arrow.core/Ior<#A, #B>>).arrow.core/unalign(): kotlin/Pair<kotlin.sequences/Sequence<#A>, kotlin.sequences/Sequence<#B>> // arrow.core/unalign|unalign@kotlin.sequences.Sequence<arrow.core.Ior<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.sequences/Sequence<kotlin/Pair<#A, #B>>).arrow.core/unzip(): kotlin/Pair<kotlin.sequences/Sequence<#A>, kotlin.sequences/Sequence<#B>> // arrow.core/unzip|unzip@kotlin.sequences.Sequence<kotlin.Pair<0:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/catch(kotlin/Function2<arrow.core.raise/Raise<#A>, kotlin/Throwable, #B>): kotlin/Function1<arrow.core.raise/Raise<#A>, #B> // arrow.core.raise/catch|catch@kotlin.Function1<arrow.core.raise.Raise<0:0>,0:1>(kotlin.Function2<arrow.core.raise.Raise<0:0>,kotlin.Throwable,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/getOrNull(): #B? // arrow.core.raise/getOrNull|getOrNull@kotlin.Function1<arrow.core.raise.Raise<0:0>,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/toEither(): arrow.core/Either<#A, #B> // arrow.core.raise/toEither|toEither@kotlin.Function1<arrow.core.raise.Raise<0:0>,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/toIor(): arrow.core/Ior<#A, #B> // arrow.core.raise/toIor|toIor@kotlin.Function1<arrow.core.raise.Raise<0:0>,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Pair<#A, #B>).arrow.core/bothIor(): arrow.core/Ior<#A, #B> // arrow.core/bothIor|bothIor@kotlin.Pair<0:0,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> arrow.core/MemoizedDeepRecursiveFunction(arrow.core/MemoizationCache<#A, #B> = ..., kotlin.coroutines/SuspendFunction2<kotlin/DeepRecursiveScope<#A, #B>, #A, #B>): kotlin/DeepRecursiveFunction<#A, #B> // arrow.core/MemoizedDeepRecursiveFunction|MemoizedDeepRecursiveFunction(arrow.core.MemoizationCache<0:0,0:1>;kotlin.coroutines.SuspendFunction2<kotlin.DeepRecursiveScope<0:0,0:1>,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> arrow.core/constant(#B): kotlin/Function1<#A, #B> // arrow.core/constant|constant(0:1){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (#A).arrow.core/left(): arrow.core/Either<#A, kotlin/Nothing> // arrow.core/left|left@0:0(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (#A).arrow.core/leftIor(): arrow.core/Ior<#A, kotlin/Nothing> // arrow.core/leftIor|leftIor@0:0(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (#A).arrow.core/leftNel(): arrow.core/Either<arrow.core/NonEmptyList<#A>, kotlin/Nothing> // arrow.core/leftNel|leftNel@0:0(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (#A).arrow.core/prependTo(kotlin.collections/Iterable<#A>): kotlin.collections/List<#A> // arrow.core/prependTo|prependTo@0:0(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (#A).arrow.core/right(): arrow.core/Either<kotlin/Nothing, #A> // arrow.core/right|right@0:0(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (#A).arrow.core/rightIor(): arrow.core/Ior<kotlin/Nothing, #A> // arrow.core/rightIor|rightIor@0:0(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (#A).arrow.core/some(): arrow.core/Option<#A> // arrow.core/some|some@0:0(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (#A?).arrow.core/toOption(): arrow.core/Option<#A> // arrow.core/toOption|toOption@0:0?(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (arrow.core/Either<#A, #A>).arrow.core/merge(): #A // arrow.core/merge|merge@arrow.core.Either<0:0,0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (arrow.core/NonEmptyList<arrow.core/NonEmptyList<#A>>).arrow.core/flatten(): arrow.core/NonEmptyList<#A> // arrow.core/flatten|flatten@arrow.core.NonEmptyList<arrow.core.NonEmptyList<0:0>>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (arrow.core/Option<#A>).arrow.core/combine(arrow.core/Option<#A>, kotlin/Function2<#A, #A, #A>): arrow.core/Option<#A> // arrow.core/combine|combine@arrow.core.Option<0:0>(arrow.core.Option<0:0>;kotlin.Function2<0:0,0:0,0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (arrow.core/Option<arrow.core/Option<#A>>).arrow.core/flatten(): arrow.core/Option<#A> // arrow.core/flatten|flatten@arrow.core.Option<arrow.core.Option<0:0>>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/collectionSizeOrDefault(kotlin/Int): kotlin/Int // arrow.core/collectionSizeOrDefault|collectionSizeOrDefault@kotlin.collections.Iterable<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/elementAtOrNone(kotlin/Int): arrow.core/Option<#A> // arrow.core/elementAtOrNone|elementAtOrNone@kotlin.collections.Iterable<0:0>(kotlin.Int){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/firstOrNone(): arrow.core/Option<#A> // arrow.core/firstOrNone|firstOrNone@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/interleave(kotlin.collections/Iterable<#A>): kotlin.collections/List<#A> // arrow.core/interleave|interleave@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/lastOrNone(): arrow.core/Option<#A> // arrow.core/lastOrNone|lastOrNone@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/singleOrNone(): arrow.core/Option<#A> // arrow.core/singleOrNone|singleOrNone@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/split(): kotlin/Pair<kotlin.collections/List<#A>, #A>? // arrow.core/split|split@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/tail(): kotlin.collections/List<#A> // arrow.core/tail|tail@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/toNonEmptyListOrNone(): arrow.core/Option<arrow.core/NonEmptyList<#A>> // arrow.core/toNonEmptyListOrNone|toNonEmptyListOrNone@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/toNonEmptyListOrNull(): arrow.core/NonEmptyList<#A>? // arrow.core/toNonEmptyListOrNull|toNonEmptyListOrNull@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/toNonEmptySetOrNone(): arrow.core/Option<arrow.core/NonEmptySet<#A>> // arrow.core/toNonEmptySetOrNone|toNonEmptySetOrNone@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/toNonEmptySetOrNull(): arrow.core/NonEmptySet<#A>? // arrow.core/toNonEmptySetOrNull|toNonEmptySetOrNull@kotlin.collections.Iterable<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Option<#A>>).arrow.core/filterOption(): kotlin.collections/List<#A> // arrow.core/filterOption|filterOption@kotlin.collections.Iterable<arrow.core.Option<0:0>>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Option<#A>>).arrow.core/flattenOption(): kotlin.collections/List<#A> // arrow.core/flattenOption|flattenOption@kotlin.collections.Iterable<arrow.core.Option<0:0>>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Iterable<kotlin.collections/Iterable<#A>>).arrow.core/flatten(): kotlin.collections/List<#A> // arrow.core/flatten|flatten@kotlin.collections.Iterable<kotlin.collections.Iterable<0:0>>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Set<#A>).arrow.core/toNonEmptySetOrNone(): arrow.core/Option<arrow.core/NonEmptySet<#A>> // arrow.core/toNonEmptySetOrNone|toNonEmptySetOrNone@kotlin.collections.Set<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.collections/Set<#A>).arrow.core/toNonEmptySetOrNull(): arrow.core/NonEmptySet<#A>? // arrow.core/toNonEmptySetOrNull|toNonEmptySetOrNull@kotlin.collections.Set<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.coroutines.cancellation/CancellationException).arrow.core.raise/raisedOrRethrow(arrow.core.raise/DefaultRaise): #A // arrow.core.raise/raisedOrRethrow|raisedOrRethrow@kotlin.coroutines.cancellation.CancellationException(arrow.core.raise.DefaultRaise){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/interleave(kotlin.sequences/Sequence<#A>): kotlin.sequences/Sequence<#A> // arrow.core/interleave|interleave@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/many(): kotlin.sequences/Sequence<kotlin.sequences/Sequence<#A>> // arrow.core/many|many@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/once(): kotlin.sequences/Sequence<#A> // arrow.core/once|once@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/salign(kotlin.sequences/Sequence<#A>, kotlin/Function2<#A, #A, #A>): kotlin.sequences/Sequence<#A> // arrow.core/salign|salign@kotlin.sequences.Sequence<0:0>(kotlin.sequences.Sequence<0:0>;kotlin.Function2<0:0,0:0,0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/split(): kotlin/Pair<kotlin.sequences/Sequence<#A>, #A>? // arrow.core/split|split@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<#A>).arrow.core/tail(): kotlin.sequences/Sequence<#A> // arrow.core/tail|tail@kotlin.sequences.Sequence<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<arrow.core/Option<#A>>).arrow.core/filterOption(): kotlin.sequences/Sequence<#A> // arrow.core/filterOption|filterOption@kotlin.sequences.Sequence<arrow.core.Option<0:0>>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin.sequences/Sequence<kotlin.sequences/Sequence<#A>>).arrow.core/flatten(): kotlin.sequences/Sequence<#A> // arrow.core/flatten|flatten@kotlin.sequences.Sequence<kotlin.sequences.Sequence<0:0>>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<#A>, #A>).arrow.core.raise/merge(): #A // arrow.core.raise/merge|merge@kotlin.Function1<arrow.core.raise.Raise<0:0>,0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<arrow.core/None>, #A>).arrow.core/toOption(): arrow.core/Option<#A> // arrow.core/toOption|toOption@kotlin.Function1<arrow.core.raise.Raise<arrow.core.None>,0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<kotlin/Nothing>, #A>).arrow.core.raise/get(): #A // arrow.core.raise/get|get@kotlin.Function1<arrow.core.raise.Raise<kotlin.Nothing>,0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<kotlin/Throwable>, #A>).arrow.core.raise/toResult(): kotlin/Result<#A> // arrow.core.raise/toResult|toResult@kotlin.Function1<arrow.core.raise.Raise<kotlin.Throwable>,0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> arrow.core/nonEmptyListOf(#A, kotlin/Array<out #A>...): arrow.core/NonEmptyList<#A> // arrow.core/nonEmptyListOf|nonEmptyListOf(0:0;kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> arrow.core/nonEmptySetOf(#A, kotlin/Array<out #A>...): arrow.core/NonEmptySet<#A> // arrow.core/nonEmptySetOf|nonEmptySetOf(0:0;kotlin.Array<out|0:0>...){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> arrow.core/none(): arrow.core/Option<#A> // arrow.core/none|none(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> arrow.core/sort(#A, #A, #A, kotlin/Comparator<#A>): kotlin/Triple<#A, #A, #A> // arrow.core/sort|sort(0:0;0:0;0:0;kotlin.Comparator<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> arrow.core/sort(#A, #A, kotlin/Comparator<#A>): kotlin/Pair<#A, #A> // arrow.core/sort|sort(0:0;0:0;kotlin.Comparator<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> arrow.core/sort(#A, kotlin/Array<out #A>..., kotlin/Comparator<#A>): kotlin.collections/List<#A> // arrow.core/sort|sort(0:0;kotlin.Array<out|0:0>...;kotlin.Comparator<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Comparable<#A>, #B: kotlin/Comparable<#B>, #C: kotlin/Comparable<#C>, #D: kotlin/Comparable<#D>, #E: kotlin/Comparable<#E>, #F: kotlin/Comparable<#F>, #G: kotlin/Comparable<#G>, #H: kotlin/Comparable<#H>, #I: kotlin/Comparable<#I>> (arrow.core/Tuple9<#A, #B, #C, #D, #E, #F, #G, #H, #I>).arrow.core/compareTo(arrow.core/Tuple9<#A, #B, #C, #D, #E, #F, #G, #H, #I>): kotlin/Int // arrow.core/compareTo|compareTo@arrow.core.Tuple9<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>(arrow.core.Tuple9<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Comparable<0:0>>;1§<kotlin.Comparable<0:1>>;2§<kotlin.Comparable<0:2>>;3§<kotlin.Comparable<0:3>>;4§<kotlin.Comparable<0:4>>;5§<kotlin.Comparable<0:5>>;6§<kotlin.Comparable<0:6>>;7§<kotlin.Comparable<0:7>>;8§<kotlin.Comparable<0:8>>}[0]
final fun <#A: kotlin/Comparable<#A>, #B: kotlin/Comparable<#B>, #C: kotlin/Comparable<#C>, #D: kotlin/Comparable<#D>, #E: kotlin/Comparable<#E>, #F: kotlin/Comparable<#F>, #G: kotlin/Comparable<#G>, #H: kotlin/Comparable<#H>> (arrow.core/Tuple8<#A, #B, #C, #D, #E, #F, #G, #H>).arrow.core/compareTo(arrow.core/Tuple8<#A, #B, #C, #D, #E, #F, #G, #H>): kotlin/Int // arrow.core/compareTo|compareTo@arrow.core.Tuple8<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7>(arrow.core.Tuple8<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Comparable<0:0>>;1§<kotlin.Comparable<0:1>>;2§<kotlin.Comparable<0:2>>;3§<kotlin.Comparable<0:3>>;4§<kotlin.Comparable<0:4>>;5§<kotlin.Comparable<0:5>>;6§<kotlin.Comparable<0:6>>;7§<kotlin.Comparable<0:7>>}[0]
final fun <#A: kotlin/Comparable<#A>, #B: kotlin/Comparable<#B>, #C: kotlin/Comparable<#C>, #D: kotlin/Comparable<#D>, #E: kotlin/Comparable<#E>, #F: kotlin/Comparable<#F>, #G: kotlin/Comparable<#G>> (arrow.core/Tuple7<#A, #B, #C, #D, #E, #F, #G>).arrow.core/compareTo(arrow.core/Tuple7<#A, #B, #C, #D, #E, #F, #G>): kotlin/Int // arrow.core/compareTo|compareTo@arrow.core.Tuple7<0:0,0:1,0:2,0:3,0:4,0:5,0:6>(arrow.core.Tuple7<0:0,0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Comparable<0:0>>;1§<kotlin.Comparable<0:1>>;2§<kotlin.Comparable<0:2>>;3§<kotlin.Comparable<0:3>>;4§<kotlin.Comparable<0:4>>;5§<kotlin.Comparable<0:5>>;6§<kotlin.Comparable<0:6>>}[0]
final fun <#A: kotlin/Comparable<#A>, #B: kotlin/Comparable<#B>, #C: kotlin/Comparable<#C>, #D: kotlin/Comparable<#D>, #E: kotlin/Comparable<#E>, #F: kotlin/Comparable<#F>> (arrow.core/Tuple6<#A, #B, #C, #D, #E, #F>).arrow.core/compareTo(arrow.core/Tuple6<#A, #B, #C, #D, #E, #F>): kotlin/Int // arrow.core/compareTo|compareTo@arrow.core.Tuple6<0:0,0:1,0:2,0:3,0:4,0:5>(arrow.core.Tuple6<0:0,0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Comparable<0:0>>;1§<kotlin.Comparable<0:1>>;2§<kotlin.Comparable<0:2>>;3§<kotlin.Comparable<0:3>>;4§<kotlin.Comparable<0:4>>;5§<kotlin.Comparable<0:5>>}[0]
final fun <#A: kotlin/Comparable<#A>, #B: kotlin/Comparable<#B>, #C: kotlin/Comparable<#C>, #D: kotlin/Comparable<#D>, #E: kotlin/Comparable<#E>> (arrow.core/Tuple5<#A, #B, #C, #D, #E>).arrow.core/compareTo(arrow.core/Tuple5<#A, #B, #C, #D, #E>): kotlin/Int // arrow.core/compareTo|compareTo@arrow.core.Tuple5<0:0,0:1,0:2,0:3,0:4>(arrow.core.Tuple5<0:0,0:1,0:2,0:3,0:4>){0§<kotlin.Comparable<0:0>>;1§<kotlin.Comparable<0:1>>;2§<kotlin.Comparable<0:2>>;3§<kotlin.Comparable<0:3>>;4§<kotlin.Comparable<0:4>>}[0]
final fun <#A: kotlin/Comparable<#A>, #B: kotlin/Comparable<#B>, #C: kotlin/Comparable<#C>, #D: kotlin/Comparable<#D>> (arrow.core/Tuple4<#A, #B, #C, #D>).arrow.core/compareTo(arrow.core/Tuple4<#A, #B, #C, #D>): kotlin/Int // arrow.core/compareTo|compareTo@arrow.core.Tuple4<0:0,0:1,0:2,0:3>(arrow.core.Tuple4<0:0,0:1,0:2,0:3>){0§<kotlin.Comparable<0:0>>;1§<kotlin.Comparable<0:1>>;2§<kotlin.Comparable<0:2>>;3§<kotlin.Comparable<0:3>>}[0]
final fun <#A: kotlin/Comparable<#A>, #B: kotlin/Comparable<#B>, #C: kotlin/Comparable<#C>> (kotlin/Triple<#A, #B, #C>).arrow.core/compareTo(kotlin/Triple<#A, #B, #C>): kotlin/Int // arrow.core/compareTo|compareTo@kotlin.Triple<0:0,0:1,0:2>(kotlin.Triple<0:0,0:1,0:2>){0§<kotlin.Comparable<0:0>>;1§<kotlin.Comparable<0:1>>;2§<kotlin.Comparable<0:2>>}[0]
final fun <#A: kotlin/Comparable<#A>, #B: kotlin/Comparable<#B>> (arrow.core/Either<#A, #B>).arrow.core/compareTo(arrow.core/Either<#A, #B>): kotlin/Int // arrow.core/compareTo|compareTo@arrow.core.Either<0:0,0:1>(arrow.core.Either<0:0,0:1>){0§<kotlin.Comparable<0:0>>;1§<kotlin.Comparable<0:1>>}[0]
final fun <#A: kotlin/Comparable<#A>, #B: kotlin/Comparable<#B>> (arrow.core/Ior<#A, #B>).arrow.core/compareTo(arrow.core/Ior<#A, #B>): kotlin/Int // arrow.core/compareTo|compareTo@arrow.core.Ior<0:0,0:1>(arrow.core.Ior<0:0,0:1>){0§<kotlin.Comparable<0:0>>;1§<kotlin.Comparable<0:1>>}[0]
final fun <#A: kotlin/Comparable<#A>, #B: kotlin/Comparable<#B>> (kotlin/Pair<#A, #B>).arrow.core/compareTo(kotlin/Pair<#A, #B>): kotlin/Int // arrow.core/compareTo|compareTo@kotlin.Pair<0:0,0:1>(kotlin.Pair<0:0,0:1>){0§<kotlin.Comparable<0:0>>;1§<kotlin.Comparable<0:1>>}[0]
final fun <#A: kotlin/Comparable<#A>> (arrow.core/NonEmptyList<#A>).arrow.core/compareTo(arrow.core/NonEmptyList<#A>): kotlin/Int // arrow.core/compareTo|compareTo@arrow.core.NonEmptyList<0:0>(arrow.core.NonEmptyList<0:0>){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (arrow.core/Option<#A>).arrow.core/compareTo(arrow.core/Option<#A>): kotlin/Int // arrow.core/compareTo|compareTo@arrow.core.Option<0:0>(arrow.core.Option<0:0>){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> (kotlin.collections/Iterable<#A>).arrow.core/compareTo(kotlin.collections/Iterable<#A>): kotlin/Int // arrow.core/compareTo|compareTo@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:0>){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> arrow.core/sort(#A, #A): kotlin/Pair<#A, #A> // arrow.core/sort|sort(0:0;0:0){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> arrow.core/sort(#A, #A, #A): kotlin/Triple<#A, #A, #A> // arrow.core/sort|sort(0:0;0:0;0:0){0§<kotlin.Comparable<0:0>>}[0]
final fun <#A: kotlin/Comparable<#A>> arrow.core/sort(#A, kotlin/Array<out #A>...): kotlin.collections/List<#A> // arrow.core/sort|sort(0:0;kotlin.Array<out|0:0>...){0§<kotlin.Comparable<0:0>>}[0]
final fun arrow.core/NonFatal(kotlin/Throwable): kotlin/Boolean // arrow.core/NonFatal|NonFatal(kotlin.Throwable){}[0]
final fun arrow.core/sort(kotlin/Byte, kotlin/Byte): kotlin/Pair<kotlin/Byte, kotlin/Byte> // arrow.core/sort|sort(kotlin.Byte;kotlin.Byte){}[0]
final fun arrow.core/sort(kotlin/Byte, kotlin/Byte, kotlin/Byte): kotlin/Triple<kotlin/Byte, kotlin/Byte, kotlin/Byte> // arrow.core/sort|sort(kotlin.Byte;kotlin.Byte;kotlin.Byte){}[0]
final fun arrow.core/sort(kotlin/Byte, kotlin/ByteArray...): kotlin.collections/List<kotlin/Byte> // arrow.core/sort|sort(kotlin.Byte;kotlin.ByteArray...){}[0]
final fun arrow.core/sort(kotlin/Int, kotlin/Int): kotlin/Pair<kotlin/Int, kotlin/Int> // arrow.core/sort|sort(kotlin.Int;kotlin.Int){}[0]
final fun arrow.core/sort(kotlin/Int, kotlin/Int, kotlin/Int): kotlin/Triple<kotlin/Int, kotlin/Int, kotlin/Int> // arrow.core/sort|sort(kotlin.Int;kotlin.Int;kotlin.Int){}[0]
final fun arrow.core/sort(kotlin/Int, kotlin/IntArray...): kotlin.collections/List<kotlin/Int> // arrow.core/sort|sort(kotlin.Int;kotlin.IntArray...){}[0]
final fun arrow.core/sort(kotlin/Long, kotlin/Long): kotlin/Pair<kotlin/Long, kotlin/Long> // arrow.core/sort|sort(kotlin.Long;kotlin.Long){}[0]
final fun arrow.core/sort(kotlin/Long, kotlin/Long, kotlin/Long): kotlin/Triple<kotlin/Long, kotlin/Long, kotlin/Long> // arrow.core/sort|sort(kotlin.Long;kotlin.Long;kotlin.Long){}[0]
final fun arrow.core/sort(kotlin/Long, kotlin/LongArray...): kotlin.collections/List<kotlin/Long> // arrow.core/sort|sort(kotlin.Long;kotlin.LongArray...){}[0]
final fun arrow.core/sort(kotlin/Short, kotlin/Short): kotlin/Pair<kotlin/Short, kotlin/Short> // arrow.core/sort|sort(kotlin.Short;kotlin.Short){}[0]
final fun arrow.core/sort(kotlin/Short, kotlin/Short, kotlin/Short): kotlin/Triple<kotlin/Short, kotlin/Short, kotlin/Short> // arrow.core/sort|sort(kotlin.Short;kotlin.Short;kotlin.Short){}[0]
final fun arrow.core/sort(kotlin/Short, kotlin/ShortArray...): kotlin.collections/List<kotlin/Short> // arrow.core/sort|sort(kotlin.Short;kotlin.ShortArray...){}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any> (arrow.core.raise/Raise<#A>).arrow.core.raise/ensureNotNull(#B?, kotlin/Function0<#A>): #B // arrow.core.raise/ensureNotNull|ensureNotNull@arrow.core.raise.Raise<0:0>(0:1?;kotlin.Function0<0:0>){0§<kotlin.Any?>;1§<kotlin.Any>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?, #L: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/zip(kotlin.collections/Map<#A, #C>, kotlin.collections/Map<#A, #D>, kotlin.collections/Map<#A, #E>, kotlin.collections/Map<#A, #F>, kotlin.collections/Map<#A, #G>, kotlin.collections/Map<#A, #H>, kotlin.collections/Map<#A, #I>, kotlin.collections/Map<#A, #J>, kotlin.collections/Map<#A, #K>, kotlin/Function11<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K, #L>): kotlin.collections/Map<#A, #L> // arrow.core/zip|zip@kotlin.collections.Map<0:0,0:1>(kotlin.collections.Map<0:0,0:2>;kotlin.collections.Map<0:0,0:3>;kotlin.collections.Map<0:0,0:4>;kotlin.collections.Map<0:0,0:5>;kotlin.collections.Map<0:0,0:6>;kotlin.collections.Map<0:0,0:7>;kotlin.collections.Map<0:0,0:8>;kotlin.collections.Map<0:0,0:9>;kotlin.collections.Map<0:0,0:10>;kotlin.Function11<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.core.raise/zipOrAccumulate(kotlin/Function2<#A, #A, #A>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #D>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #E>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #F>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #G>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #H>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #I>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #J>, kotlin/Function9<#B, #C, #D, #E, #F, #G, #H, #I, #J, #K>): #K // arrow.core.raise/zipOrAccumulate|zipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.Function2<0:0,0:0,0:0>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:3>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:4>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:5>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:6>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:7>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:8>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:9>;kotlin.Function9<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.core.raise/zipOrAccumulate(kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #D>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #E>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #F>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #G>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #H>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #I>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #J>, kotlin/Function9<#B, #C, #D, #E, #F, #G, #H, #I, #J, #K>): #K // arrow.core.raise/zipOrAccumulate|zipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:3>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:4>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:5>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:6>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:7>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:8>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:9>;kotlin.Function9<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/zip(kotlin.collections/Iterable<#B>, kotlin.collections/Iterable<#C>, kotlin.collections/Iterable<#D>, kotlin.collections/Iterable<#E>, kotlin.collections/Iterable<#F>, kotlin.collections/Iterable<#G>, kotlin.collections/Iterable<#H>, kotlin.collections/Iterable<#I>, kotlin.collections/Iterable<#J>, kotlin/Function10<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K>): kotlin.collections/List<#K> // arrow.core/zip|zip@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>;kotlin.collections.Iterable<0:2>;kotlin.collections.Iterable<0:3>;kotlin.collections.Iterable<0:4>;kotlin.collections.Iterable<0:5>;kotlin.collections.Iterable<0:6>;kotlin.collections.Iterable<0:7>;kotlin.collections.Iterable<0:8>;kotlin.collections.Iterable<0:9>;kotlin.Function10<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/zip(kotlin.collections/Map<#A, #C>, kotlin.collections/Map<#A, #D>, kotlin.collections/Map<#A, #E>, kotlin.collections/Map<#A, #F>, kotlin.collections/Map<#A, #G>, kotlin.collections/Map<#A, #H>, kotlin.collections/Map<#A, #I>, kotlin.collections/Map<#A, #J>, kotlin/Function10<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K>): kotlin.collections/Map<#A, #K> // arrow.core/zip|zip@kotlin.collections.Map<0:0,0:1>(kotlin.collections.Map<0:0,0:2>;kotlin.collections.Map<0:0,0:3>;kotlin.collections.Map<0:0,0:4>;kotlin.collections.Map<0:0,0:5>;kotlin.collections.Map<0:0,0:6>;kotlin.collections.Map<0:0,0:7>;kotlin.collections.Map<0:0,0:8>;kotlin.collections.Map<0:0,0:9>;kotlin.Function10<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.core.raise/zipOrAccumulate(kotlin/Function2<#A, #A, #A>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #D>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #E>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #F>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #G>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #H>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #I>, kotlin/Function8<#B, #C, #D, #E, #F, #G, #H, #I, #J>): #J // arrow.core.raise/zipOrAccumulate|zipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.Function2<0:0,0:0,0:0>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:3>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:4>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:5>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:6>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:7>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:8>;kotlin.Function8<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.core.raise/zipOrAccumulate(kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #D>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #E>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #F>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #G>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #H>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #I>, kotlin/Function8<#B, #C, #D, #E, #F, #G, #H, #I, #J>): #J // arrow.core.raise/zipOrAccumulate|zipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:3>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:4>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:5>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:6>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:7>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:8>;kotlin.Function8<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/zip(kotlin.collections/Iterable<#B>, kotlin.collections/Iterable<#C>, kotlin.collections/Iterable<#D>, kotlin.collections/Iterable<#E>, kotlin.collections/Iterable<#F>, kotlin.collections/Iterable<#G>, kotlin.collections/Iterable<#H>, kotlin.collections/Iterable<#I>, kotlin/Function9<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J>): kotlin.collections/List<#J> // arrow.core/zip|zip@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>;kotlin.collections.Iterable<0:2>;kotlin.collections.Iterable<0:3>;kotlin.collections.Iterable<0:4>;kotlin.collections.Iterable<0:5>;kotlin.collections.Iterable<0:6>;kotlin.collections.Iterable<0:7>;kotlin.collections.Iterable<0:8>;kotlin.Function9<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/zip(kotlin.collections/Map<#A, #C>, kotlin.collections/Map<#A, #D>, kotlin.collections/Map<#A, #E>, kotlin.collections/Map<#A, #F>, kotlin.collections/Map<#A, #G>, kotlin.collections/Map<#A, #H>, kotlin.collections/Map<#A, #I>, kotlin/Function9<#A, #B, #C, #D, #E, #F, #G, #H, #I, #J>): kotlin.collections/Map<#A, #J> // arrow.core/zip|zip@kotlin.collections.Map<0:0,0:1>(kotlin.collections.Map<0:0,0:2>;kotlin.collections.Map<0:0,0:3>;kotlin.collections.Map<0:0,0:4>;kotlin.collections.Map<0:0,0:5>;kotlin.collections.Map<0:0,0:6>;kotlin.collections.Map<0:0,0:7>;kotlin.collections.Map<0:0,0:8>;kotlin.Function9<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.core.raise/zipOrAccumulate(kotlin/Function2<#A, #A, #A>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #D>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #E>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #F>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #G>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #H>, kotlin/Function7<#B, #C, #D, #E, #F, #G, #H, #I>): #I // arrow.core.raise/zipOrAccumulate|zipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.Function2<0:0,0:0,0:0>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:3>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:4>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:5>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:6>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:7>;kotlin.Function7<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.core.raise/zipOrAccumulate(kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #D>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #E>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #F>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #G>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #H>, kotlin/Function7<#B, #C, #D, #E, #F, #G, #H, #I>): #I // arrow.core.raise/zipOrAccumulate|zipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:3>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:4>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:5>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:6>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:7>;kotlin.Function7<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/zip(kotlin.collections/Iterable<#B>, kotlin.collections/Iterable<#C>, kotlin.collections/Iterable<#D>, kotlin.collections/Iterable<#E>, kotlin.collections/Iterable<#F>, kotlin.collections/Iterable<#G>, kotlin.collections/Iterable<#H>, kotlin/Function8<#A, #B, #C, #D, #E, #F, #G, #H, #I>): kotlin.collections/List<#I> // arrow.core/zip|zip@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>;kotlin.collections.Iterable<0:2>;kotlin.collections.Iterable<0:3>;kotlin.collections.Iterable<0:4>;kotlin.collections.Iterable<0:5>;kotlin.collections.Iterable<0:6>;kotlin.collections.Iterable<0:7>;kotlin.Function8<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/zip(kotlin.collections/Map<#A, #C>, kotlin.collections/Map<#A, #D>, kotlin.collections/Map<#A, #E>, kotlin.collections/Map<#A, #F>, kotlin.collections/Map<#A, #G>, kotlin.collections/Map<#A, #H>, kotlin/Function8<#A, #B, #C, #D, #E, #F, #G, #H, #I>): kotlin.collections/Map<#A, #I> // arrow.core/zip|zip@kotlin.collections.Map<0:0,0:1>(kotlin.collections.Map<0:0,0:2>;kotlin.collections.Map<0:0,0:3>;kotlin.collections.Map<0:0,0:4>;kotlin.collections.Map<0:0,0:5>;kotlin.collections.Map<0:0,0:6>;kotlin.collections.Map<0:0,0:7>;kotlin.Function8<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.core.raise/zipOrAccumulate(kotlin/Function2<#A, #A, #A>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #D>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #E>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #F>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #G>, kotlin/Function6<#B, #C, #D, #E, #F, #G, #H>): #H // arrow.core.raise/zipOrAccumulate|zipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.Function2<0:0,0:0,0:0>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:3>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:4>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:5>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:6>;kotlin.Function6<0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.core.raise/zipOrAccumulate(kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #D>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #E>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #F>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #G>, kotlin/Function6<#B, #C, #D, #E, #F, #G, #H>): #H // arrow.core.raise/zipOrAccumulate|zipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:3>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:4>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:5>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:6>;kotlin.Function6<0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/zip(kotlin.collections/Iterable<#B>, kotlin.collections/Iterable<#C>, kotlin.collections/Iterable<#D>, kotlin.collections/Iterable<#E>, kotlin.collections/Iterable<#F>, kotlin.collections/Iterable<#G>, kotlin/Function7<#A, #B, #C, #D, #E, #F, #G, #H>): kotlin.collections/List<#H> // arrow.core/zip|zip@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>;kotlin.collections.Iterable<0:2>;kotlin.collections.Iterable<0:3>;kotlin.collections.Iterable<0:4>;kotlin.collections.Iterable<0:5>;kotlin.collections.Iterable<0:6>;kotlin.Function7<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/zip(kotlin.collections/Map<#A, #C>, kotlin.collections/Map<#A, #D>, kotlin.collections/Map<#A, #E>, kotlin.collections/Map<#A, #F>, kotlin.collections/Map<#A, #G>, kotlin/Function7<#A, #B, #C, #D, #E, #F, #G, #H>): kotlin.collections/Map<#A, #H> // arrow.core/zip|zip@kotlin.collections.Map<0:0,0:1>(kotlin.collections.Map<0:0,0:2>;kotlin.collections.Map<0:0,0:3>;kotlin.collections.Map<0:0,0:4>;kotlin.collections.Map<0:0,0:5>;kotlin.collections.Map<0:0,0:6>;kotlin.Function7<0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.core.raise/zipOrAccumulate(kotlin/Function2<#A, #A, #A>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #D>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #E>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #F>, kotlin/Function5<#B, #C, #D, #E, #F, #G>): #G // arrow.core.raise/zipOrAccumulate|zipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.Function2<0:0,0:0,0:0>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:3>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:4>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:5>;kotlin.Function5<0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.core.raise/zipOrAccumulate(kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #D>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #E>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #F>, kotlin/Function5<#B, #C, #D, #E, #F, #G>): #G // arrow.core.raise/zipOrAccumulate|zipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:3>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:4>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:5>;kotlin.Function5<0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/zip(kotlin.collections/Iterable<#B>, kotlin.collections/Iterable<#C>, kotlin.collections/Iterable<#D>, kotlin.collections/Iterable<#E>, kotlin.collections/Iterable<#F>, kotlin/Function6<#A, #B, #C, #D, #E, #F, #G>): kotlin.collections/List<#G> // arrow.core/zip|zip@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>;kotlin.collections.Iterable<0:2>;kotlin.collections.Iterable<0:3>;kotlin.collections.Iterable<0:4>;kotlin.collections.Iterable<0:5>;kotlin.Function6<0:0,0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/zip(kotlin.collections/Map<#A, #C>, kotlin.collections/Map<#A, #D>, kotlin.collections/Map<#A, #E>, kotlin.collections/Map<#A, #F>, kotlin/Function6<#A, #B, #C, #D, #E, #F, #G>): kotlin.collections/Map<#A, #G> // arrow.core/zip|zip@kotlin.collections.Map<0:0,0:1>(kotlin.collections.Map<0:0,0:2>;kotlin.collections.Map<0:0,0:3>;kotlin.collections.Map<0:0,0:4>;kotlin.collections.Map<0:0,0:5>;kotlin.Function6<0:0,0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.core.raise/zipOrAccumulate(kotlin/Function2<#A, #A, #A>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #D>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #E>, kotlin/Function4<#B, #C, #D, #E, #F>): #F // arrow.core.raise/zipOrAccumulate|zipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.Function2<0:0,0:0,0:0>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:3>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:4>;kotlin.Function4<0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.core.raise/zipOrAccumulate(kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #D>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #E>, kotlin/Function4<#B, #C, #D, #E, #F>): #F // arrow.core.raise/zipOrAccumulate|zipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:3>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:4>;kotlin.Function4<0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/zip(kotlin.collections/Iterable<#B>, kotlin.collections/Iterable<#C>, kotlin.collections/Iterable<#D>, kotlin.collections/Iterable<#E>, kotlin/Function5<#A, #B, #C, #D, #E, #F>): kotlin.collections/List<#F> // arrow.core/zip|zip@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>;kotlin.collections.Iterable<0:2>;kotlin.collections.Iterable<0:3>;kotlin.collections.Iterable<0:4>;kotlin.Function5<0:0,0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/zip(kotlin.collections/Map<#A, #C>, kotlin.collections/Map<#A, #D>, kotlin.collections/Map<#A, #E>, kotlin/Function5<#A, #B, #C, #D, #E, #F>): kotlin.collections/Map<#A, #F> // arrow.core/zip|zip@kotlin.collections.Map<0:0,0:1>(kotlin.collections.Map<0:0,0:2>;kotlin.collections.Map<0:0,0:3>;kotlin.collections.Map<0:0,0:4>;kotlin.Function5<0:0,0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.core.raise/zipOrAccumulate(kotlin/Function2<#A, #A, #A>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #D>, kotlin/Function3<#B, #C, #D, #E>): #E // arrow.core.raise/zipOrAccumulate|zipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.Function2<0:0,0:0,0:0>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:3>;kotlin.Function3<0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.core.raise/zipOrAccumulate(kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #D>, kotlin/Function3<#B, #C, #D, #E>): #E // arrow.core.raise/zipOrAccumulate|zipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:3>;kotlin.Function3<0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/zip(kotlin.collections/Iterable<#B>, kotlin.collections/Iterable<#C>, kotlin.collections/Iterable<#D>, kotlin/Function4<#A, #B, #C, #D, #E>): kotlin.collections/List<#E> // arrow.core/zip|zip@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>;kotlin.collections.Iterable<0:2>;kotlin.collections.Iterable<0:3>;kotlin.Function4<0:0,0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/zip(kotlin.collections/Map<#A, #C>, kotlin.collections/Map<#A, #D>, kotlin/Function4<#A, #B, #C, #D, #E>): kotlin.collections/Map<#A, #E> // arrow.core/zip|zip@kotlin.collections.Map<0:0,0:1>(kotlin.collections.Map<0:0,0:2>;kotlin.collections.Map<0:0,0:3>;kotlin.Function4<0:0,0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.core.raise/zipOrAccumulate(kotlin/Function2<#A, #A, #A>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function2<#B, #C, #D>): #D // arrow.core.raise/zipOrAccumulate|zipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.Function2<0:0,0:0,0:0>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function2<0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (arrow.core.raise/Raise<#B>).arrow.core.raise/mapOrAccumulate(kotlin.collections/Map<#A, #C>, kotlin/Function2<#B, #B, #B>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#B>, kotlin.collections/Map.Entry<#A, #C>, #D>): kotlin.collections/Map<#A, #D> // arrow.core.raise/mapOrAccumulate|mapOrAccumulate@arrow.core.raise.Raise<0:1>(kotlin.collections.Map<0:0,0:2>;kotlin.Function2<0:1,0:1,0:1>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:1>,kotlin.collections.Map.Entry<0:0,0:2>,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.core.raise/zipOrAccumulate(kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #B>, kotlin/Function1<arrow.core.raise/RaiseAccumulate<#A>, #C>, kotlin/Function2<#B, #C, #D>): #D // arrow.core.raise/zipOrAccumulate|zipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:1>;kotlin.Function1<arrow.core.raise.RaiseAccumulate<0:0>,0:2>;kotlin.Function2<0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#B>>).arrow.core.raise/mapOrAccumulate(kotlin.collections/Map<#A, #C>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#B>, kotlin.collections/Map.Entry<#A, #C>, #D>): kotlin.collections/Map<#A, #D> // arrow.core.raise/mapOrAccumulate|mapOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:1>>(kotlin.collections.Map<0:0,0:2>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:1>,kotlin.collections.Map.Entry<0:0,0:2>,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/zip(kotlin.collections/Iterable<#B>, kotlin.collections/Iterable<#C>, kotlin/Function3<#A, #B, #C, #D>): kotlin.collections/List<#D> // arrow.core/zip|zip@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>;kotlin.collections.Iterable<0:2>;kotlin.Function3<0:0,0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/padZip(kotlin.collections/Map<#A, #C>, kotlin/Function2<#A, #B, #D>, kotlin/Function2<#A, #C, #D>, kotlin/Function3<#A, #B, #C, #D>): kotlin.collections/Map<#A, #D> // arrow.core/padZip|padZip@kotlin.collections.Map<0:0,0:1>(kotlin.collections.Map<0:0,0:2>;kotlin.Function2<0:0,0:1,0:3>;kotlin.Function2<0:0,0:2,0:3>;kotlin.Function3<0:0,0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/zip(kotlin.collections/Map<#A, #C>, kotlin/Function3<#A, #B, #C, #D>): kotlin.collections/Map<#A, #D> // arrow.core/zip|zip@kotlin.collections.Map<0:0,0:1>(kotlin.collections.Map<0:0,0:2>;kotlin.Function3<0:0,0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (kotlin.collections/Map<#A, #C>).arrow.core/mapOrAccumulate(kotlin/Function2<#B, #B, #B>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#B>, kotlin.collections/Map.Entry<#A, #C>, #D>): arrow.core/Either<#B, kotlin.collections/Map<#A, #D>> // arrow.core/mapOrAccumulate|mapOrAccumulate@kotlin.collections.Map<0:0,0:2>(kotlin.Function2<0:1,0:1,0:1>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:1>,kotlin.collections.Map.Entry<0:0,0:2>,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (kotlin.collections/Map<#A, #C>).arrow.core/mapOrAccumulate(kotlin/Function2<arrow.core.raise/RaiseAccumulate<#B>, kotlin.collections/Map.Entry<#A, #C>, #D>): arrow.core/Either<arrow.core/NonEmptyList<#B>, kotlin.collections/Map<#A, #D>> // arrow.core/mapOrAccumulate|mapOrAccumulate@kotlin.collections.Map<0:0,0:2>(kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:1>,kotlin.collections.Map.Entry<0:0,0:2>,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (kotlin.collections/Map<#A, #D>).arrow.core/unalign(kotlin/Function1<kotlin.collections/Map.Entry<#A, #D>, arrow.core/Ior<#B, #C>>): kotlin/Pair<kotlin.collections/Map<#A, #B>, kotlin.collections/Map<#A, #C>> // arrow.core/unalign|unalign@kotlin.collections.Map<0:0,0:3>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:3>,arrow.core.Ior<0:1,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (kotlin.collections/Map<#A, #D>).arrow.core/unzip(kotlin/Function1<kotlin.collections/Map.Entry<#A, #D>, kotlin/Pair<#B, #C>>): kotlin/Pair<kotlin.collections/Map<#A, #B>, kotlin.collections/Map<#A, #C>> // arrow.core/unzip|unzip@kotlin.collections.Map<0:0,0:3>(kotlin.Function1<kotlin.collections.Map.Entry<0:0,0:3>,kotlin.Pair<0:1,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.core.raise/mapOrAccumulate(kotlin.collections/Iterable<#B>, kotlin/Function2<#A, #A, #A>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, #C>): kotlin.collections/List<#C> // arrow.core.raise/mapOrAccumulate|mapOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.collections.Iterable<0:1>;kotlin.Function2<0:0,0:0,0:0>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.core.raise/mapOrAccumulate(kotlin.sequences/Sequence<#B>, kotlin/Function2<#A, #A, #A>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, #C>): kotlin.collections/List<#C> // arrow.core.raise/mapOrAccumulate|mapOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.sequences.Sequence<0:1>;kotlin.Function2<0:0,0:0,0:0>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.core.raise/withError(kotlin/Function1<#B, #A>, kotlin/Function1<arrow.core.raise/Raise<#B>, #C>): #C // arrow.core.raise/withError|withError@arrow.core.raise.Raise<0:0>(kotlin.Function1<0:1,0:0>;kotlin.Function1<arrow.core.raise.Raise<0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.core.raise/mapOrAccumulate(arrow.core/NonEmptyList<#B>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, #C>): arrow.core/NonEmptyList<#C> // arrow.core.raise/mapOrAccumulate|mapOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(arrow.core.NonEmptyList<0:1>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.core.raise/mapOrAccumulate(arrow.core/NonEmptySet<#B>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, #C>): arrow.core/NonEmptySet<#C> // arrow.core.raise/mapOrAccumulate|mapOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(arrow.core.NonEmptySet<0:1>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.core.raise/mapOrAccumulate(kotlin.collections/Iterable<#B>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, #C>): kotlin.collections/List<#C> // arrow.core.raise/mapOrAccumulate|mapOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.collections.Iterable<0:1>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.core.raise/mapOrAccumulate(kotlin.sequences/Sequence<#B>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, #C>): kotlin.collections/List<#C> // arrow.core.raise/mapOrAccumulate|mapOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.sequences.Sequence<0:1>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (arrow.core/Either<#A, #B>).arrow.core/flatMap(kotlin/Function1<#B, arrow.core/Either<#A, #C>>): arrow.core/Either<#A, #C> // arrow.core/flatMap|flatMap@arrow.core.Either<0:0,0:1>(kotlin.Function1<0:1,arrow.core.Either<0:0,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (arrow.core/Either<#A, #C>).arrow.core/recover(kotlin/Function2<arrow.core.raise/Raise<#B>, #A, #C>): arrow.core/Either<#B, #C> // arrow.core/recover|recover@arrow.core.Either<0:0,0:2>(kotlin.Function2<arrow.core.raise.Raise<0:1>,0:0,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (arrow.core/Ior<#A, #B>).arrow.core/flatMap(kotlin/Function2<#A, #A, #A>, kotlin/Function1<#B, arrow.core/Ior<#A, #C>>): arrow.core/Ior<#A, #C> // arrow.core/flatMap|flatMap@arrow.core.Ior<0:0,0:1>(kotlin.Function2<0:0,0:0,0:0>;kotlin.Function1<0:1,arrow.core.Ior<0:0,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (arrow.core/NonEmptyList<#B>).arrow.core/mapOrAccumulate(kotlin/Function2<#A, #A, #A>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, #C>): arrow.core/Either<#A, arrow.core/NonEmptyList<#C>> // arrow.core/mapOrAccumulate|mapOrAccumulate@arrow.core.NonEmptyList<0:1>(kotlin.Function2<0:0,0:0,0:0>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (arrow.core/NonEmptyList<#B>).arrow.core/mapOrAccumulate(kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, #C>): arrow.core/Either<arrow.core/NonEmptyList<#A>, arrow.core/NonEmptyList<#C>> // arrow.core/mapOrAccumulate|mapOrAccumulate@arrow.core.NonEmptyList<0:1>(kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/align(kotlin.collections/Iterable<#B>, kotlin/Function1<arrow.core/Ior<#A, #B>, #C>): kotlin.collections/List<#C> // arrow.core/align|align@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>;kotlin.Function1<arrow.core.Ior<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/leftPadZip(kotlin.collections/Iterable<#B>, kotlin/Function2<#A?, #B, #C>): kotlin.collections/List<#C> // arrow.core/leftPadZip|leftPadZip@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>;kotlin.Function2<0:0?,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/padZip(kotlin.collections/Iterable<#B>, kotlin/Function1<#A, #C>, kotlin/Function1<#B, #C>, kotlin/Function2<#A, #B, #C>): kotlin.collections/List<#C> // arrow.core/padZip|padZip@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>;kotlin.Function1<0:0,0:2>;kotlin.Function1<0:1,0:2>;kotlin.Function2<0:0,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/padZip(kotlin.collections/Iterable<#B>, kotlin/Function2<#A?, #B?, #C>): kotlin.collections/List<#C> // arrow.core/padZip|padZip@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>;kotlin.Function2<0:0?,0:1?,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/rightPadZip(kotlin.collections/Iterable<#B>, kotlin/Function2<#A, #B?, #C>): kotlin.collections/List<#C> // arrow.core/rightPadZip|rightPadZip@kotlin.collections.Iterable<0:0>(kotlin.collections.Iterable<0:1>;kotlin.Function2<0:0,0:1?,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/separateEither(kotlin/Function1<#A, arrow.core/Either<#B, #C>>): kotlin/Pair<kotlin.collections/List<#B>, kotlin.collections/List<#C>> // arrow.core/separateEither|separateEither@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,arrow.core.Either<0:1,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#B>).arrow.core/mapOrAccumulate(kotlin/Function2<#A, #A, #A>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, #C>): arrow.core/Either<#A, kotlin.collections/List<#C>> // arrow.core/mapOrAccumulate|mapOrAccumulate@kotlin.collections.Iterable<0:1>(kotlin.Function2<0:0,0:0,0:0>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#B>).arrow.core/mapOrAccumulate(kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, #C>): arrow.core/Either<arrow.core/NonEmptyList<#A>, kotlin.collections/List<#C>> // arrow.core/mapOrAccumulate|mapOrAccumulate@kotlin.collections.Iterable<0:1>(kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#C>).arrow.core/unalign(kotlin/Function1<#C, arrow.core/Ior<#A, #B>>): kotlin/Pair<kotlin.collections/List<#A?>, kotlin.collections/List<#B?>> // arrow.core/unalign|unalign@kotlin.collections.Iterable<0:2>(kotlin.Function1<0:2,arrow.core.Ior<0:0,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Map<#A, #B>).arrow.core/fold(#C, kotlin/Function2<#C, kotlin.collections/Map.Entry<#A, #B>, #C>): #C // arrow.core/fold|fold@kotlin.collections.Map<0:0,0:1>(0:2;kotlin.Function2<0:2,kotlin.collections.Map.Entry<0:0,0:1>,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/fold(kotlin/Function1<#A, #C>, kotlin/Function1<#B, #C>): #C // arrow.core.raise/fold|fold@kotlin.Function1<arrow.core.raise.Raise<0:0>,0:1>(kotlin.Function1<0:0,0:2>;kotlin.Function1<0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/fold(kotlin/Function1<kotlin/Throwable, #C>, kotlin/Function1<#A, #C>, kotlin/Function1<#B, #C>): #C // arrow.core.raise/fold|fold@kotlin.Function1<arrow.core.raise.Raise<0:0>,0:1>(kotlin.Function1<kotlin.Throwable,0:2>;kotlin.Function1<0:0,0:2>;kotlin.Function1<0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> arrow.core.raise/fold(kotlin/Function1<arrow.core.raise/Raise<#A>, #B>, kotlin/Function1<#A, #C>, kotlin/Function1<#B, #C>): #C // arrow.core.raise/fold|fold(kotlin.Function1<arrow.core.raise.Raise<0:0>,0:1>;kotlin.Function1<0:0,0:2>;kotlin.Function1<0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> arrow.core.raise/fold(kotlin/Function1<arrow.core.raise/Raise<#A>, #B>, kotlin/Function1<kotlin/Throwable, #C>, kotlin/Function1<#A, #C>, kotlin/Function1<#B, #C>): #C // arrow.core.raise/fold|fold(kotlin.Function1<arrow.core.raise.Raise<0:0>,0:1>;kotlin.Function1<kotlin.Throwable,0:2>;kotlin.Function1<0:0,0:2>;kotlin.Function1<0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.core.raise/forEachAccumulating(kotlin.collections/Iterable<#B>, kotlin/Function2<#A, #A, #A>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, kotlin/Unit>) // arrow.core.raise/forEachAccumulating|forEachAccumulating@arrow.core.raise.Raise<0:0>(kotlin.collections.Iterable<0:1>;kotlin.Function2<0:0,0:0,0:0>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.core.raise/forEachAccumulating(kotlin.collections/Iterator<#B>, kotlin/Function2<#A, #A, #A>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, kotlin/Unit>) // arrow.core.raise/forEachAccumulating|forEachAccumulating@arrow.core.raise.Raise<0:0>(kotlin.collections.Iterator<0:1>;kotlin.Function2<0:0,0:0,0:0>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.core.raise/forEachAccumulating(kotlin.sequences/Sequence<#B>, kotlin/Function2<#A, #A, #A>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, kotlin/Unit>) // arrow.core.raise/forEachAccumulating|forEachAccumulating@arrow.core.raise.Raise<0:0>(kotlin.sequences.Sequence<0:1>;kotlin.Function2<0:0,0:0,0:0>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.core.raise/forEachAccumulatingImpl(kotlin.collections/Iterator<#B>, kotlin/Function2<#A, #A, #A>, kotlin/Function3<arrow.core.raise/RaiseAccumulate<#A>, #B, kotlin/Boolean, kotlin/Unit>) // arrow.core.raise/forEachAccumulatingImpl|forEachAccumulatingImpl@arrow.core.raise.Raise<0:0>(kotlin.collections.Iterator<0:1>;kotlin.Function2<0:0,0:0,0:0>;kotlin.Function3<arrow.core.raise.RaiseAccumulate<0:0>,0:1,kotlin.Boolean,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.core.raise/traced(kotlin/Function1<arrow.core.raise/Raise<#A>, #B>, kotlin/Function2<arrow.core.raise/Trace, #A, kotlin/Unit>): #B // arrow.core.raise/traced|traced@arrow.core.raise.Raise<0:0>(kotlin.Function1<arrow.core.raise.Raise<0:0>,0:1>;kotlin.Function2<arrow.core.raise.Trace,0:0,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.core.raise/forEachAccumulating(kotlin.collections/Iterable<#B>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, kotlin/Unit>) // arrow.core.raise/forEachAccumulating|forEachAccumulating@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.collections.Iterable<0:1>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.core.raise/forEachAccumulating(kotlin.collections/Iterator<#B>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, kotlin/Unit>) // arrow.core.raise/forEachAccumulating|forEachAccumulating@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.collections.Iterator<0:1>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.core.raise/forEachAccumulating(kotlin.sequences/Sequence<#B>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #B, kotlin/Unit>) // arrow.core.raise/forEachAccumulating|forEachAccumulating@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.sequences.Sequence<0:1>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<0:0>,0:1,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.core.raise/forEachAccumulatingImpl(kotlin.collections/Iterator<#B>, kotlin/Function3<arrow.core.raise/RaiseAccumulate<#A>, #B, kotlin/Boolean, kotlin/Unit>) // arrow.core.raise/forEachAccumulatingImpl|forEachAccumulatingImpl@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.collections.Iterator<0:1>;kotlin.Function3<arrow.core.raise.RaiseAccumulate<0:0>,0:1,kotlin.Boolean,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core/Either<#A, #B>).arrow.core/getOrElse(kotlin/Function1<#A, #B>): #B // arrow.core/getOrElse|getOrElse@arrow.core.Either<0:0,0:1>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core/Ior<#A, #B>).arrow.core/getOrElse(kotlin/Function1<#A, #B>): #B // arrow.core/getOrElse|getOrElse@arrow.core.Ior<0:0,0:1>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.core/Ior<#A, arrow.core/Ior<#A, #B>>).arrow.core/flatten(kotlin/Function2<#A, #A, #A>): arrow.core/Ior<#A, #B> // arrow.core/flatten|flatten@arrow.core.Ior<0:0,arrow.core.Ior<0:0,0:1>>(kotlin.Function2<0:0,0:0,0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/reduceOrNull(kotlin/Function1<#A, #B>, kotlin/Function2<#B, #A, #B>): #B? // arrow.core/reduceOrNull|reduceOrNull@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,0:1>;kotlin.Function2<0:1,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Either<#A, #B>>).arrow.core/flattenOrAccumulate(kotlin/Function2<#A, #A, #A>): arrow.core/Either<#A, kotlin.collections/List<#B>> // arrow.core/flattenOrAccumulate|flattenOrAccumulate@kotlin.collections.Iterable<arrow.core.Either<0:0,0:1>>(kotlin.Function2<0:0,0:0,0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/List<#A>).arrow.core/reduceRightNull(kotlin/Function1<#A, #B>, kotlin/Function2<#A, #B, #B>): #B? // arrow.core/reduceRightNull|reduceRightNull@kotlin.collections.List<0:0>(kotlin.Function1<0:0,0:1>;kotlin.Function2<0:0,0:1,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/getOrElse(kotlin/Function1<#A, #B>): #B // arrow.core.raise/getOrElse|getOrElse@kotlin.Function1<arrow.core.raise.Raise<0:0>,0:1>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/toOption(kotlin/Function1<#A, arrow.core/Option<#B>>): arrow.core/Option<#B> // arrow.core.raise/toOption|toOption@kotlin.Function1<arrow.core.raise.Raise<0:0>,0:1>(kotlin.Function1<0:0,arrow.core.Option<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/toResult(kotlin/Function1<#A, kotlin/Result<#B>>): kotlin/Result<#B> // arrow.core.raise/toResult|toResult@kotlin.Function1<arrow.core.raise.Raise<0:0>,0:1>(kotlin.Function1<0:0,kotlin.Result<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin/Result<#A>).arrow.core/flatMap(kotlin/Function1<#A, kotlin/Result<#B>>): kotlin/Result<#B> // arrow.core/flatMap|flatMap@kotlin.Result<0:0>(kotlin.Function1<0:0,kotlin.Result<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> arrow.core.raise/eagerEffect(noinline kotlin/Function1<arrow.core.raise/Raise<#A>, #B>): kotlin/Function1<arrow.core.raise/Raise<#A>, #B> // arrow.core.raise/eagerEffect|eagerEffect(kotlin.Function1<arrow.core.raise.Raise<0:0>,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> arrow.core.raise/effect(noinline kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #B>): kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #B> // arrow.core.raise/effect|effect(kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<0:0>,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> arrow.core.raise/either(kotlin/Function1<arrow.core.raise/Raise<#A>, #B>): arrow.core/Either<#A, #B> // arrow.core.raise/either|either(kotlin.Function1<arrow.core.raise.Raise<0:0>,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> arrow.core.raise/ior(noinline kotlin/Function2<#A, #A, #A>, kotlin/Function1<arrow.core.raise/IorRaise<#A>, #B>): arrow.core/Ior<#A, #B> // arrow.core.raise/ior|ior(kotlin.Function2<0:0,0:0,0:0>;kotlin.Function1<arrow.core.raise.IorRaise<0:0>,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> arrow.core.raise/iorNel(noinline kotlin/Function2<arrow.core/NonEmptyList<#A>, arrow.core/NonEmptyList<#A>, arrow.core/NonEmptyList<#A>> = ..., kotlin/Function1<arrow.core.raise/IorRaise<arrow.core/NonEmptyList<#A>>, #B>): arrow.core/Ior<arrow.core/NonEmptyList<#A>, #B> // arrow.core.raise/iorNel|iorNel(kotlin.Function2<arrow.core.NonEmptyList<0:0>,arrow.core.NonEmptyList<0:0>,arrow.core.NonEmptyList<0:0>>;kotlin.Function1<arrow.core.raise.IorRaise<arrow.core.NonEmptyList<0:0>>,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> arrow.core.raise/recover(kotlin/Function1<arrow.core.raise/Raise<#A>, #B>, kotlin/Function1<#A, #B>): #B // arrow.core.raise/recover|recover(kotlin.Function1<arrow.core.raise.Raise<0:0>,0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> arrow.core.raise/recover(kotlin/Function1<arrow.core.raise/Raise<#A>, #B>, kotlin/Function1<#A, #B>, kotlin/Function1<kotlin/Throwable, #B>): #B // arrow.core.raise/recover|recover(kotlin.Function1<arrow.core.raise.Raise<0:0>,0:1>;kotlin.Function1<0:0,0:1>;kotlin.Function1<kotlin.Throwable,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (arrow.core/NonEmptyList<#A>).arrow.core/maxBy(kotlin/Function1<#A, #B>): #A // arrow.core/maxBy|maxBy@arrow.core.NonEmptyList<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Comparable<#B>> (arrow.core/NonEmptyList<#A>).arrow.core/minBy(kotlin/Function1<#A, #B>): #A // arrow.core/minBy|minBy@arrow.core.NonEmptyList<0:0>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Comparable<0:1>>}[0]
final inline fun <#A: kotlin/Any?, #B: reified kotlin/Any?> (kotlin.collections/Map<#A, *>).arrow.core/filterIsInstance(): kotlin.collections/Map<#A, #B> // arrow.core/filterIsInstance|filterIsInstance@kotlin.collections.Map<0:0,*>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: reified kotlin/Throwable, #C: kotlin/Any?> (arrow.core/Either<kotlin/Throwable, #C>).arrow.core/catch(kotlin/Function2<arrow.core.raise/Raise<#A>, #B, #C>): arrow.core/Either<#A, #C> // arrow.core/catch|catch@arrow.core.Either<kotlin.Throwable,0:2>(kotlin.Function2<arrow.core.raise.Raise<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Throwable>;2§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (#A).arrow.core/nel(): arrow.core/NonEmptyList<#A> // arrow.core/nel|nel@0:0(){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.core.raise/ensure(kotlin/Boolean, kotlin/Function0<#A>) // arrow.core.raise/ensure|ensure@arrow.core.raise.Raise<0:0>(kotlin.Boolean;kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (arrow.core/Option<#A>).arrow.core/getOrElse(kotlin/Function0<#A>): #A // arrow.core/getOrElse|getOrElse@arrow.core.Option<0:0>(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (arrow.core/Option<#A>).arrow.core/recover(kotlin/Function1<arrow.core.raise/SingletonRaise<arrow.core/None>, #A>): arrow.core/Option<#A> // arrow.core/recover|recover@arrow.core.Option<0:0>(kotlin.Function1<arrow.core.raise.SingletonRaise<arrow.core.None>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/firstOrNone(kotlin/Function1<#A, kotlin/Boolean>): arrow.core/Option<#A> // arrow.core/firstOrNone|firstOrNone@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/lastOrNone(kotlin/Function1<#A, kotlin/Boolean>): arrow.core/Option<#A> // arrow.core/lastOrNone|lastOrNone@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.core/singleOrNone(kotlin/Function1<#A, kotlin/Boolean>): arrow.core/Option<#A> // arrow.core/singleOrNone|singleOrNone@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> arrow.core.raise/catch(kotlin/Function0<#A>, kotlin/Function1<kotlin/Throwable, #A>): #A // arrow.core.raise/catch|catch(kotlin.Function0<0:0>;kotlin.Function1<kotlin.Throwable,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> arrow.core.raise/merge(kotlin/Function1<arrow.core.raise/Raise<#A>, #A>): #A // arrow.core.raise/merge|merge(kotlin.Function1<arrow.core.raise.Raise<0:0>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> arrow.core.raise/nullable(kotlin/Function1<arrow.core.raise/SingletonRaise<kotlin/Nothing?>, #A>): #A? // arrow.core.raise/nullable|nullable(kotlin.Function1<arrow.core.raise.SingletonRaise<kotlin.Nothing?>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> arrow.core.raise/option(kotlin/Function1<arrow.core.raise/SingletonRaise<arrow.core/None>, #A>): arrow.core/Option<#A> // arrow.core.raise/option|option(kotlin.Function1<arrow.core.raise.SingletonRaise<arrow.core.None>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> arrow.core.raise/result(kotlin/Function1<arrow.core.raise/ResultRaise, #A>): kotlin/Result<#A> // arrow.core.raise/result|result(kotlin.Function1<arrow.core.raise.ResultRaise,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> arrow.core.raise/singleton(kotlin/Function0<#A>, kotlin/Function1<arrow.core.raise/SingletonRaise<#A>, #A>): #A // arrow.core.raise/singleton|singleton(kotlin.Function0<0:0>;kotlin.Function1<arrow.core.raise.SingletonRaise<0:0>,0:0>){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> arrow.core/identity(#A): #A // arrow.core/identity|identity(0:0){0§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (arrow.core/NonEmptyList<#A>).arrow.core/max(): #A // arrow.core/max|max@arrow.core.NonEmptyList<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: kotlin/Comparable<#A>> (arrow.core/NonEmptyList<#A>).arrow.core/min(): #A // arrow.core/min|min@arrow.core.NonEmptyList<0:0>(){0§<kotlin.Comparable<0:0>>}[0]
final inline fun <#A: reified kotlin/Any?> (arrow.core/Option<*>).arrow.core/filterIsInstance(): arrow.core/Option<#A> // arrow.core/filterIsInstance|filterIsInstance@arrow.core.Option<*>(){0§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Throwable, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#B>, #C>).arrow.core.raise/catch(crossinline kotlin.coroutines/SuspendFunction2<arrow.core.raise/Raise<#B>, #A, #C>): kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#B>, #C> // arrow.core.raise/catch|catch@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<0:1>,0:2>(kotlin.coroutines.SuspendFunction2<arrow.core.raise.Raise<0:1>,0:0,0:2>){0§<kotlin.Throwable>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Throwable, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin/Function1<arrow.core.raise/Raise<#B>, #C>).arrow.core.raise/catch(crossinline kotlin/Function2<arrow.core.raise/Raise<#B>, #A, #C>): kotlin/Function1<arrow.core.raise/Raise<#B>, #C> // arrow.core.raise/catch|catch@kotlin.Function1<arrow.core.raise.Raise<0:1>,0:2>(kotlin.Function2<arrow.core.raise.Raise<0:1>,0:0,0:2>){0§<kotlin.Throwable>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Throwable, #B: kotlin/Any?, #C: kotlin/Any?> arrow.core.raise/recover(kotlin/Function1<arrow.core.raise/Raise<#B>, #C>, kotlin/Function1<#B, #C>, kotlin/Function1<#A, #C>): #C // arrow.core.raise/recover|recover(kotlin.Function1<arrow.core.raise.Raise<0:1>,0:2>;kotlin.Function1<0:1,0:2>;kotlin.Function1<0:0,0:2>){0§<kotlin.Throwable>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final inline fun <#A: reified kotlin/Throwable, #B: kotlin/Any?> arrow.core.raise/catch(kotlin/Function0<#B>, kotlin/Function1<#A, #B>): #B // arrow.core.raise/catch|catch(kotlin.Function0<0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Throwable>;1§<kotlin.Any?>}[0]
final inline fun arrow.core.raise/impure(kotlin/Function1<arrow.core.raise/SingletonRaise<kotlin/Unit>, kotlin/Unit>) // arrow.core.raise/impure|impure(kotlin.Function1<arrow.core.raise.SingletonRaise<kotlin.Unit>,kotlin.Unit>){}[0]
final object arrow.core/ArrowCoreInternalException : kotlin/RuntimeException // arrow.core/ArrowCoreInternalException|null[0]
final object arrow.core/EmptyValue { // arrow.core/EmptyValue|null[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?> fold(kotlin/Any?, kotlin/Function0<#B1>, kotlin/Function1<#A1, #B1>): #B1 // arrow.core/EmptyValue.fold|fold(kotlin.Any?;kotlin.Function0<0:1>;kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> combine(kotlin/Any?, #A1, kotlin/Function2<#A1, #A1, #A1>): #A1 // arrow.core/EmptyValue.combine|combine(kotlin.Any?;0:0;kotlin.Function2<0:0,0:0,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> unbox(kotlin/Any?): #A1 // arrow.core/EmptyValue.unbox|unbox(kotlin.Any?){0§<kotlin.Any?>}[0]
}
final object arrow.core/None : arrow.core/Option<kotlin/Nothing> { // arrow.core/None|null[0]
    final fun toString(): kotlin/String // arrow.core/None.toString|toString(){}[0]
}
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/fold(kotlin.coroutines/SuspendFunction1<#A, #C>, kotlin.coroutines/SuspendFunction1<#B, #C>): #C // arrow.core.raise/fold|fold@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<0:0>,0:1>(kotlin.coroutines.SuspendFunction1<0:0,0:2>;kotlin.coroutines.SuspendFunction1<0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/fold(kotlin.coroutines/SuspendFunction1<kotlin/Throwable, #C>, kotlin.coroutines/SuspendFunction1<#A, #C>, kotlin.coroutines/SuspendFunction1<#B, #C>): #C // arrow.core.raise/fold|fold@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<0:0>,0:1>(kotlin.coroutines.SuspendFunction1<kotlin.Throwable,0:2>;kotlin.coroutines.SuspendFunction1<0:0,0:2>;kotlin.coroutines.SuspendFunction1<0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/getOrNull(): #B? // arrow.core.raise/getOrNull|getOrNull@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<0:0>,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/toEither(): arrow.core/Either<#A, #B> // arrow.core.raise/toEither|toEither@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<0:0>,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/toIor(): arrow.core/Ior<#A, #B> // arrow.core.raise/toIor|toIor@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<0:0>,0:1>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/toOption(kotlin.coroutines/SuspendFunction1<#A, arrow.core/Option<#B>>): arrow.core/Option<#B> // arrow.core.raise/toOption|toOption@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<0:0>,0:1>(kotlin.coroutines.SuspendFunction1<0:0,arrow.core.Option<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/toResult(kotlin.coroutines/SuspendFunction1<#A, kotlin/Result<#B>>): kotlin/Result<#B> // arrow.core.raise/toResult|toResult@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<0:0>,0:1>(kotlin.coroutines.SuspendFunction1<0:0,kotlin.Result<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #A>).arrow.core.raise/merge(): #A // arrow.core.raise/merge|merge@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<0:0>,0:0>(){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<arrow.core/None>, #A>).arrow.core/toOption(): arrow.core/Option<#A> // arrow.core/toOption|toOption@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<arrow.core.None>,0:0>(){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<kotlin/Nothing>, #A>).arrow.core.raise/get(): #A // arrow.core.raise/get|get@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<kotlin.Nothing>,0:0>(){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<kotlin/Throwable>, #A>).arrow.core.raise/toResult(): kotlin/Result<#A> // arrow.core.raise/toResult|toResult@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<kotlin.Throwable>,0:0>(){0§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.coroutines/SuspendFunction1<arrow.core.raise/Raise<#A>, #B>).arrow.core.raise/getOrElse(kotlin/Function1<#A, #B>): #B // arrow.core.raise/getOrElse|getOrElse@kotlin.coroutines.SuspendFunction1<arrow.core.raise.Raise<0:0>,0:1>(kotlin.Function1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final value class <#A: kotlin/Any?, #B: kotlin/Any?> arrow.core/AtomicMemoizationCache : arrow.core/MemoizationCache<#A, #B> { // arrow.core/AtomicMemoizationCache|null[0]
    constructor <init>(arrow.atomic/Atomic<kotlin.collections/Map<#A, #B>> = ...) // arrow.core/AtomicMemoizationCache.<init>|<init>(arrow.atomic.Atomic<kotlin.collections.Map<1:0,1:1>>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.core/AtomicMemoizationCache.equals|equals(kotlin.Any?){}[0]
    final fun get(#A): #B? // arrow.core/AtomicMemoizationCache.get|get(1:0){}[0]
    final fun hashCode(): kotlin/Int // arrow.core/AtomicMemoizationCache.hashCode|hashCode(){}[0]
    final fun set(#A, #B): #B // arrow.core/AtomicMemoizationCache.set|set(1:0;1:1){}[0]
    final fun toString(): kotlin/String // arrow.core/AtomicMemoizationCache.toString|toString(){}[0]
}
final value class <#A: out kotlin/Any?> arrow.core/NonEmptyList : arrow.core/NonEmptyCollection<#A>, kotlin.collections/List<#A> { // arrow.core/NonEmptyList|null[0]
    constructor <init>(#A, kotlin.collections/List<#A>) // arrow.core/NonEmptyList.<init>|<init>(1:0;kotlin.collections.List<1:0>){}[0]
    constructor <init>(kotlin.collections/List<#A>) // arrow.core/NonEmptyList.<init>|<init>(kotlin.collections.List<1:0>){}[0]
    final fun <#A1: kotlin/Any?> align(arrow.core/NonEmptyList<#A1>): arrow.core/NonEmptyList<arrow.core/Ior<#A, #A1>> // arrow.core/NonEmptyList.align|align(arrow.core.NonEmptyList<0:0>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> coflatMap(kotlin/Function1<arrow.core/NonEmptyList<#A>, #A1>): arrow.core/NonEmptyList<#A1> // arrow.core/NonEmptyList.coflatMap|coflatMap(kotlin.Function1<arrow.core.NonEmptyList<1:0>,0:0>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> padZip(arrow.core/NonEmptyList<#A1>): arrow.core/NonEmptyList<kotlin/Pair<#A?, #A1?>> // arrow.core/NonEmptyList.padZip|padZip(arrow.core.NonEmptyList<0:0>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> zip(arrow.core/NonEmptyList<#A1>): arrow.core/NonEmptyList<kotlin/Pair<#A, #A1>> // arrow.core/NonEmptyList.zip|zip(arrow.core.NonEmptyList<0:0>){0§<kotlin.Any?>}[0]
    final fun contains(#A): kotlin/Boolean // arrow.core/NonEmptyList.contains|contains(1:0){}[0]
    final fun containsAll(kotlin.collections/Collection<#A>): kotlin/Boolean // arrow.core/NonEmptyList.containsAll|containsAll(kotlin.collections.Collection<1:0>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.core/NonEmptyList.equals|equals(kotlin.Any?){}[0]
    final fun extract(): #A // arrow.core/NonEmptyList.extract|extract(){}[0]
    final fun get(kotlin/Int): #A // arrow.core/NonEmptyList.get|get(kotlin.Int){}[0]
    final fun hashCode(): kotlin/Int // arrow.core/NonEmptyList.hashCode|hashCode(){}[0]
    final fun indexOf(#A): kotlin/Int // arrow.core/NonEmptyList.indexOf|indexOf(1:0){}[0]
    final fun isEmpty(): kotlin/Boolean // arrow.core/NonEmptyList.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<#A> // arrow.core/NonEmptyList.iterator|iterator(){}[0]
    final fun lastIndexOf(#A): kotlin/Int // arrow.core/NonEmptyList.lastIndexOf|lastIndexOf(1:0){}[0]
    final fun lastOrNull(): #A // arrow.core/NonEmptyList.lastOrNull|lastOrNull(){}[0]
    final fun listIterator(): kotlin.collections/ListIterator<#A> // arrow.core/NonEmptyList.listIterator|listIterator(){}[0]
    final fun listIterator(kotlin/Int): kotlin.collections/ListIterator<#A> // arrow.core/NonEmptyList.listIterator|listIterator(kotlin.Int){}[0]
    final fun plus(#A): arrow.core/NonEmptyList<#A> // arrow.core/NonEmptyList.plus|plus(1:0){}[0]
    final fun plus(arrow.core/NonEmptyList<#A>): arrow.core/NonEmptyList<#A> // arrow.core/NonEmptyList.plus|plus(arrow.core.NonEmptyList<1:0>){}[0]
    final fun plus(kotlin.collections/Iterable<#A>): arrow.core/NonEmptyList<#A> // arrow.core/NonEmptyList.plus|plus(kotlin.collections.Iterable<1:0>){}[0]
    final fun subList(kotlin/Int, kotlin/Int): kotlin.collections/List<#A> // arrow.core/NonEmptyList.subList|subList(kotlin.Int;kotlin.Int){}[0]
    final fun toList(): kotlin.collections/List<#A> // arrow.core/NonEmptyList.toList|toList(){}[0]
    final fun toString(): kotlin/String // arrow.core/NonEmptyList.toString|toString(){}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?, #D1: kotlin/Any?, #E1: kotlin/Any?, #F1: kotlin/Any?, #G1: kotlin/Any?, #H1: kotlin/Any?, #I1: kotlin/Any?, #J1: kotlin/Any?> zip(arrow.core/NonEmptyList<#A1>, arrow.core/NonEmptyList<#B1>, arrow.core/NonEmptyList<#C1>, arrow.core/NonEmptyList<#D1>, arrow.core/NonEmptyList<#E1>, arrow.core/NonEmptyList<#F1>, arrow.core/NonEmptyList<#G1>, arrow.core/NonEmptyList<#H1>, arrow.core/NonEmptyList<#I1>, kotlin/Function10<#A, #A1, #B1, #C1, #D1, #E1, #F1, #G1, #H1, #I1, #J1>): arrow.core/NonEmptyList<#J1> // arrow.core/NonEmptyList.zip|zip(arrow.core.NonEmptyList<0:0>;arrow.core.NonEmptyList<0:1>;arrow.core.NonEmptyList<0:2>;arrow.core.NonEmptyList<0:3>;arrow.core.NonEmptyList<0:4>;arrow.core.NonEmptyList<0:5>;arrow.core.NonEmptyList<0:6>;arrow.core.NonEmptyList<0:7>;arrow.core.NonEmptyList<0:8>;kotlin.Function10<1:0,0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?, #D1: kotlin/Any?, #E1: kotlin/Any?, #F1: kotlin/Any?, #G1: kotlin/Any?, #H1: kotlin/Any?, #I1: kotlin/Any?> zip(arrow.core/NonEmptyList<#A1>, arrow.core/NonEmptyList<#B1>, arrow.core/NonEmptyList<#C1>, arrow.core/NonEmptyList<#D1>, arrow.core/NonEmptyList<#E1>, arrow.core/NonEmptyList<#F1>, arrow.core/NonEmptyList<#G1>, arrow.core/NonEmptyList<#H1>, kotlin/Function9<#A, #A1, #B1, #C1, #D1, #E1, #F1, #G1, #H1, #I1>): arrow.core/NonEmptyList<#I1> // arrow.core/NonEmptyList.zip|zip(arrow.core.NonEmptyList<0:0>;arrow.core.NonEmptyList<0:1>;arrow.core.NonEmptyList<0:2>;arrow.core.NonEmptyList<0:3>;arrow.core.NonEmptyList<0:4>;arrow.core.NonEmptyList<0:5>;arrow.core.NonEmptyList<0:6>;arrow.core.NonEmptyList<0:7>;kotlin.Function9<1:0,0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?, #D1: kotlin/Any?, #E1: kotlin/Any?, #F1: kotlin/Any?, #G1: kotlin/Any?, #H1: kotlin/Any?> zip(arrow.core/NonEmptyList<#A1>, arrow.core/NonEmptyList<#B1>, arrow.core/NonEmptyList<#C1>, arrow.core/NonEmptyList<#D1>, arrow.core/NonEmptyList<#E1>, arrow.core/NonEmptyList<#F1>, arrow.core/NonEmptyList<#G1>, kotlin/Function8<#A, #A1, #B1, #C1, #D1, #E1, #F1, #G1, #H1>): arrow.core/NonEmptyList<#H1> // arrow.core/NonEmptyList.zip|zip(arrow.core.NonEmptyList<0:0>;arrow.core.NonEmptyList<0:1>;arrow.core.NonEmptyList<0:2>;arrow.core.NonEmptyList<0:3>;arrow.core.NonEmptyList<0:4>;arrow.core.NonEmptyList<0:5>;arrow.core.NonEmptyList<0:6>;kotlin.Function8<1:0,0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?, #D1: kotlin/Any?, #E1: kotlin/Any?, #F1: kotlin/Any?, #G1: kotlin/Any?> zip(arrow.core/NonEmptyList<#A1>, arrow.core/NonEmptyList<#B1>, arrow.core/NonEmptyList<#C1>, arrow.core/NonEmptyList<#D1>, arrow.core/NonEmptyList<#E1>, arrow.core/NonEmptyList<#F1>, kotlin/Function7<#A, #A1, #B1, #C1, #D1, #E1, #F1, #G1>): arrow.core/NonEmptyList<#G1> // arrow.core/NonEmptyList.zip|zip(arrow.core.NonEmptyList<0:0>;arrow.core.NonEmptyList<0:1>;arrow.core.NonEmptyList<0:2>;arrow.core.NonEmptyList<0:3>;arrow.core.NonEmptyList<0:4>;arrow.core.NonEmptyList<0:5>;kotlin.Function7<1:0,0:0,0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?, #D1: kotlin/Any?, #E1: kotlin/Any?, #F1: kotlin/Any?> zip(arrow.core/NonEmptyList<#A1>, arrow.core/NonEmptyList<#B1>, arrow.core/NonEmptyList<#C1>, arrow.core/NonEmptyList<#D1>, arrow.core/NonEmptyList<#E1>, kotlin/Function6<#A, #A1, #B1, #C1, #D1, #E1, #F1>): arrow.core/NonEmptyList<#F1> // arrow.core/NonEmptyList.zip|zip(arrow.core.NonEmptyList<0:0>;arrow.core.NonEmptyList<0:1>;arrow.core.NonEmptyList<0:2>;arrow.core.NonEmptyList<0:3>;arrow.core.NonEmptyList<0:4>;kotlin.Function6<1:0,0:0,0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?, #D1: kotlin/Any?, #E1: kotlin/Any?> zip(arrow.core/NonEmptyList<#A1>, arrow.core/NonEmptyList<#B1>, arrow.core/NonEmptyList<#C1>, arrow.core/NonEmptyList<#D1>, kotlin/Function5<#A, #A1, #B1, #C1, #D1, #E1>): arrow.core/NonEmptyList<#E1> // arrow.core/NonEmptyList.zip|zip(arrow.core.NonEmptyList<0:0>;arrow.core.NonEmptyList<0:1>;arrow.core.NonEmptyList<0:2>;arrow.core.NonEmptyList<0:3>;kotlin.Function5<1:0,0:0,0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?, #D1: kotlin/Any?> zip(arrow.core/NonEmptyList<#A1>, arrow.core/NonEmptyList<#B1>, arrow.core/NonEmptyList<#C1>, kotlin/Function4<#A, #A1, #B1, #C1, #D1>): arrow.core/NonEmptyList<#D1> // arrow.core/NonEmptyList.zip|zip(arrow.core.NonEmptyList<0:0>;arrow.core.NonEmptyList<0:1>;arrow.core.NonEmptyList<0:2>;kotlin.Function4<1:0,0:0,0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?> zip(arrow.core/NonEmptyList<#A1>, arrow.core/NonEmptyList<#B1>, kotlin/Function3<#A, #A1, #B1, #C1>): arrow.core/NonEmptyList<#C1> // arrow.core/NonEmptyList.zip|zip(arrow.core.NonEmptyList<0:0>;arrow.core.NonEmptyList<0:1>;kotlin.Function3<1:0,0:0,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?> padZip(arrow.core/NonEmptyList<#A1>, kotlin/Function1<#A, #B1>, kotlin/Function1<#A1, #B1>, kotlin/Function2<#A, #A1, #B1>): arrow.core/NonEmptyList<#B1> // arrow.core/NonEmptyList.padZip|padZip(arrow.core.NonEmptyList<0:0>;kotlin.Function1<1:0,0:1>;kotlin.Function1<0:0,0:1>;kotlin.Function2<1:0,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?> zip(arrow.core/NonEmptyList<#A1>, kotlin/Function2<#A, #A1, #B1>): arrow.core/NonEmptyList<#B1> // arrow.core/NonEmptyList.zip|zip(arrow.core.NonEmptyList<0:0>;kotlin.Function2<1:0,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> distinctBy(kotlin/Function1<#A, #A1>): arrow.core/NonEmptyList<#A> // arrow.core/NonEmptyList.distinctBy|distinctBy(kotlin.Function1<1:0,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> flatMap(kotlin/Function1<#A, arrow.core/NonEmptyCollection<#A1>>): arrow.core/NonEmptyList<#A1> // arrow.core/NonEmptyList.flatMap|flatMap(kotlin.Function1<1:0,arrow.core.NonEmptyCollection<0:0>>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> foldLeft(#A1, kotlin/Function2<#A1, #A, #A1>): #A1 // arrow.core/NonEmptyList.foldLeft|foldLeft(0:0;kotlin.Function2<0:0,1:0,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> map(kotlin/Function1<#A, #A1>): arrow.core/NonEmptyList<#A1> // arrow.core/NonEmptyList.map|map(kotlin.Function1<1:0,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> mapIndexed(kotlin/Function2<kotlin/Int, #A, #A1>): arrow.core/NonEmptyList<#A1> // arrow.core/NonEmptyList.mapIndexed|mapIndexed(kotlin.Function2<kotlin.Int,1:0,0:0>){0§<kotlin.Any?>}[0]
    final inline fun distinct(): arrow.core/NonEmptyList<#A> // arrow.core/NonEmptyList.distinct|distinct(){}[0]
    final object Companion { // arrow.core/NonEmptyList.Companion|null[0]
        final val unit // arrow.core/NonEmptyList.Companion.unit|{}unit[0]
            final fun <get-unit>(): arrow.core/NonEmptyList<kotlin/Unit> // arrow.core/NonEmptyList.Companion.unit.<get-unit>|<get-unit>(){}[0]
    }
    final val all // arrow.core/NonEmptyList.all|{}all[0]
        final fun <get-all>(): kotlin.collections/List<#A> // arrow.core/NonEmptyList.all.<get-all>|<get-all>(){}[0]
    final val head // arrow.core/NonEmptyList.head|{}head[0]
        final fun <get-head>(): #A // arrow.core/NonEmptyList.head.<get-head>|<get-head>(){}[0]
    final val size // arrow.core/NonEmptyList.size|{}size[0]
        final fun <get-size>(): kotlin/Int // arrow.core/NonEmptyList.size.<get-size>|<get-size>(){}[0]
    final val tail // arrow.core/NonEmptyList.tail|{}tail[0]
        final fun <get-tail>(): kotlin.collections/List<#A> // arrow.core/NonEmptyList.tail.<get-tail>|<get-tail>(){}[0]
    // Targets: [js]
    final fun asJsReadonlyArrayView(): kotlin.js.collections/JsReadonlyArray<#A> // arrow.core/NonEmptyList.asJsReadonlyArrayView|asJsReadonlyArrayView(){}[0]
}
final value class <#A: out kotlin/Any?> arrow.core/NonEmptySet : arrow.core/NonEmptyCollection<#A>, kotlin.collections/Set<#A> { // arrow.core/NonEmptySet|null[0]
    constructor <init>(#A, kotlin.collections/Iterable<#A>) // arrow.core/NonEmptySet.<init>|<init>(1:0;kotlin.collections.Iterable<1:0>){}[0]
    final fun <#A1: kotlin/Any?> distinctBy(kotlin/Function1<#A, #A1>): arrow.core/NonEmptyList<#A> // arrow.core/NonEmptySet.distinctBy|distinctBy(kotlin.Function1<1:0,0:0>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> flatMap(kotlin/Function1<#A, arrow.core/NonEmptyCollection<#A1>>): arrow.core/NonEmptyList<#A1> // arrow.core/NonEmptySet.flatMap|flatMap(kotlin.Function1<1:0,arrow.core.NonEmptyCollection<0:0>>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> map(kotlin/Function1<#A, #A1>): arrow.core/NonEmptyList<#A1> // arrow.core/NonEmptySet.map|map(kotlin.Function1<1:0,0:0>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> mapIndexed(kotlin/Function2<kotlin/Int, #A, #A1>): arrow.core/NonEmptyList<#A1> // arrow.core/NonEmptySet.mapIndexed|mapIndexed(kotlin.Function2<kotlin.Int,1:0,0:0>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> zip(arrow.core/NonEmptyCollection<#A1>): arrow.core/NonEmptyList<kotlin/Pair<#A, #A1>> // arrow.core/NonEmptySet.zip|zip(arrow.core.NonEmptyCollection<0:0>){0§<kotlin.Any?>}[0]
    final fun contains(#A): kotlin/Boolean // arrow.core/NonEmptySet.contains|contains(1:0){}[0]
    final fun containsAll(kotlin.collections/Collection<#A>): kotlin/Boolean // arrow.core/NonEmptySet.containsAll|containsAll(kotlin.collections.Collection<1:0>){}[0]
    final fun distinct(): arrow.core/NonEmptyList<#A> // arrow.core/NonEmptySet.distinct|distinct(){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.core/NonEmptySet.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.core/NonEmptySet.hashCode|hashCode(){}[0]
    final fun isEmpty(): kotlin/Boolean // arrow.core/NonEmptySet.isEmpty|isEmpty(){}[0]
    final fun iterator(): kotlin.collections/Iterator<#A> // arrow.core/NonEmptySet.iterator|iterator(){}[0]
    final fun lastOrNull(): #A // arrow.core/NonEmptySet.lastOrNull|lastOrNull(){}[0]
    final fun plus(#A): arrow.core/NonEmptySet<#A> // arrow.core/NonEmptySet.plus|plus(1:0){}[0]
    final fun plus(kotlin.collections/Iterable<#A>): arrow.core/NonEmptySet<#A> // arrow.core/NonEmptySet.plus|plus(kotlin.collections.Iterable<1:0>){}[0]
    final fun toString(): kotlin/String // arrow.core/NonEmptySet.toString|toString(){}[0]
    final val elements // arrow.core/NonEmptySet.elements|{}elements[0]
        final fun <get-elements>(): kotlin.collections/Set<#A> // arrow.core/NonEmptySet.elements.<get-elements>|<get-elements>(){}[0]
    final val head // arrow.core/NonEmptySet.head|{}head[0]
        final fun <get-head>(): #A // arrow.core/NonEmptySet.head.<get-head>|<get-head>(){}[0]
    final val size // arrow.core/NonEmptySet.size|{}size[0]
        final fun <get-size>(): kotlin/Int // arrow.core/NonEmptySet.size.<get-size>|<get-size>(){}[0]
    // Targets: [js]
    final fun asJsReadonlySetView(): kotlin.js.collections/JsReadonlySet<#A> // arrow.core/NonEmptySet.asJsReadonlySetView|asJsReadonlySetView(){}[0]
}
final value class arrow.core.raise/Trace { // arrow.core.raise/Trace|null[0]
    constructor <init>(kotlin.coroutines.cancellation/CancellationException) // arrow.core.raise/Trace.<init>|<init>(kotlin.coroutines.cancellation.CancellationException){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.core.raise/Trace.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.core.raise/Trace.hashCode|hashCode(){}[0]
    final fun printStackTrace() // arrow.core.raise/Trace.printStackTrace|printStackTrace(){}[0]
    final fun stackTraceToString(): kotlin/String // arrow.core.raise/Trace.stackTraceToString|stackTraceToString(){}[0]
    final fun suppressedExceptions(): kotlin.collections/List<kotlin/Throwable> // arrow.core.raise/Trace.suppressedExceptions|suppressedExceptions(){}[0]
    final fun toString(): kotlin/String // arrow.core.raise/Trace.toString|toString(){}[0]
}
open annotation class arrow.core.raise/DelicateRaiseApi : kotlin/Annotation { // arrow.core.raise/DelicateRaiseApi|null[0]
    constructor <init>() // arrow.core.raise/DelicateRaiseApi.<init>|<init>(){}[0]
}
open annotation class arrow.core.raise/ExperimentalTraceApi : kotlin/Annotation { // arrow.core.raise/ExperimentalTraceApi|null[0]
    constructor <init>() // arrow.core.raise/ExperimentalTraceApi.<init>|<init>(){}[0]
}
open annotation class arrow.core.raise/RaiseDSL : kotlin/Annotation { // arrow.core.raise/RaiseDSL|null[0]
    constructor <init>() // arrow.core.raise/RaiseDSL.<init>|<init>(){}[0]
}
open class <#A: kotlin/Any?> arrow.core.raise/RaiseAccumulate : arrow.core.raise/Raise<#A> { // arrow.core.raise/RaiseAccumulate|null[0]
    constructor <init>(arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>) // arrow.core.raise/RaiseAccumulate.<init>|<init>(arrow.core.raise.Raise<arrow.core.NonEmptyList<1:0>>){}[0]
    final fun <#A1: kotlin/Any?> (arrow.core/Either<arrow.core/NonEmptyList<#A>, #A1>).bindNel(): #A1 // arrow.core.raise/RaiseAccumulate.bindNel|bindNel@arrow.core.Either<arrow.core.NonEmptyList<1:0>,0:0>(){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (arrow.core/NonEmptyList<#A1>).mapOrAccumulate(kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #A1, #B1>): arrow.core/NonEmptyList<#B1> // arrow.core.raise/RaiseAccumulate.mapOrAccumulate|mapOrAccumulate@arrow.core.NonEmptyList<0:0>(kotlin.Function2<arrow.core.raise.RaiseAccumulate<1:0>,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (arrow.core/NonEmptySet<#A1>).mapOrAccumulate(kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #A1, #B1>): arrow.core/NonEmptySet<#B1> // arrow.core.raise/RaiseAccumulate.mapOrAccumulate|mapOrAccumulate@arrow.core.NonEmptySet<0:0>(kotlin.Function2<arrow.core.raise.RaiseAccumulate<1:0>,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (kotlin.collections/Iterable<#A1>).mapOrAccumulate(kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #A1, #B1>): kotlin.collections/List<#B1> // arrow.core.raise/RaiseAccumulate.mapOrAccumulate|mapOrAccumulate@kotlin.collections.Iterable<0:0>(kotlin.Function2<arrow.core.raise.RaiseAccumulate<1:0>,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?> mapOrAccumulate(arrow.core/NonEmptyList<#A1>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #A1, #B1>): arrow.core/NonEmptyList<#B1> // arrow.core.raise/RaiseAccumulate.mapOrAccumulate|mapOrAccumulate(arrow.core.NonEmptyList<0:0>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<1:0>,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?> mapOrAccumulate(arrow.core/NonEmptySet<#A1>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #A1, #B1>): arrow.core/NonEmptySet<#B1> // arrow.core.raise/RaiseAccumulate.mapOrAccumulate|mapOrAccumulate(arrow.core.NonEmptySet<0:0>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<1:0>,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?> mapOrAccumulate(kotlin.collections/Iterable<#A1>, kotlin/Function2<arrow.core.raise/RaiseAccumulate<#A>, #A1, #B1>): kotlin.collections/List<#B1> // arrow.core.raise/RaiseAccumulate.mapOrAccumulate|mapOrAccumulate(kotlin.collections.Iterable<0:0>;kotlin.Function2<arrow.core.raise.RaiseAccumulate<1:0>,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> withNel(kotlin/Function1<arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>, #A1>): #A1 // arrow.core.raise/RaiseAccumulate.withNel|withNel(kotlin.Function1<arrow.core.raise.Raise<arrow.core.NonEmptyList<1:0>>,0:0>){0§<kotlin.Any?>}[0]
    final val raise // arrow.core.raise/RaiseAccumulate.raise|{}raise[0]
        final fun <get-raise>(): arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>> // arrow.core.raise/RaiseAccumulate.raise.<get-raise>|<get-raise>(){}[0]
    open fun <#A1: kotlin/Any?, #B1: kotlin/Any?> (kotlin.collections/Map<#A1, arrow.core/Either<#A, #B1>>).bindAll(): kotlin.collections/Map<#A1, #B1> // arrow.core.raise/RaiseAccumulate.bindAll|bindAll@kotlin.collections.Map<0:0,arrow.core.Either<1:0,0:1>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    open fun <#A1: kotlin/Any?> (arrow.core/NonEmptyList<arrow.core/Either<#A, #A1>>).bindAll(): arrow.core/NonEmptyList<#A1> // arrow.core.raise/RaiseAccumulate.bindAll|bindAll@arrow.core.NonEmptyList<arrow.core.Either<1:0,0:0>>(){0§<kotlin.Any?>}[0]
    open fun <#A1: kotlin/Any?> (arrow.core/NonEmptySet<arrow.core/Either<#A, #A1>>).bindAll(): arrow.core/NonEmptySet<#A1> // arrow.core.raise/RaiseAccumulate.bindAll|bindAll@arrow.core.NonEmptySet<arrow.core.Either<1:0,0:0>>(){0§<kotlin.Any?>}[0]
    open fun <#A1: kotlin/Any?> (kotlin.collections/Iterable<arrow.core/Either<#A, #A1>>).bindAll(): kotlin.collections/List<#A1> // arrow.core.raise/RaiseAccumulate.bindAll|bindAll@kotlin.collections.Iterable<arrow.core.Either<1:0,0:0>>(){0§<kotlin.Any?>}[0]
    open fun raise(#A): kotlin/Nothing // arrow.core.raise/RaiseAccumulate.raise|raise(1:0){}[0]
}
sealed class <#A: out kotlin/Any?, #B: out kotlin/Any?> arrow.core/Either { // arrow.core/Either|null[0]
    constructor <init>() // arrow.core/Either.<init>|<init>(){}[0]
    final class <#A1: out kotlin/Any?> Left : arrow.core/Either<#A1, kotlin/Nothing> { // arrow.core/Either.Left|null[0]
        constructor <init>(#A1) // arrow.core/Either.Left.<init>|<init>(1:0){}[0]
        final fun component1(): #A1 // arrow.core/Either.Left.component1|component1(){}[0]
        final fun copy(#A1 = ...): arrow.core/Either.Left<#A1> // arrow.core/Either.Left.copy|copy(1:0){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.core/Either.Left.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.core/Either.Left.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // arrow.core/Either.Left.toString|toString(){}[0]
        final object Companion // arrow.core/Either.Left.Companion|null[0]
        final val value // arrow.core/Either.Left.value|{}value[0]
            final fun <get-value>(): #A1 // arrow.core/Either.Left.value.<get-value>|<get-value>(){}[0]
    }
    final class <#A1: out kotlin/Any?> Right : arrow.core/Either<kotlin/Nothing, #A1> { // arrow.core/Either.Right|null[0]
        constructor <init>(#A1) // arrow.core/Either.Right.<init>|<init>(1:0){}[0]
        final fun component1(): #A1 // arrow.core/Either.Right.component1|component1(){}[0]
        final fun copy(#A1 = ...): arrow.core/Either.Right<#A1> // arrow.core/Either.Right.copy|copy(1:0){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.core/Either.Right.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.core/Either.Right.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // arrow.core/Either.Right.toString|toString(){}[0]
        final object Companion { // arrow.core/Either.Right.Companion|null[0]
            final val unit // arrow.core/Either.Right.Companion.unit|{}unit[0]
                final fun <get-unit>(): arrow.core/Either<kotlin/Nothing, kotlin/Unit> // arrow.core/Either.Right.Companion.unit.<get-unit>|<get-unit>(){}[0]
        }
        final val value // arrow.core/Either.Right.value|{}value[0]
            final fun <get-value>(): #A1 // arrow.core/Either.Right.value.<get-value>|<get-value>(){}[0]
    }
    final fun getOrNone(): arrow.core/Option<#B> // arrow.core/Either.getOrNone|getOrNone(){}[0]
    final fun getOrNull(): #B? // arrow.core/Either.getOrNull|getOrNull(){}[0]
    final fun isLeft(): kotlin/Boolean // arrow.core/Either.isLeft|isLeft(){}[0]
    final fun isRight(): kotlin/Boolean // arrow.core/Either.isRight|isRight(){}[0]
    final fun leftOrNull(): #A? // arrow.core/Either.leftOrNull|leftOrNull(){}[0]
    final fun swap(): arrow.core/Either<#B, #A> // arrow.core/Either.swap|swap(){}[0]
    final fun toIor(): arrow.core/Ior<#A, #B> // arrow.core/Either.toIor|toIor(){}[0]
    final inline fun <#A1: kotlin/Any?> fold(kotlin/Function1<#A, #A1>, kotlin/Function1<#B, #A1>): #A1 // arrow.core/Either.fold|fold(kotlin.Function1<1:0,0:0>;kotlin.Function1<1:1,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> map(kotlin/Function1<#B, #A1>): arrow.core/Either<#A, #A1> // arrow.core/Either.map|map(kotlin.Function1<1:1,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> mapLeft(kotlin/Function1<#A, #A1>): arrow.core/Either<#A1, #B> // arrow.core/Either.mapLeft|mapLeft(kotlin.Function1<1:0,0:0>){0§<kotlin.Any?>}[0]
    final inline fun isLeft(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Boolean // arrow.core/Either.isLeft|isLeft(kotlin.Function1<1:0,kotlin.Boolean>){}[0]
    final inline fun isRight(kotlin/Function1<#B, kotlin/Boolean>): kotlin/Boolean // arrow.core/Either.isRight|isRight(kotlin.Function1<1:1,kotlin.Boolean>){}[0]
    final inline fun onLeft(kotlin/Function1<#A, kotlin/Unit>): arrow.core/Either<#A, #B> // arrow.core/Either.onLeft|onLeft(kotlin.Function1<1:0,kotlin.Unit>){}[0]
    final inline fun onRight(kotlin/Function1<#B, kotlin/Unit>): arrow.core/Either<#A, #B> // arrow.core/Either.onRight|onRight(kotlin.Function1<1:1,kotlin.Unit>){}[0]
    final object Companion { // arrow.core/Either.Companion|null[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?, #H2: kotlin/Any?, #I2: kotlin/Any?, #J2: kotlin/Any?, #K2: kotlin/Any?, #L2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, arrow.core/Either<#A2, #D2>, arrow.core/Either<#A2, #E2>, arrow.core/Either<#A2, #F2>, arrow.core/Either<#A2, #G2>, arrow.core/Either<#A2, #H2>, arrow.core/Either<#A2, #I2>, arrow.core/Either<#A2, #J2>, arrow.core/Either<#A2, #K2>, kotlin/Function10<#B2, #C2, #D2, #E2, #F2, #G2, #H2, #I2, #J2, #K2, #L2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #L2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;arrow.core.Either<0:0,0:3>;arrow.core.Either<0:0,0:4>;arrow.core.Either<0:0,0:5>;arrow.core.Either<0:0,0:6>;arrow.core.Either<0:0,0:7>;arrow.core.Either<0:0,0:8>;arrow.core.Either<0:0,0:9>;arrow.core.Either<0:0,0:10>;kotlin.Function10<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?, #H2: kotlin/Any?, #I2: kotlin/Any?, #J2: kotlin/Any?, #K2: kotlin/Any?, #L2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<arrow.core/NonEmptyList<#A2>, #B2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #C2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #D2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #E2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #F2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #G2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #H2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #I2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #J2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #K2>, kotlin/Function10<#B2, #C2, #D2, #E2, #F2, #G2, #H2, #I2, #J2, #K2, #L2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #L2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:1>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:2>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:3>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:4>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:5>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:6>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:7>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:8>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:9>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:10>;kotlin.Function10<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?, #H2: kotlin/Any?, #I2: kotlin/Any?, #J2: kotlin/Any?, #K2: kotlin/Any?, #L2: kotlin/Any?> zipOrAccumulate(kotlin/Function2<#A2, #A2, #A2>, arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, arrow.core/Either<#A2, #D2>, arrow.core/Either<#A2, #E2>, arrow.core/Either<#A2, #F2>, arrow.core/Either<#A2, #G2>, arrow.core/Either<#A2, #H2>, arrow.core/Either<#A2, #I2>, arrow.core/Either<#A2, #J2>, arrow.core/Either<#A2, #K2>, kotlin/Function10<#B2, #C2, #D2, #E2, #F2, #G2, #H2, #I2, #J2, #K2, #L2>): arrow.core/Either<#A2, #L2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(kotlin.Function2<0:0,0:0,0:0>;arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;arrow.core.Either<0:0,0:3>;arrow.core.Either<0:0,0:4>;arrow.core.Either<0:0,0:5>;arrow.core.Either<0:0,0:6>;arrow.core.Either<0:0,0:7>;arrow.core.Either<0:0,0:8>;arrow.core.Either<0:0,0:9>;arrow.core.Either<0:0,0:10>;kotlin.Function10<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10,0:11>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>;11§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?, #H2: kotlin/Any?, #I2: kotlin/Any?, #J2: kotlin/Any?, #K2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, arrow.core/Either<#A2, #D2>, arrow.core/Either<#A2, #E2>, arrow.core/Either<#A2, #F2>, arrow.core/Either<#A2, #G2>, arrow.core/Either<#A2, #H2>, arrow.core/Either<#A2, #I2>, arrow.core/Either<#A2, #J2>, kotlin/Function9<#B2, #C2, #D2, #E2, #F2, #G2, #H2, #I2, #J2, #K2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #K2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;arrow.core.Either<0:0,0:3>;arrow.core.Either<0:0,0:4>;arrow.core.Either<0:0,0:5>;arrow.core.Either<0:0,0:6>;arrow.core.Either<0:0,0:7>;arrow.core.Either<0:0,0:8>;arrow.core.Either<0:0,0:9>;kotlin.Function9<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?, #H2: kotlin/Any?, #I2: kotlin/Any?, #J2: kotlin/Any?, #K2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<arrow.core/NonEmptyList<#A2>, #B2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #C2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #D2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #E2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #F2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #G2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #H2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #I2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #J2>, kotlin/Function9<#B2, #C2, #D2, #E2, #F2, #G2, #H2, #I2, #J2, #K2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #K2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:1>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:2>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:3>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:4>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:5>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:6>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:7>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:8>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:9>;kotlin.Function9<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?, #H2: kotlin/Any?, #I2: kotlin/Any?, #J2: kotlin/Any?, #K2: kotlin/Any?> zipOrAccumulate(kotlin/Function2<#A2, #A2, #A2>, arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, arrow.core/Either<#A2, #D2>, arrow.core/Either<#A2, #E2>, arrow.core/Either<#A2, #F2>, arrow.core/Either<#A2, #G2>, arrow.core/Either<#A2, #H2>, arrow.core/Either<#A2, #I2>, arrow.core/Either<#A2, #J2>, kotlin/Function9<#B2, #C2, #D2, #E2, #F2, #G2, #H2, #I2, #J2, #K2>): arrow.core/Either<#A2, #K2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(kotlin.Function2<0:0,0:0,0:0>;arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;arrow.core.Either<0:0,0:3>;arrow.core.Either<0:0,0:4>;arrow.core.Either<0:0,0:5>;arrow.core.Either<0:0,0:6>;arrow.core.Either<0:0,0:7>;arrow.core.Either<0:0,0:8>;arrow.core.Either<0:0,0:9>;kotlin.Function9<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?, #H2: kotlin/Any?, #I2: kotlin/Any?, #J2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, arrow.core/Either<#A2, #D2>, arrow.core/Either<#A2, #E2>, arrow.core/Either<#A2, #F2>, arrow.core/Either<#A2, #G2>, arrow.core/Either<#A2, #H2>, arrow.core/Either<#A2, #I2>, kotlin/Function8<#B2, #C2, #D2, #E2, #F2, #G2, #H2, #I2, #J2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #J2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;arrow.core.Either<0:0,0:3>;arrow.core.Either<0:0,0:4>;arrow.core.Either<0:0,0:5>;arrow.core.Either<0:0,0:6>;arrow.core.Either<0:0,0:7>;arrow.core.Either<0:0,0:8>;kotlin.Function8<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?, #H2: kotlin/Any?, #I2: kotlin/Any?, #J2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<arrow.core/NonEmptyList<#A2>, #B2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #C2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #D2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #E2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #F2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #G2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #H2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #I2>, kotlin/Function8<#B2, #C2, #D2, #E2, #F2, #G2, #H2, #I2, #J2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #J2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:1>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:2>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:3>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:4>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:5>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:6>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:7>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:8>;kotlin.Function8<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?, #H2: kotlin/Any?, #I2: kotlin/Any?, #J2: kotlin/Any?> zipOrAccumulate(kotlin/Function2<#A2, #A2, #A2>, arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, arrow.core/Either<#A2, #D2>, arrow.core/Either<#A2, #E2>, arrow.core/Either<#A2, #F2>, arrow.core/Either<#A2, #G2>, arrow.core/Either<#A2, #H2>, arrow.core/Either<#A2, #I2>, kotlin/Function8<#B2, #C2, #D2, #E2, #F2, #G2, #H2, #I2, #J2>): arrow.core/Either<#A2, #J2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(kotlin.Function2<0:0,0:0,0:0>;arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;arrow.core.Either<0:0,0:3>;arrow.core.Either<0:0,0:4>;arrow.core.Either<0:0,0:5>;arrow.core.Either<0:0,0:6>;arrow.core.Either<0:0,0:7>;arrow.core.Either<0:0,0:8>;kotlin.Function8<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?, #H2: kotlin/Any?, #I2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, arrow.core/Either<#A2, #D2>, arrow.core/Either<#A2, #E2>, arrow.core/Either<#A2, #F2>, arrow.core/Either<#A2, #G2>, arrow.core/Either<#A2, #H2>, kotlin/Function7<#B2, #C2, #D2, #E2, #F2, #G2, #H2, #I2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #I2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;arrow.core.Either<0:0,0:3>;arrow.core.Either<0:0,0:4>;arrow.core.Either<0:0,0:5>;arrow.core.Either<0:0,0:6>;arrow.core.Either<0:0,0:7>;kotlin.Function7<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?, #H2: kotlin/Any?, #I2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<arrow.core/NonEmptyList<#A2>, #B2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #C2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #D2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #E2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #F2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #G2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #H2>, kotlin/Function7<#B2, #C2, #D2, #E2, #F2, #G2, #H2, #I2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #I2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:1>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:2>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:3>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:4>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:5>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:6>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:7>;kotlin.Function7<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?, #H2: kotlin/Any?, #I2: kotlin/Any?> zipOrAccumulate(kotlin/Function2<#A2, #A2, #A2>, arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, arrow.core/Either<#A2, #D2>, arrow.core/Either<#A2, #E2>, arrow.core/Either<#A2, #F2>, arrow.core/Either<#A2, #G2>, arrow.core/Either<#A2, #H2>, kotlin/Function7<#B2, #C2, #D2, #E2, #F2, #G2, #H2, #I2>): arrow.core/Either<#A2, #I2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(kotlin.Function2<0:0,0:0,0:0>;arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;arrow.core.Either<0:0,0:3>;arrow.core.Either<0:0,0:4>;arrow.core.Either<0:0,0:5>;arrow.core.Either<0:0,0:6>;arrow.core.Either<0:0,0:7>;kotlin.Function7<0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?, #H2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, arrow.core/Either<#A2, #D2>, arrow.core/Either<#A2, #E2>, arrow.core/Either<#A2, #F2>, arrow.core/Either<#A2, #G2>, kotlin/Function6<#B2, #C2, #D2, #E2, #F2, #G2, #H2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #H2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;arrow.core.Either<0:0,0:3>;arrow.core.Either<0:0,0:4>;arrow.core.Either<0:0,0:5>;arrow.core.Either<0:0,0:6>;kotlin.Function6<0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?, #H2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<arrow.core/NonEmptyList<#A2>, #B2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #C2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #D2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #E2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #F2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #G2>, kotlin/Function6<#B2, #C2, #D2, #E2, #F2, #G2, #H2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #H2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:1>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:2>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:3>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:4>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:5>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:6>;kotlin.Function6<0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?, #H2: kotlin/Any?> zipOrAccumulate(kotlin/Function2<#A2, #A2, #A2>, arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, arrow.core/Either<#A2, #D2>, arrow.core/Either<#A2, #E2>, arrow.core/Either<#A2, #F2>, arrow.core/Either<#A2, #G2>, kotlin/Function6<#B2, #C2, #D2, #E2, #F2, #G2, #H2>): arrow.core/Either<#A2, #H2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(kotlin.Function2<0:0,0:0,0:0>;arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;arrow.core.Either<0:0,0:3>;arrow.core.Either<0:0,0:4>;arrow.core.Either<0:0,0:5>;arrow.core.Either<0:0,0:6>;kotlin.Function6<0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, arrow.core/Either<#A2, #D2>, arrow.core/Either<#A2, #E2>, arrow.core/Either<#A2, #F2>, kotlin/Function5<#B2, #C2, #D2, #E2, #F2, #G2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #G2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;arrow.core.Either<0:0,0:3>;arrow.core.Either<0:0,0:4>;arrow.core.Either<0:0,0:5>;kotlin.Function5<0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<arrow.core/NonEmptyList<#A2>, #B2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #C2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #D2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #E2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #F2>, kotlin/Function5<#B2, #C2, #D2, #E2, #F2, #G2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #G2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:1>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:2>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:3>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:4>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:5>;kotlin.Function5<0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?, #G2: kotlin/Any?> zipOrAccumulate(kotlin/Function2<#A2, #A2, #A2>, arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, arrow.core/Either<#A2, #D2>, arrow.core/Either<#A2, #E2>, arrow.core/Either<#A2, #F2>, kotlin/Function5<#B2, #C2, #D2, #E2, #F2, #G2>): arrow.core/Either<#A2, #G2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(kotlin.Function2<0:0,0:0,0:0>;arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;arrow.core.Either<0:0,0:3>;arrow.core.Either<0:0,0:4>;arrow.core.Either<0:0,0:5>;kotlin.Function5<0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, arrow.core/Either<#A2, #D2>, arrow.core/Either<#A2, #E2>, kotlin/Function4<#B2, #C2, #D2, #E2, #F2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #F2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;arrow.core.Either<0:0,0:3>;arrow.core.Either<0:0,0:4>;kotlin.Function4<0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<arrow.core/NonEmptyList<#A2>, #B2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #C2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #D2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #E2>, kotlin/Function4<#B2, #C2, #D2, #E2, #F2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #F2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:1>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:2>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:3>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:4>;kotlin.Function4<0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?, #F2: kotlin/Any?> zipOrAccumulate(kotlin/Function2<#A2, #A2, #A2>, arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, arrow.core/Either<#A2, #D2>, arrow.core/Either<#A2, #E2>, kotlin/Function4<#B2, #C2, #D2, #E2, #F2>): arrow.core/Either<#A2, #F2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(kotlin.Function2<0:0,0:0,0:0>;arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;arrow.core.Either<0:0,0:3>;arrow.core.Either<0:0,0:4>;kotlin.Function4<0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, arrow.core/Either<#A2, #D2>, kotlin/Function3<#B2, #C2, #D2, #E2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #E2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;arrow.core.Either<0:0,0:3>;kotlin.Function3<0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<arrow.core/NonEmptyList<#A2>, #B2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #C2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #D2>, kotlin/Function3<#B2, #C2, #D2, #E2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #E2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:1>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:2>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:3>;kotlin.Function3<0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?, #E2: kotlin/Any?> zipOrAccumulate(kotlin/Function2<#A2, #A2, #A2>, arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, arrow.core/Either<#A2, #D2>, kotlin/Function3<#B2, #C2, #D2, #E2>): arrow.core/Either<#A2, #E2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(kotlin.Function2<0:0,0:0,0:0>;arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;arrow.core.Either<0:0,0:3>;kotlin.Function3<0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, kotlin/Function2<#B2, #C2, #D2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #D2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;kotlin.Function2<0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?> zipOrAccumulate(arrow.core/Either<arrow.core/NonEmptyList<#A2>, #B2>, arrow.core/Either<arrow.core/NonEmptyList<#A2>, #C2>, kotlin/Function2<#B2, #C2, #D2>): arrow.core/Either<arrow.core/NonEmptyList<#A2>, #D2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:1>;arrow.core.Either<arrow.core.NonEmptyList<0:0>,0:2>;kotlin.Function2<0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?, #D2: kotlin/Any?> zipOrAccumulate(kotlin/Function2<#A2, #A2, #A2>, arrow.core/Either<#A2, #B2>, arrow.core/Either<#A2, #C2>, kotlin/Function2<#B2, #C2, #D2>): arrow.core/Either<#A2, #D2> // arrow.core/Either.Companion.zipOrAccumulate|zipOrAccumulate(kotlin.Function2<0:0,0:0,0:0>;arrow.core.Either<0:0,0:1>;arrow.core.Either<0:0,0:2>;kotlin.Function2<0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?> catch(kotlin/Function0<#A2>): arrow.core/Either<kotlin/Throwable, #A2> // arrow.core/Either.Companion.catch|catch(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
        final inline fun <#A2: reified kotlin/Throwable, #B2: kotlin/Any?> catchOrThrow(kotlin/Function0<#B2>): arrow.core/Either<#A2, #B2> // arrow.core/Either.Companion.catchOrThrow|catchOrThrow(kotlin.Function0<0:1>){0§<kotlin.Throwable>;1§<kotlin.Any?>}[0]
    }
    open fun toString(): kotlin/String // arrow.core/Either.toString|toString(){}[0]
}
sealed class <#A: out kotlin/Any?, #B: out kotlin/Any?> arrow.core/Ior { // arrow.core/Ior|null[0]
    constructor <init>() // arrow.core/Ior.<init>|<init>(){}[0]
    final class <#A1: out kotlin/Any?, #B1: out kotlin/Any?> Both : arrow.core/Ior<#A1, #B1> { // arrow.core/Ior.Both|null[0]
        constructor <init>(#A1, #B1) // arrow.core/Ior.Both.<init>|<init>(1:0;1:1){}[0]
        final fun component1(): #A1 // arrow.core/Ior.Both.component1|component1(){}[0]
        final fun component2(): #B1 // arrow.core/Ior.Both.component2|component2(){}[0]
        final fun copy(#A1 = ..., #B1 = ...): arrow.core/Ior.Both<#A1, #B1> // arrow.core/Ior.Both.copy|copy(1:0;1:1){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.core/Ior.Both.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.core/Ior.Both.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // arrow.core/Ior.Both.toString|toString(){}[0]
        final val leftValue // arrow.core/Ior.Both.leftValue|{}leftValue[0]
            final fun <get-leftValue>(): #A1 // arrow.core/Ior.Both.leftValue.<get-leftValue>|<get-leftValue>(){}[0]
        final val rightValue // arrow.core/Ior.Both.rightValue|{}rightValue[0]
            final fun <get-rightValue>(): #B1 // arrow.core/Ior.Both.rightValue.<get-rightValue>|<get-rightValue>(){}[0]
    }
    final class <#A1: out kotlin/Any?> Left : arrow.core/Ior<#A1, kotlin/Nothing> { // arrow.core/Ior.Left|null[0]
        constructor <init>(#A1) // arrow.core/Ior.Left.<init>|<init>(1:0){}[0]
        final fun component1(): #A1 // arrow.core/Ior.Left.component1|component1(){}[0]
        final fun copy(#A1 = ...): arrow.core/Ior.Left<#A1> // arrow.core/Ior.Left.copy|copy(1:0){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.core/Ior.Left.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.core/Ior.Left.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // arrow.core/Ior.Left.toString|toString(){}[0]
        final object Companion // arrow.core/Ior.Left.Companion|null[0]
        final val value // arrow.core/Ior.Left.value|{}value[0]
            final fun <get-value>(): #A1 // arrow.core/Ior.Left.value.<get-value>|<get-value>(){}[0]
    }
    final class <#A1: out kotlin/Any?> Right : arrow.core/Ior<kotlin/Nothing, #A1> { // arrow.core/Ior.Right|null[0]
        constructor <init>(#A1) // arrow.core/Ior.Right.<init>|<init>(1:0){}[0]
        final fun component1(): #A1 // arrow.core/Ior.Right.component1|component1(){}[0]
        final fun copy(#A1 = ...): arrow.core/Ior.Right<#A1> // arrow.core/Ior.Right.copy|copy(1:0){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.core/Ior.Right.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.core/Ior.Right.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // arrow.core/Ior.Right.toString|toString(){}[0]
        final object Companion // arrow.core/Ior.Right.Companion|null[0]
        final val value // arrow.core/Ior.Right.value|{}value[0]
            final fun <get-value>(): #A1 // arrow.core/Ior.Right.value.<get-value>|<get-value>(){}[0]
    }
    final fun getOrNull(): #B? // arrow.core/Ior.getOrNull|getOrNull(){}[0]
    final fun isBoth(): kotlin/Boolean // arrow.core/Ior.isBoth|isBoth(){}[0]
    final fun isLeft(): kotlin/Boolean // arrow.core/Ior.isLeft|isLeft(){}[0]
    final fun isRight(): kotlin/Boolean // arrow.core/Ior.isRight|isRight(){}[0]
    final fun leftOrNull(): #A? // arrow.core/Ior.leftOrNull|leftOrNull(){}[0]
    final fun swap(): arrow.core/Ior<#B, #A> // arrow.core/Ior.swap|swap(){}[0]
    final fun toEither(): arrow.core/Either<#A, #B> // arrow.core/Ior.toEither|toEither(){}[0]
    final fun toPair(): kotlin/Pair<#A?, #B?> // arrow.core/Ior.toPair|toPair(){}[0]
    final fun unwrap(): arrow.core/Either<arrow.core/Either<#A, #B>, kotlin/Pair<#A, #B>> // arrow.core/Ior.unwrap|unwrap(){}[0]
    final inline fun <#A1: kotlin/Any?> fold(kotlin/Function1<#A, #A1>, kotlin/Function1<#B, #A1>, kotlin/Function2<#A, #B, #A1>): #A1 // arrow.core/Ior.fold|fold(kotlin.Function1<1:0,0:0>;kotlin.Function1<1:1,0:0>;kotlin.Function2<1:0,1:1,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> map(kotlin/Function1<#B, #A1>): arrow.core/Ior<#A, #A1> // arrow.core/Ior.map|map(kotlin.Function1<1:1,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> mapLeft(kotlin/Function1<#A, #A1>): arrow.core/Ior<#A1, #B> // arrow.core/Ior.mapLeft|mapLeft(kotlin.Function1<1:0,0:0>){0§<kotlin.Any?>}[0]
    final inline fun isBoth(kotlin/Function1<#A, kotlin/Boolean>, kotlin/Function1<#B, kotlin/Boolean>): kotlin/Boolean // arrow.core/Ior.isBoth|isBoth(kotlin.Function1<1:0,kotlin.Boolean>;kotlin.Function1<1:1,kotlin.Boolean>){}[0]
    final inline fun isLeft(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Boolean // arrow.core/Ior.isLeft|isLeft(kotlin.Function1<1:0,kotlin.Boolean>){}[0]
    final inline fun isRight(kotlin/Function1<#B, kotlin/Boolean>): kotlin/Boolean // arrow.core/Ior.isRight|isRight(kotlin.Function1<1:1,kotlin.Boolean>){}[0]
    final object Companion { // arrow.core/Ior.Companion|null[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> bothNel(#A2, #B2): arrow.core/Ior<arrow.core/NonEmptyList<#A2>, #B2> // arrow.core/Ior.Companion.bothNel|bothNel(0:0;0:1){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> fromNullables(#A2?, #B2?): arrow.core/Ior<#A2, #B2>? // arrow.core/Ior.Companion.fromNullables|fromNullables(0:0?;0:1?){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> leftNel(#A2): arrow.core/Ior<arrow.core/NonEmptyList<#A2>, #B2> // arrow.core/Ior.Companion.leftNel|leftNel(0:0){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    }
    open fun toString(): kotlin/String // arrow.core/Ior.toString|toString(){}[0]
}
sealed class <#A: out kotlin/Any?> arrow.core/Option { // arrow.core/Option|null[0]
    constructor <init>() // arrow.core/Option.<init>|<init>(){}[0]
    final fun getOrNull(): #A? // arrow.core/Option.getOrNull|getOrNull(){}[0]
    final fun isNone(): kotlin/Boolean // arrow.core/Option.isNone|isNone(){}[0]
    final fun isSome(): kotlin/Boolean // arrow.core/Option.isSome|isSome(){}[0]
    final fun toList(): kotlin.collections/List<#A> // arrow.core/Option.toList|toList(){}[0]
    final inline fun <#A1: kotlin/Any?> flatMap(kotlin/Function1<#A, arrow.core/Option<#A1>>): arrow.core/Option<#A1> // arrow.core/Option.flatMap|flatMap(kotlin.Function1<1:0,arrow.core.Option<0:0>>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> fold(kotlin/Function0<#A1>, kotlin/Function1<#A, #A1>): #A1 // arrow.core/Option.fold|fold(kotlin.Function0<0:0>;kotlin.Function1<1:0,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> map(kotlin/Function1<#A, #A1>): arrow.core/Option<#A1> // arrow.core/Option.map|map(kotlin.Function1<1:0,0:0>){0§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?> toEither(kotlin/Function0<#A1>): arrow.core/Either<#A1, #A> // arrow.core/Option.toEither|toEither(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
    final inline fun filter(kotlin/Function1<#A, kotlin/Boolean>): arrow.core/Option<#A> // arrow.core/Option.filter|filter(kotlin.Function1<1:0,kotlin.Boolean>){}[0]
    final inline fun filterNot(kotlin/Function1<#A, kotlin/Boolean>): arrow.core/Option<#A> // arrow.core/Option.filterNot|filterNot(kotlin.Function1<1:0,kotlin.Boolean>){}[0]
    final inline fun isSome(kotlin/Function1<#A, kotlin/Boolean>): kotlin/Boolean // arrow.core/Option.isSome|isSome(kotlin.Function1<1:0,kotlin.Boolean>){}[0]
    final inline fun onNone(kotlin/Function0<kotlin/Unit>): arrow.core/Option<#A> // arrow.core/Option.onNone|onNone(kotlin.Function0<kotlin.Unit>){}[0]
    final inline fun onSome(kotlin/Function1<#A, kotlin/Unit>): arrow.core/Option<#A> // arrow.core/Option.onSome|onSome(kotlin.Function1<1:0,kotlin.Unit>){}[0]
    final object Companion { // arrow.core/Option.Companion|null[0]
        final fun <#A2: kotlin/Any?> fromNullable(#A2?): arrow.core/Option<#A2> // arrow.core/Option.Companion.fromNullable|fromNullable(0:0?){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> invoke(#A2): arrow.core/Option<#A2> // arrow.core/Option.Companion.invoke|invoke(0:0){0§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?> catch(kotlin/Function0<#A2>): arrow.core/Option<#A2> // arrow.core/Option.Companion.catch|catch(kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
        final inline fun <#A2: kotlin/Any?> catch(kotlin/Function1<kotlin/Throwable, arrow.core/Option<#A2>>, kotlin/Function0<#A2>): arrow.core/Option<#A2> // arrow.core/Option.Companion.catch|catch(kotlin.Function1<kotlin.Throwable,arrow.core.Option<0:0>>;kotlin.Function0<0:0>){0§<kotlin.Any?>}[0]
    }
    open fun toString(): kotlin/String // arrow.core/Option.toString|toString(){}[0]
}
sealed class arrow.core.raise/RaiseCancellationException : kotlin.coroutines.cancellation/CancellationException { // arrow.core.raise/RaiseCancellationException|null[0]
    constructor <init>(kotlin/Any?, arrow.core.raise/Raise<kotlin/Any?>) // arrow.core.raise/RaiseCancellationException.<init>|<init>(kotlin.Any?;arrow.core.raise.Raise<kotlin.Any?>){}[0]
}
