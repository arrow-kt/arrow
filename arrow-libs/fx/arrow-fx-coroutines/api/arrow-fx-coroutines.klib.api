// Klib ABI Dump
// Targets: [iosArm64, iosSimulatorArm64, iosX64, js, linuxArm64, linuxX64, macosArm64, macosX64, mingwX64, tvosArm64, tvosSimulatorArm64, tvosX64, watchosArm32, watchosArm64, watchosSimulatorArm64, watchosX64]
// Rendering settings:
// - Signature version: 2
// - Show manifest properties: true
// - Show declarations: true

// Library unique name: <io.arrow-kt:arrow-fx-coroutines>
abstract interface <#A: kotlin/Any?> arrow.fx.coroutines/Atomic { // arrow.fx.coroutines/Atomic|null[0]
    abstract suspend fun <#A1: kotlin/Any?> modify(kotlin/Function1<#A, kotlin/Pair<#A, #A1>>): #A1 // arrow.fx.coroutines/Atomic.modify|modify(kotlin.Function1<1:0,kotlin.Pair<1:0,0:0>>){0§<kotlin.Any?>}[0]
    abstract suspend fun <#A1: kotlin/Any?> modifyGet(kotlin/Function1<#A, kotlin/Pair<#A, #A1>>): kotlin/Pair<#A, #A1> // arrow.fx.coroutines/Atomic.modifyGet|modifyGet(kotlin.Function1<1:0,kotlin.Pair<1:0,0:0>>){0§<kotlin.Any?>}[0]
    abstract suspend fun <#A1: kotlin/Any?> tryModify(kotlin/Function1<#A, kotlin/Pair<#A, #A1>>): #A1? // arrow.fx.coroutines/Atomic.tryModify|tryModify(kotlin.Function1<1:0,kotlin.Pair<1:0,0:0>>){0§<kotlin.Any?>}[0]
    abstract suspend fun access(): kotlin/Pair<#A, kotlin.coroutines/SuspendFunction1<#A, kotlin/Boolean>> // arrow.fx.coroutines/Atomic.access|access(){}[0]
    abstract suspend fun get(): #A // arrow.fx.coroutines/Atomic.get|get(){}[0]
    abstract suspend fun getAndSet(#A): #A // arrow.fx.coroutines/Atomic.getAndSet|getAndSet(1:0){}[0]
    abstract suspend fun getAndUpdate(kotlin/Function1<#A, #A>): #A // arrow.fx.coroutines/Atomic.getAndUpdate|getAndUpdate(kotlin.Function1<1:0,1:0>){}[0]
    abstract suspend fun set(#A) // arrow.fx.coroutines/Atomic.set|set(1:0){}[0]
    abstract suspend fun setAndGet(#A): #A // arrow.fx.coroutines/Atomic.setAndGet|setAndGet(1:0){}[0]
    abstract suspend fun tryUpdate(kotlin/Function1<#A, #A>): kotlin/Boolean // arrow.fx.coroutines/Atomic.tryUpdate|tryUpdate(kotlin.Function1<1:0,1:0>){}[0]
    abstract suspend fun update(kotlin/Function1<#A, #A>) // arrow.fx.coroutines/Atomic.update|update(kotlin.Function1<1:0,1:0>){}[0]
    abstract suspend fun updateAndGet(kotlin/Function1<#A, #A>): #A // arrow.fx.coroutines/Atomic.updateAndGet|updateAndGet(kotlin.Function1<1:0,1:0>){}[0]
    final object Companion { // arrow.fx.coroutines/Atomic.Companion|null[0]
        final fun <#A2: kotlin/Any?> unsafe(#A2): arrow.fx.coroutines/Atomic<#A2> // arrow.fx.coroutines/Atomic.Companion.unsafe|unsafe(0:0){0§<kotlin.Any?>}[0]
        final suspend fun <#A2: kotlin/Any?> invoke(#A2): arrow.fx.coroutines/Atomic<#A2> // arrow.fx.coroutines/Atomic.Companion.invoke|invoke(0:0){0§<kotlin.Any?>}[0]
    }
    open fun <#A1: kotlin/Any?> lens(kotlin/Function1<#A, #A1>, kotlin/Function2<#A, #A1, #A>): arrow.fx.coroutines/Atomic<#A1> // arrow.fx.coroutines/Atomic.lens|lens(kotlin.Function1<1:0,0:0>;kotlin.Function2<1:0,0:0,1:0>){0§<kotlin.Any?>}[0]
}
abstract interface arrow.fx.coroutines.continuations/ResourceScope : arrow/AutoCloseScope { // arrow.fx.coroutines.continuations/ResourceScope|null[0]
    abstract suspend fun <#A1: kotlin/Any?> (arrow.fx.coroutines/Resource<#A1>).bind(): #A1 // arrow.fx.coroutines.continuations/ResourceScope.bind|bind@arrow.fx.coroutines.Resource<0:0>(){0§<kotlin.Any?>}[0]
    abstract suspend fun <#A1: kotlin/Any?> install(kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines.continuations/AcquireStep, #A1>, kotlin.coroutines/SuspendFunction2<#A1, arrow.fx.coroutines/ExitCase, kotlin/Unit>): #A1 // arrow.fx.coroutines.continuations/ResourceScope.install|install(kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.continuations.AcquireStep,0:0>;kotlin.coroutines.SuspendFunction2<0:0,arrow.fx.coroutines.ExitCase,kotlin.Unit>){0§<kotlin.Any?>}[0]
    open suspend fun <#A1: kotlin/Any?> (arrow.fx.coroutines/Resource<#A1>).release(kotlin.coroutines/SuspendFunction1<#A1, kotlin/Unit>): #A1 // arrow.fx.coroutines.continuations/ResourceScope.release|release@arrow.fx.coroutines.Resource<0:0>(kotlin.coroutines.SuspendFunction1<0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
    open suspend fun <#A1: kotlin/Any?> (arrow.fx.coroutines/Resource<#A1>).releaseCase(kotlin.coroutines/SuspendFunction2<#A1, arrow.fx.coroutines/ExitCase, kotlin/Unit>): #A1 // arrow.fx.coroutines.continuations/ResourceScope.releaseCase|releaseCase@arrow.fx.coroutines.Resource<0:0>(kotlin.coroutines.SuspendFunction2<0:0,arrow.fx.coroutines.ExitCase,kotlin.Unit>){0§<kotlin.Any?>}[0]
    open suspend fun onRelease(kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ExitCase, kotlin/Unit>) // arrow.fx.coroutines.continuations/ResourceScope.onRelease|onRelease(kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ExitCase,kotlin.Unit>){}[0]
}
final class <#A: kotlin/Any?> arrow.fx.coroutines/ScopedRaiseAccumulate : arrow.core.raise/RaiseAccumulate<#A>, kotlinx.coroutines/CoroutineScope { // arrow.fx.coroutines/ScopedRaiseAccumulate|null[0]
    constructor <init>(arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>, kotlinx.coroutines/CoroutineScope) // arrow.fx.coroutines/ScopedRaiseAccumulate.<init>|<init>(arrow.core.raise.Raise<arrow.core.NonEmptyList<1:0>>;kotlinx.coroutines.CoroutineScope){}[0]
    final val coroutineContext // arrow.fx.coroutines/ScopedRaiseAccumulate.coroutineContext|{}coroutineContext[0]
        final fun <get-coroutineContext>(): kotlin.coroutines/CoroutineContext // arrow.fx.coroutines/ScopedRaiseAccumulate.coroutineContext.<get-coroutineContext>|<get-coroutineContext>(){}[0]
}
final class arrow.fx.coroutines/CircuitBreaker { // arrow.fx.coroutines/CircuitBreaker|null[0]
    final class ExecutionRejected : kotlin/Throwable { // arrow.fx.coroutines/CircuitBreaker.ExecutionRejected|null[0]
        constructor <init>(kotlin/String, arrow.fx.coroutines/CircuitBreaker.State) // arrow.fx.coroutines/CircuitBreaker.ExecutionRejected.<init>|<init>(kotlin.String;arrow.fx.coroutines.CircuitBreaker.State){}[0]
        final val reason // arrow.fx.coroutines/CircuitBreaker.ExecutionRejected.reason|{}reason[0]
            final fun <get-reason>(): kotlin/String // arrow.fx.coroutines/CircuitBreaker.ExecutionRejected.reason.<get-reason>|<get-reason>(){}[0]
        final val state // arrow.fx.coroutines/CircuitBreaker.ExecutionRejected.state|{}state[0]
            final fun <get-state>(): arrow.fx.coroutines/CircuitBreaker.State // arrow.fx.coroutines/CircuitBreaker.ExecutionRejected.state.<get-state>|<get-state>(){}[0]
    }
    final fun doOnClosed(kotlin.coroutines/SuspendFunction0<kotlin/Unit>): arrow.fx.coroutines/CircuitBreaker // arrow.fx.coroutines/CircuitBreaker.doOnClosed|doOnClosed(kotlin.coroutines.SuspendFunction0<kotlin.Unit>){}[0]
    final fun doOnHalfOpen(kotlin.coroutines/SuspendFunction0<kotlin/Unit>): arrow.fx.coroutines/CircuitBreaker // arrow.fx.coroutines/CircuitBreaker.doOnHalfOpen|doOnHalfOpen(kotlin.coroutines.SuspendFunction0<kotlin.Unit>){}[0]
    final fun doOnOpen(kotlin.coroutines/SuspendFunction0<kotlin/Unit>): arrow.fx.coroutines/CircuitBreaker // arrow.fx.coroutines/CircuitBreaker.doOnOpen|doOnOpen(kotlin.coroutines.SuspendFunction0<kotlin.Unit>){}[0]
    final fun doOnRejectedTask(kotlin.coroutines/SuspendFunction0<kotlin/Unit>): arrow.fx.coroutines/CircuitBreaker // arrow.fx.coroutines/CircuitBreaker.doOnRejectedTask|doOnRejectedTask(kotlin.coroutines.SuspendFunction0<kotlin.Unit>){}[0]
    final object Companion { // arrow.fx.coroutines/CircuitBreaker.Companion|null[0]
        final suspend fun of(kotlin/Int, kotlin.time/Duration, kotlin/Double =..., kotlin.time/Duration =..., kotlin.coroutines/SuspendFunction0<kotlin/Unit> =..., kotlin.coroutines/SuspendFunction0<kotlin/Unit> =..., kotlin.coroutines/SuspendFunction0<kotlin/Unit> =..., kotlin.coroutines/SuspendFunction0<kotlin/Unit> =...): arrow.fx.coroutines/CircuitBreaker // arrow.fx.coroutines/CircuitBreaker.Companion.of|of(kotlin.Int;kotlin.time.Duration;kotlin.Double;kotlin.time.Duration;kotlin.coroutines.SuspendFunction0<kotlin.Unit>;kotlin.coroutines.SuspendFunction0<kotlin.Unit>;kotlin.coroutines.SuspendFunction0<kotlin.Unit>;kotlin.coroutines.SuspendFunction0<kotlin.Unit>){}[0]
        final suspend fun of(kotlin/Int, kotlin/Double, kotlin/Double =..., kotlin/Double =..., kotlin.coroutines/SuspendFunction0<kotlin/Unit> =..., kotlin.coroutines/SuspendFunction0<kotlin/Unit> =..., kotlin.coroutines/SuspendFunction0<kotlin/Unit> =..., kotlin.coroutines/SuspendFunction0<kotlin/Unit> =...): arrow.fx.coroutines/CircuitBreaker // arrow.fx.coroutines/CircuitBreaker.Companion.of|of(kotlin.Int;kotlin.Double;kotlin.Double;kotlin.Double;kotlin.coroutines.SuspendFunction0<kotlin.Unit>;kotlin.coroutines.SuspendFunction0<kotlin.Unit>;kotlin.coroutines.SuspendFunction0<kotlin.Unit>;kotlin.coroutines.SuspendFunction0<kotlin.Unit>){}[0]
    }
    final suspend fun <#A1: kotlin/Any?> protectEither(kotlin.coroutines/SuspendFunction0<#A1>): arrow.core/Either<arrow.fx.coroutines/CircuitBreaker.ExecutionRejected, #A1> // arrow.fx.coroutines/CircuitBreaker.protectEither|protectEither(kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>}[0]
    final suspend fun <#A1: kotlin/Any?> protectOrThrow(kotlin.coroutines/SuspendFunction0<#A1>): #A1 // arrow.fx.coroutines/CircuitBreaker.protectOrThrow|protectOrThrow(kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>}[0]
    final suspend fun awaitClose() // arrow.fx.coroutines/CircuitBreaker.awaitClose|awaitClose(){}[0]
    final suspend fun state(): arrow.fx.coroutines/CircuitBreaker.State // arrow.fx.coroutines/CircuitBreaker.state|state(){}[0]
    sealed class State { // arrow.fx.coroutines/CircuitBreaker.State|null[0]
        constructor <init>() // arrow.fx.coroutines/CircuitBreaker.State.<init>|<init>(){}[0]
        final class Closed : arrow.fx.coroutines/CircuitBreaker.State { // arrow.fx.coroutines/CircuitBreaker.State.Closed|null[0]
            constructor <init>(kotlin/Int) // arrow.fx.coroutines/CircuitBreaker.State.Closed.<init>|<init>(kotlin.Int){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // arrow.fx.coroutines/CircuitBreaker.State.Closed.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // arrow.fx.coroutines/CircuitBreaker.State.Closed.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // arrow.fx.coroutines/CircuitBreaker.State.Closed.toString|toString(){}[0]
            final val failures // arrow.fx.coroutines/CircuitBreaker.State.Closed.failures|<get-failures>(){}[0]
                final fun <get-failures>(): kotlin/Int // arrow.fx.coroutines/CircuitBreaker.State.Closed.failures.<get-failures>|<get-failures>(){}[0]
        }
        final class HalfOpen : arrow.fx.coroutines/CircuitBreaker.State { // arrow.fx.coroutines/CircuitBreaker.State.HalfOpen|null[0]
            constructor <init>(kotlin.time/Duration) // arrow.fx.coroutines/CircuitBreaker.State.HalfOpen.<init>|<init>(kotlin.time.Duration){}[0]
            constructor <init>(kotlin/Double) // arrow.fx.coroutines/CircuitBreaker.State.HalfOpen.<init>|<init>(kotlin.Double){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // arrow.fx.coroutines/CircuitBreaker.State.HalfOpen.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // arrow.fx.coroutines/CircuitBreaker.State.HalfOpen.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // arrow.fx.coroutines/CircuitBreaker.State.HalfOpen.toString|toString(){}[0]
            final val resetTimeout // arrow.fx.coroutines/CircuitBreaker.State.HalfOpen.resetTimeout|{}resetTimeout[0]
                final fun <get-resetTimeout>(): kotlin.time/Duration // arrow.fx.coroutines/CircuitBreaker.State.HalfOpen.resetTimeout.<get-resetTimeout>|<get-resetTimeout>(){}[0]
            final val resetTimeoutNanos // arrow.fx.coroutines/CircuitBreaker.State.HalfOpen.resetTimeoutNanos|{}resetTimeoutNanos[0]
                final fun <get-resetTimeoutNanos>(): kotlin/Double // arrow.fx.coroutines/CircuitBreaker.State.HalfOpen.resetTimeoutNanos.<get-resetTimeoutNanos>|<get-resetTimeoutNanos>(){}[0]
        }
        final class Open : arrow.fx.coroutines/CircuitBreaker.State { // arrow.fx.coroutines/CircuitBreaker.State.Open|null[0]
            constructor <init>(kotlin/Long, kotlin.time/Duration) // arrow.fx.coroutines/CircuitBreaker.State.Open.<init>|<init>(kotlin.Long;kotlin.time.Duration){}[0]
            constructor <init>(kotlin/Long, kotlin/Double) // arrow.fx.coroutines/CircuitBreaker.State.Open.<init>|<init>(kotlin.Long;kotlin.Double){}[0]
            final fun equals(kotlin/Any?): kotlin/Boolean // arrow.fx.coroutines/CircuitBreaker.State.Open.equals|equals(kotlin.Any?){}[0]
            final fun hashCode(): kotlin/Int // arrow.fx.coroutines/CircuitBreaker.State.Open.hashCode|hashCode(){}[0]
            final fun toString(): kotlin/String // arrow.fx.coroutines/CircuitBreaker.State.Open.toString|toString(){}[0]
            final val expiresAt // arrow.fx.coroutines/CircuitBreaker.State.Open.expiresAt|<get-expiresAt>(){}[0]
                final fun <get-expiresAt>(): kotlin/Long // arrow.fx.coroutines/CircuitBreaker.State.Open.expiresAt.<get-expiresAt>|<get-expiresAt>(){}[0]
            final val resetTimeout // arrow.fx.coroutines/CircuitBreaker.State.Open.resetTimeout|<get-resetTimeout>(){}[0]
                final fun <get-resetTimeout>(): kotlin.time/Duration // arrow.fx.coroutines/CircuitBreaker.State.Open.resetTimeout.<get-resetTimeout>|<get-resetTimeout>(){}[0]
            final val resetTimeoutNanos // arrow.fx.coroutines/CircuitBreaker.State.Open.resetTimeoutNanos|{}resetTimeoutNanos[0]
                final fun <get-resetTimeoutNanos>(): kotlin/Double // arrow.fx.coroutines/CircuitBreaker.State.Open.resetTimeoutNanos.<get-resetTimeoutNanos>|<get-resetTimeoutNanos>(){}[0]
            final val startedAt // arrow.fx.coroutines/CircuitBreaker.State.Open.startedAt|<get-startedAt>(){}[0]
                final fun <get-startedAt>(): kotlin/Long // arrow.fx.coroutines/CircuitBreaker.State.Open.startedAt.<get-startedAt>|<get-startedAt>(){}[0]
        }
    }
}
final class arrow.fx.coroutines/CountDownLatch { // arrow.fx.coroutines/CountDownLatch|null[0]
    constructor <init>(kotlin/Long) // arrow.fx.coroutines/CountDownLatch.<init>|<init>(kotlin.Long){}[0]
    final fun count(): kotlin/Long // arrow.fx.coroutines/CountDownLatch.count|count(){}[0]
    final fun countDown() // arrow.fx.coroutines/CountDownLatch.countDown|countDown(){}[0]
    final suspend fun await() // arrow.fx.coroutines/CountDownLatch.await|await(){}[0]
}
final class arrow.fx.coroutines/CyclicBarrier { // arrow.fx.coroutines/CyclicBarrier|null[0]
    constructor <init>(kotlin/Int, kotlin/Function0<kotlin/Unit> =...) // arrow.fx.coroutines/CyclicBarrier.<init>|<init>(kotlin.Int;kotlin.Function0<kotlin.Unit>){}[0]
    final suspend fun await() // arrow.fx.coroutines/CyclicBarrier.await|await(){}[0]
    final suspend fun reset() // arrow.fx.coroutines/CyclicBarrier.reset|reset(){}[0]
    final val capacity // arrow.fx.coroutines/CyclicBarrier.capacity|{}capacity[0]
        final fun <get-capacity>(): kotlin/Int // arrow.fx.coroutines/CyclicBarrier.capacity.<get-capacity>|<get-capacity>(){}[0]
}
final class arrow.fx.coroutines/CyclicBarrierCancellationException : kotlin.coroutines.cancellation/CancellationException { // arrow.fx.coroutines/CyclicBarrierCancellationException|null[0]
    constructor <init>() // arrow.fx.coroutines/CyclicBarrierCancellationException.<init>|<init>(){}[0]
}
final const val arrow.fx.coroutines/nextVersionRemoved // arrow.fx.coroutines/nextVersionRemoved|{}nextVersionRemoved[0]
    final fun <get-nextVersionRemoved>(): kotlin/String // arrow.fx.coroutines/nextVersionRemoved.<get-nextVersionRemoved>|<get-nextVersionRemoved>(){}[0]
final fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.coroutines.flow/Flow<#A>).arrow.fx.coroutines/retry(arrow.fx.coroutines/Schedule<kotlin/Throwable, #B>): kotlinx.coroutines.flow/Flow<#A> // arrow.fx.coroutines/retry|retry@kotlinx.coroutines.flow.Flow<0:0>(arrow.fx.coroutines.Schedule<kotlin.Throwable,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (arrow.fx.coroutines/Resource<#A>).arrow.fx.coroutines/asFlow(): kotlinx.coroutines.flow/Flow<#A> // arrow.fx.coroutines/asFlow|asFlow@arrow.fx.coroutines.Resource<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (arrow.fx.coroutines/Resource<#A>).arrow.fx.coroutines/release(kotlin.coroutines/SuspendFunction1<#A, kotlin/Unit>): arrow.fx.coroutines/Resource<#A> // arrow.fx.coroutines/release|release@arrow.fx.coroutines.Resource<0:0>(kotlin.coroutines.SuspendFunction1<0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (arrow.fx.coroutines/Resource<#A>).arrow.fx.coroutines/releaseCase(kotlin.coroutines/SuspendFunction2<#A, arrow.fx.coroutines/ExitCase, kotlin/Unit>): arrow.fx.coroutines/Resource<#A> // arrow.fx.coroutines/releaseCase|releaseCase@arrow.fx.coroutines.Resource<0:0>(kotlin.coroutines.SuspendFunction2<0:0,arrow.fx.coroutines.ExitCase,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (arrow.fx.coroutines/Use<#A>).arrow.fx.coroutines/release(kotlin.coroutines/SuspendFunction1<#A, kotlin/Unit>): arrow.fx.coroutines/Resource<#A> // arrow.fx.coroutines/release|release@arrow.fx.coroutines.Use<0:0>(kotlin.coroutines.SuspendFunction1<0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (arrow.fx.coroutines/Use<#A>).arrow.fx.coroutines/releaseCase(kotlin.coroutines/SuspendFunction2<#A, arrow.fx.coroutines/ExitCase, kotlin/Unit>): arrow.fx.coroutines/Resource<#A> // arrow.fx.coroutines/releaseCase|releaseCase@arrow.fx.coroutines.Use<0:0>(kotlin.coroutines.SuspendFunction2<0:0,arrow.fx.coroutines.ExitCase,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.coroutines.flow/Flow<#A>).arrow.fx.coroutines/metered(kotlin.time/Duration): kotlinx.coroutines.flow/Flow<#A> // arrow.fx.coroutines/metered|metered@kotlinx.coroutines.flow.Flow<0:0>(kotlin.time.Duration){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.coroutines.flow/Flow<#A>).arrow.fx.coroutines/metered(kotlin/Long): kotlinx.coroutines.flow/Flow<#A> // arrow.fx.coroutines/metered|metered@kotlinx.coroutines.flow.Flow<0:0>(kotlin.Long){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> (kotlinx.coroutines.flow/Flow<#A>).arrow.fx.coroutines/repeat(): kotlinx.coroutines.flow/Flow<#A> // arrow.fx.coroutines/repeat|repeat@kotlinx.coroutines.flow.Flow<0:0>(){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> arrow.fx.coroutines.continuations/resource(kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines.continuations/ResourceScope, #A>): arrow.fx.coroutines/Resource<#A> // arrow.fx.coroutines.continuations/resource|resource(kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.continuations.ResourceScope,0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> arrow.fx.coroutines/resource(kotlin.coroutines/SuspendFunction0<#A>): arrow.fx.coroutines/Use<#A> // arrow.fx.coroutines/resource|resource(kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> arrow.fx.coroutines/resource(kotlin.coroutines/SuspendFunction0<#A>, kotlin.coroutines/SuspendFunction2<#A, arrow.fx.coroutines/ExitCase, kotlin/Unit>): arrow.fx.coroutines/Resource<#A> // arrow.fx.coroutines/resource|resource(kotlin.coroutines.SuspendFunction0<0:0>;kotlin.coroutines.SuspendFunction2<0:0,arrow.fx.coroutines.ExitCase,kotlin.Unit>){0§<kotlin.Any?>}[0]
final fun <#A: kotlin/Any?> arrow.fx.coroutines/resource(kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines.continuations/ResourceScope, #A>): arrow.fx.coroutines/Resource<#A> // arrow.fx.coroutines/resource|resource(kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.continuations.ResourceScope,0:0>){0§<kotlin.Any?>}[0]
final fun arrow.fx.coroutines/fixedRate(kotlin.time/Duration, kotlin/Boolean =..., kotlin/Function0<kotlin/Long> =...): kotlinx.coroutines.flow/Flow<kotlin/Unit> // arrow.fx.coroutines/fixedRate|fixedRate(kotlin.time.Duration;kotlin.Boolean;kotlin.Function0<kotlin.Long>){}[0]
final fun arrow.fx.coroutines/fixedRate(kotlin/Long, kotlin/Boolean =..., kotlin/Function0<kotlin/Long> =...): kotlinx.coroutines.flow/Flow<kotlin/Unit> // arrow.fx.coroutines/fixedRate|fixedRate(kotlin.Long;kotlin.Boolean;kotlin.Function0<kotlin.Long>){}[0]
final fun arrow.fx.coroutines/timeInMillis(): kotlin/Long // arrow.fx.coroutines/timeInMillis|timeInMillis(){}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/traverse(crossinline kotlin/Function1<#A, arrow.fx.coroutines/Resource<#B>>): arrow.fx.coroutines/Resource<kotlin.collections/List<#B>> // arrow.fx.coroutines/traverse|traverse@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,arrow.fx.coroutines.Resource<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/traverseResource(crossinline kotlin/Function1<#A, arrow.fx.coroutines/Resource<#B>>): arrow.fx.coroutines/Resource<kotlin.collections/List<#B>> // arrow.fx.coroutines/traverseResource|traverseResource@kotlin.collections.Iterable<0:0>(kotlin.Function1<0:0,arrow.fx.coroutines.Resource<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.coroutines.flow/Flow<#A>).arrow.fx.coroutines/mapIndexed(crossinline kotlin.coroutines/SuspendFunction2<kotlin/Int, #A, #B>): kotlinx.coroutines.flow/Flow<#B> // arrow.fx.coroutines/mapIndexed|mapIndexed@kotlinx.coroutines.flow.Flow<0:0>(kotlin.coroutines.SuspendFunction2<kotlin.Int,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.coroutines.flow/Flow<#A>).arrow.fx.coroutines/parMap(kotlin/Int =..., crossinline kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #A, #B>): kotlinx.coroutines.flow/Flow<#B> // arrow.fx.coroutines/parMap|parMap@kotlinx.coroutines.flow.Flow<0:0>(kotlin.Int;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.coroutines.flow/Flow<#A>).arrow.fx.coroutines/parMapNotNullUnordered(kotlin/Int =..., crossinline kotlin.coroutines/SuspendFunction1<#A, #B?>): kotlinx.coroutines.flow/Flow<#B> // arrow.fx.coroutines/parMapNotNullUnordered|parMapNotNullUnordered@kotlinx.coroutines.flow.Flow<0:0>(kotlin.Int;kotlin.coroutines.SuspendFunction1<0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlinx.coroutines.flow/Flow<#A>).arrow.fx.coroutines/parMapUnordered(kotlin/Int =..., crossinline kotlin.coroutines/SuspendFunction1<#A, #B>): kotlinx.coroutines.flow/Flow<#B> // arrow.fx.coroutines/parMapUnordered|parMapUnordered@kotlinx.coroutines.flow.Flow<0:0>(kotlin.Int;kotlin.coroutines.SuspendFunction1<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final inline fun <#A: kotlin/Any?> (kotlin.collections/Iterable<arrow.fx.coroutines/Resource<#A>>).arrow.fx.coroutines/sequence(): arrow.fx.coroutines/Resource<kotlin.collections/List<#A>> // arrow.fx.coroutines/sequence|sequence@kotlin.collections.Iterable<arrow.fx.coroutines.Resource<0:0>>(){0§<kotlin.Any?>}[0]
final object arrow.fx.coroutines.continuations/AcquireStep // arrow.fx.coroutines.continuations/AcquireStep|null[0]
final object arrow.fx.coroutines/Platform { // arrow.fx.coroutines/Platform|null[0]
    final fun composeErrors(arrow.core/NonEmptyList<kotlin/Throwable>): kotlin/Throwable // arrow.fx.coroutines/Platform.composeErrors|composeErrors(arrow.core.NonEmptyList<kotlin.Throwable>){}[0]
    final fun composeErrors(kotlin.collections/List<kotlin/Throwable>): kotlin/Throwable? // arrow.fx.coroutines/Platform.composeErrors|composeErrors(kotlin.collections.List<kotlin.Throwable>){}[0]
    final fun composeErrors(kotlin/Throwable, kotlin.collections/List<kotlin/Throwable>): kotlin/Throwable // arrow.fx.coroutines/Platform.composeErrors|composeErrors(kotlin.Throwable;kotlin.collections.List<kotlin.Throwable>){}[0]
    final fun composeErrors(kotlin/Throwable, kotlin/Array<out kotlin/Throwable>...): kotlin/Throwable // arrow.fx.coroutines/Platform.composeErrors|composeErrors(kotlin.Throwable;kotlin.Array<out|kotlin.Throwable>...){}[0]
    final fun composeErrors(kotlin/Throwable, kotlin/Result<kotlin/Any?>): kotlin/Throwable // arrow.fx.coroutines/Platform.composeErrors|composeErrors(kotlin.Throwable;kotlin.Result<kotlin.Any?>){}[0]
    final fun composeErrors(kotlin/Throwable, kotlin/Throwable?): kotlin/Throwable // arrow.fx.coroutines/Platform.composeErrors|composeErrors(kotlin.Throwable;kotlin.Throwable?){}[0]
    final fun composeErrors(kotlin/Throwable?, kotlin/Throwable?): kotlin/Throwable? // arrow.fx.coroutines/Platform.composeErrors|composeErrors(kotlin.Throwable?;kotlin.Throwable?){}[0]
}
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (arrow.fx.coroutines/Schedule<kotlin/Throwable, #B>).arrow.fx.coroutines/retryOrElseEither(kotlin.coroutines/SuspendFunction0<#A>, kotlin.coroutines/SuspendFunction2<kotlin/Throwable, #B, #C>): arrow.core/Either<#C, #A> // arrow.fx.coroutines/retryOrElseEither|retryOrElseEither@arrow.fx.coroutines.Schedule<kotlin.Throwable,0:1>(kotlin.coroutines.SuspendFunction0<0:0>;kotlin.coroutines.SuspendFunction2<kotlin.Throwable,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/parTraverseEither(kotlin.coroutines/CoroutineContext =..., kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #A, arrow.core/Either<#C, #B>>): arrow.core/Either<#C, kotlin.collections/List<#B>> // arrow.fx.coroutines/parTraverseEither|parTraverseEither@kotlin.collections.Iterable<0:0>(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:0,arrow.core.Either<0:2,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/parTraverseEither(kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #A, arrow.core/Either<#C, #B>>): arrow.core/Either<#C, kotlin.collections/List<#B>> // arrow.fx.coroutines/parTraverseEither|parTraverseEither@kotlin.collections.Iterable<0:0>(kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:0,arrow.core.Either<0:2,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/parTraverseEitherN(kotlin.coroutines/CoroutineContext =..., kotlin/Int, kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #A, arrow.core/Either<#C, #B>>): arrow.core/Either<#C, kotlin.collections/List<#B>> // arrow.fx.coroutines/parTraverseEitherN|parTraverseEitherN@kotlin.collections.Iterable<0:0>(kotlin.coroutines.CoroutineContext;kotlin.Int;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:0,arrow.core.Either<0:2,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/parTraverseEitherN(kotlin/Int, kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #A, arrow.core/Either<#C, #B>>): arrow.core/Either<#C, kotlin.collections/List<#B>> // arrow.fx.coroutines/parTraverseEitherN|parTraverseEitherN@kotlin.collections.Iterable<0:0>(kotlin.Int;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:0,arrow.core.Either<0:2,0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#B>).arrow.fx.coroutines/parMapOrAccumulate(kotlin.coroutines/CoroutineContext =..., kotlin.coroutines/SuspendFunction2<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B, #C>): arrow.core/Either<arrow.core/NonEmptyList<#A>, kotlin.collections/List<#C>> // arrow.fx.coroutines/parMapOrAccumulate|parMapOrAccumulate@kotlin.collections.Iterable<0:1>(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction2<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#B>).arrow.fx.coroutines/parMapOrAccumulate(kotlin.coroutines/CoroutineContext =..., kotlin/Function2<#A, #A, #A>, kotlin.coroutines/SuspendFunction2<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B, #C>): arrow.core/Either<#A, kotlin.collections/List<#C>> // arrow.fx.coroutines/parMapOrAccumulate|parMapOrAccumulate@kotlin.collections.Iterable<0:1>(kotlin.coroutines.CoroutineContext;kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction2<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#B>).arrow.fx.coroutines/parMapOrAccumulate(kotlin.coroutines/CoroutineContext =..., kotlin/Int, kotlin.coroutines/SuspendFunction2<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B, #C>): arrow.core/Either<arrow.core/NonEmptyList<#A>, kotlin.collections/List<#C>> // arrow.fx.coroutines/parMapOrAccumulate|parMapOrAccumulate@kotlin.collections.Iterable<0:1>(kotlin.coroutines.CoroutineContext;kotlin.Int;kotlin.coroutines.SuspendFunction2<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#B>).arrow.fx.coroutines/parMapOrAccumulate(kotlin.coroutines/CoroutineContext =..., kotlin/Int, kotlin/Function2<#A, #A, #A>, kotlin.coroutines/SuspendFunction2<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B, #C>): arrow.core/Either<#A, kotlin.collections/List<#C>> // arrow.fx.coroutines/parMapOrAccumulate|parMapOrAccumulate@kotlin.collections.Iterable<0:1>(kotlin.coroutines.CoroutineContext;kotlin.Int;kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction2<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#B>).arrow.fx.coroutines/parTraverseValidated(arrow.typeclasses/Semigroup<#A>, kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #B, arrow.core/Validated<#A, #C>>): arrow.core/Validated<#A, kotlin.collections/List<#C>> // arrow.fx.coroutines/parTraverseValidated|parTraverseValidated@kotlin.collections.Iterable<0:1>(arrow.typeclasses.Semigroup<0:0>;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:1,arrow.core.Validated<0:0,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#B>).arrow.fx.coroutines/parTraverseValidated(kotlin.coroutines/CoroutineContext =..., arrow.typeclasses/Semigroup<#A>, kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #B, arrow.core/Validated<#A, #C>>): arrow.core/Validated<#A, kotlin.collections/List<#C>> // arrow.fx.coroutines/parTraverseValidated|parTraverseValidated@kotlin.collections.Iterable<0:1>(kotlin.coroutines.CoroutineContext;arrow.typeclasses.Semigroup<0:0>;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:1,arrow.core.Validated<0:0,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#B>).arrow.fx.coroutines/parTraverseValidatedN(arrow.typeclasses/Semigroup<#A>, kotlin/Int, kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #B, arrow.core/Validated<#A, #C>>): arrow.core/Validated<#A, kotlin.collections/List<#C>> // arrow.fx.coroutines/parTraverseValidatedN|parTraverseValidatedN@kotlin.collections.Iterable<0:1>(arrow.typeclasses.Semigroup<0:0>;kotlin.Int;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:1,arrow.core.Validated<0:0,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> (kotlin.collections/Iterable<#B>).arrow.fx.coroutines/parTraverseValidatedN(kotlin.coroutines/CoroutineContext =..., arrow.typeclasses/Semigroup<#A>, kotlin/Int, kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #B, arrow.core/Validated<#A, #C>>): arrow.core/Validated<#A, kotlin.collections/List<#C>> // arrow.fx.coroutines/parTraverseValidatedN|parTraverseValidatedN@kotlin.collections.Iterable<0:1>(kotlin.coroutines.CoroutineContext;arrow.typeclasses.Semigroup<0:0>;kotlin.Int;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:1,arrow.core.Validated<0:0,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.fx.coroutines/Schedule<kotlin/Throwable, #B>).arrow.fx.coroutines/retry(kotlin.coroutines/SuspendFunction0<#A>): #A // arrow.fx.coroutines/retry|retry@arrow.fx.coroutines.Schedule<kotlin.Throwable,0:1>(kotlin.coroutines.SuspendFunction0<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (arrow.fx.coroutines/Schedule<kotlin/Throwable, #B>).arrow.fx.coroutines/retryOrElse(kotlin.coroutines/SuspendFunction0<#A>, kotlin.coroutines/SuspendFunction2<kotlin/Throwable, #B, #A>): #A // arrow.fx.coroutines/retryOrElse|retryOrElse@arrow.fx.coroutines.Schedule<kotlin.Throwable,0:1>(kotlin.coroutines.SuspendFunction0<0:0>;kotlin.coroutines.SuspendFunction2<kotlin.Throwable,0:1,0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/parMap(kotlin.coroutines/CoroutineContext =..., kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #A, #B>): kotlin.collections/List<#B> // arrow.fx.coroutines/parMap|parMap@kotlin.collections.Iterable<0:0>(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/parMap(kotlin.coroutines/CoroutineContext =..., kotlin/Int, kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #A, #B>): kotlin.collections/List<#B> // arrow.fx.coroutines/parMap|parMap@kotlin.collections.Iterable<0:0>(kotlin.coroutines.CoroutineContext;kotlin.Int;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/parMapNotNull(kotlin.coroutines/CoroutineContext =..., kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #A, #B?>): kotlin.collections/List<#B> // arrow.fx.coroutines/parMapNotNull|parMapNotNull@kotlin.collections.Iterable<0:0>(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/parMapNotNull(kotlin.coroutines/CoroutineContext =..., kotlin/Int, kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #A, #B?>): kotlin.collections/List<#B> // arrow.fx.coroutines/parMapNotNull|parMapNotNull@kotlin.collections.Iterable<0:0>(kotlin.coroutines.CoroutineContext;kotlin.Int;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:0,0:1?>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/parTraverse(kotlin.coroutines/CoroutineContext =..., kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #A, #B>): kotlin.collections/List<#B> // arrow.fx.coroutines/parTraverse|parTraverse@kotlin.collections.Iterable<0:0>(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/parTraverse(kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #A, #B>): kotlin.collections/List<#B> // arrow.fx.coroutines/parTraverse|parTraverse@kotlin.collections.Iterable<0:0>(kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/parTraverseN(kotlin.coroutines/CoroutineContext =..., kotlin/Int, kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #A, #B>): kotlin.collections/List<#B> // arrow.fx.coroutines/parTraverseN|parTraverseN@kotlin.collections.Iterable<0:0>(kotlin.coroutines.CoroutineContext;kotlin.Int;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/parTraverseN(kotlin/Int, kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #A, #B>): kotlin.collections/List<#B> // arrow.fx.coroutines/parTraverseN|parTraverseN@kotlin.collections.Iterable<0:0>(kotlin.Int;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/parTraverseResult(kotlin.coroutines/CoroutineContext =..., kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #A, kotlin/Result<#B>>): kotlin/Result<kotlin.collections/List<#B>> // arrow.fx.coroutines/parTraverseResult|parTraverseResult@kotlin.collections.Iterable<0:0>(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:0,kotlin.Result<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/parTraverseResult(kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #A, kotlin/Result<#B>>): kotlin/Result<kotlin.collections/List<#B>> // arrow.fx.coroutines/parTraverseResult|parTraverseResult@kotlin.collections.Iterable<0:0>(kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:0,kotlin.Result<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/parTraverseResultN(kotlin.coroutines/CoroutineContext =..., kotlin/Int, kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #A, kotlin/Result<#B>>): kotlin/Result<kotlin.collections/List<#B>> // arrow.fx.coroutines/parTraverseResultN|parTraverseResultN@kotlin.collections.Iterable<0:0>(kotlin.coroutines.CoroutineContext;kotlin.Int;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:0,kotlin.Result<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<#A>).arrow.fx.coroutines/parTraverseResultN(kotlin/Int, kotlin.coroutines/SuspendFunction2<kotlinx.coroutines/CoroutineScope, #A, kotlin/Result<#B>>): kotlin/Result<kotlin.collections/List<#B>> // arrow.fx.coroutines/parTraverseResultN|parTraverseResultN@kotlin.collections.Iterable<0:0>(kotlin.Int;kotlin.coroutines.SuspendFunction2<kotlinx.coroutines.CoroutineScope,0:0,kotlin.Result<0:1>>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction0<arrow.core/Either<#A, #B>>>).arrow.fx.coroutines/parSequenceEither(): arrow.core/Either<#A, kotlin.collections/List<#B>> // arrow.fx.coroutines/parSequenceEither|parSequenceEither@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction0<arrow.core.Either<0:0,0:1>>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction0<arrow.core/Either<#A, #B>>>).arrow.fx.coroutines/parSequenceEither(kotlin.coroutines/CoroutineContext =...): arrow.core/Either<#A, kotlin.collections/List<#B>> // arrow.fx.coroutines/parSequenceEither|parSequenceEither@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction0<arrow.core.Either<0:0,0:1>>>(kotlin.coroutines.CoroutineContext){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction0<arrow.core/Either<#A, #B>>>).arrow.fx.coroutines/parSequenceEitherN(kotlin.coroutines/CoroutineContext =..., kotlin/Int): arrow.core/Either<#A, kotlin.collections/List<#B>> // arrow.fx.coroutines/parSequenceEitherN|parSequenceEitherN@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction0<arrow.core.Either<0:0,0:1>>>(kotlin.coroutines.CoroutineContext;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction0<arrow.core/Either<#A, #B>>>).arrow.fx.coroutines/parSequenceEitherN(kotlin/Int): arrow.core/Either<#A, kotlin.collections/List<#B>> // arrow.fx.coroutines/parSequenceEitherN|parSequenceEitherN@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction0<arrow.core.Either<0:0,0:1>>>(kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction0<arrow.core/Validated<#A, #B>>>).arrow.fx.coroutines/parSequenceValidated(arrow.typeclasses/Semigroup<#A>): arrow.core/Validated<#A, kotlin.collections/List<#B>> // arrow.fx.coroutines/parSequenceValidated|parSequenceValidated@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction0<arrow.core.Validated<0:0,0:1>>>(arrow.typeclasses.Semigroup<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction0<arrow.core/Validated<#A, #B>>>).arrow.fx.coroutines/parSequenceValidated(kotlin.coroutines/CoroutineContext =..., arrow.typeclasses/Semigroup<#A>): arrow.core/Validated<#A, kotlin.collections/List<#B>> // arrow.fx.coroutines/parSequenceValidated|parSequenceValidated@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction0<arrow.core.Validated<0:0,0:1>>>(kotlin.coroutines.CoroutineContext;arrow.typeclasses.Semigroup<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction0<arrow.core/Validated<#A, #B>>>).arrow.fx.coroutines/parSequenceValidatedN(arrow.typeclasses/Semigroup<#A>, kotlin/Int): arrow.core/Validated<#A, kotlin.collections/List<#B>> // arrow.fx.coroutines/parSequenceValidatedN|parSequenceValidatedN@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction0<arrow.core.Validated<0:0,0:1>>>(arrow.typeclasses.Semigroup<0:0>;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction0<arrow.core/Validated<#A, #B>>>).arrow.fx.coroutines/parSequenceValidatedN(kotlin.coroutines/CoroutineContext =..., arrow.typeclasses/Semigroup<#A>, kotlin/Int): arrow.core/Validated<#A, kotlin.collections/List<#B>> // arrow.fx.coroutines/parSequenceValidatedN|parSequenceValidatedN@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction0<arrow.core.Validated<0:0,0:1>>>(kotlin.coroutines.CoroutineContext;arrow.typeclasses.Semigroup<0:0>;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, arrow.core/Either<#A, #B>>>).arrow.fx.coroutines/parSequenceEither(): arrow.core/Either<#A, kotlin.collections/List<#B>> // arrow.fx.coroutines/parSequenceEither|parSequenceEither@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,arrow.core.Either<0:0,0:1>>>(){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, arrow.core/Either<#A, #B>>>).arrow.fx.coroutines/parSequenceEither(kotlin.coroutines/CoroutineContext =...): arrow.core/Either<#A, kotlin.collections/List<#B>> // arrow.fx.coroutines/parSequenceEither|parSequenceEither@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,arrow.core.Either<0:0,0:1>>>(kotlin.coroutines.CoroutineContext){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, arrow.core/Either<#A, #B>>>).arrow.fx.coroutines/parSequenceEitherN(kotlin.coroutines/CoroutineContext =..., kotlin/Int): arrow.core/Either<#A, kotlin.collections/List<#B>> // arrow.fx.coroutines/parSequenceEitherN|parSequenceEitherN@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,arrow.core.Either<0:0,0:1>>>(kotlin.coroutines.CoroutineContext;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, arrow.core/Either<#A, #B>>>).arrow.fx.coroutines/parSequenceEitherN(kotlin/Int): arrow.core/Either<#A, kotlin.collections/List<#B>> // arrow.fx.coroutines/parSequenceEitherN|parSequenceEitherN@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,arrow.core.Either<0:0,0:1>>>(kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, arrow.core/Validated<#A, #B>>>).arrow.fx.coroutines/parSequenceValidated(arrow.typeclasses/Semigroup<#A>): arrow.core/Validated<#A, kotlin.collections/List<#B>> // arrow.fx.coroutines/parSequenceValidated|parSequenceValidated@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,arrow.core.Validated<0:0,0:1>>>(arrow.typeclasses.Semigroup<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, arrow.core/Validated<#A, #B>>>).arrow.fx.coroutines/parSequenceValidated(kotlin.coroutines/CoroutineContext =..., arrow.typeclasses/Semigroup<#A>): arrow.core/Validated<#A, kotlin.collections/List<#B>> // arrow.fx.coroutines/parSequenceValidated|parSequenceValidated@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,arrow.core.Validated<0:0,0:1>>>(kotlin.coroutines.CoroutineContext;arrow.typeclasses.Semigroup<0:0>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, arrow.core/Validated<#A, #B>>>).arrow.fx.coroutines/parSequenceValidatedN(arrow.typeclasses/Semigroup<#A>, kotlin/Int): arrow.core/Validated<#A, kotlin.collections/List<#B>> // arrow.fx.coroutines/parSequenceValidatedN|parSequenceValidatedN@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,arrow.core.Validated<0:0,0:1>>>(arrow.typeclasses.Semigroup<0:0>;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?, #B: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, arrow.core/Validated<#A, #B>>>).arrow.fx.coroutines/parSequenceValidatedN(kotlin.coroutines/CoroutineContext =..., arrow.typeclasses/Semigroup<#A>, kotlin/Int): arrow.core/Validated<#A, kotlin.collections/List<#B>> // arrow.fx.coroutines/parSequenceValidatedN|parSequenceValidatedN@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,arrow.core.Validated<0:0,0:1>>>(kotlin.coroutines.CoroutineContext;arrow.typeclasses.Semigroup<0:0>;kotlin.Int){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction0<#A>>).arrow.fx.coroutines/parSequence(): kotlin.collections/List<#A> // arrow.fx.coroutines/parSequence|parSequence@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction0<0:0>>(){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction0<#A>>).arrow.fx.coroutines/parSequence(kotlin.coroutines/CoroutineContext =...): kotlin.collections/List<#A> // arrow.fx.coroutines/parSequence|parSequence@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction0<0:0>>(kotlin.coroutines.CoroutineContext){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction0<#A>>).arrow.fx.coroutines/parSequenceN(kotlin.coroutines/CoroutineContext =..., kotlin/Int): kotlin.collections/List<#A> // arrow.fx.coroutines/parSequenceN|parSequenceN@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction0<0:0>>(kotlin.coroutines.CoroutineContext;kotlin.Int){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction0<#A>>).arrow.fx.coroutines/parSequenceN(kotlin/Int): kotlin.collections/List<#A> // arrow.fx.coroutines/parSequenceN|parSequenceN@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction0<0:0>>(kotlin.Int){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction0<kotlin/Result<#A>>>).arrow.fx.coroutines/parSequenceResult(kotlin.coroutines/CoroutineContext =...): kotlin/Result<kotlin.collections/List<#A>> // arrow.fx.coroutines/parSequenceResult|parSequenceResult@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction0<kotlin.Result<0:0>>>(kotlin.coroutines.CoroutineContext){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction0<kotlin/Result<#A>>>).arrow.fx.coroutines/parSequenceResultN(kotlin.coroutines/CoroutineContext =..., kotlin/Int): kotlin/Result<kotlin.collections/List<#A>> // arrow.fx.coroutines/parSequenceResultN|parSequenceResultN@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction0<kotlin.Result<0:0>>>(kotlin.coroutines.CoroutineContext;kotlin.Int){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction0<kotlin/Result<#A>>>).arrow.fx.coroutines/parSequenceResultN(kotlin/Int): kotlin/Result<kotlin.collections/List<#A>> // arrow.fx.coroutines/parSequenceResultN|parSequenceResultN@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction0<kotlin.Result<0:0>>>(kotlin.Int){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>>).arrow.fx.coroutines/parSequence(): kotlin.collections/List<#A> // arrow.fx.coroutines/parSequence|parSequence@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>>(){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>>).arrow.fx.coroutines/parSequence(kotlin.coroutines/CoroutineContext =...): kotlin.collections/List<#A> // arrow.fx.coroutines/parSequence|parSequence@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>>(kotlin.coroutines.CoroutineContext){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>>).arrow.fx.coroutines/parSequenceN(kotlin.coroutines/CoroutineContext =..., kotlin/Int): kotlin.collections/List<#A> // arrow.fx.coroutines/parSequenceN|parSequenceN@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>>(kotlin.coroutines.CoroutineContext;kotlin.Int){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>>).arrow.fx.coroutines/parSequenceN(kotlin/Int): kotlin.collections/List<#A> // arrow.fx.coroutines/parSequenceN|parSequenceN@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>>(kotlin.Int){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, kotlin/Result<#A>>>).arrow.fx.coroutines/parSequenceResult(kotlin.coroutines/CoroutineContext =...): kotlin/Result<kotlin.collections/List<#A>> // arrow.fx.coroutines/parSequenceResult|parSequenceResult@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,kotlin.Result<0:0>>>(kotlin.coroutines.CoroutineContext){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, kotlin/Result<#A>>>).arrow.fx.coroutines/parSequenceResultN(kotlin.coroutines/CoroutineContext =..., kotlin/Int): kotlin/Result<kotlin.collections/List<#A>> // arrow.fx.coroutines/parSequenceResultN|parSequenceResultN@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,kotlin.Result<0:0>>>(kotlin.coroutines.CoroutineContext;kotlin.Int){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> (kotlin.collections/Iterable<kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, kotlin/Result<#A>>>).arrow.fx.coroutines/parSequenceResultN(kotlin/Int): kotlin/Result<kotlin.collections/List<#A>> // arrow.fx.coroutines/parSequenceResultN|parSequenceResultN@kotlin.collections.Iterable<kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,kotlin.Result<0:0>>>(kotlin.Int){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> arrow.fx.coroutines/never(): #A // arrow.fx.coroutines/never|never(){0§<kotlin.Any?>}[0]
final suspend fun <#A: kotlin/Any?> arrow.fx.coroutines/resourceScope(kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines.continuations/ResourceScope, #A>): #A // arrow.fx.coroutines/resourceScope|resourceScope(kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.continuations.ResourceScope,0:0>){0§<kotlin.Any?>}[0]
final suspend fun arrow.fx.coroutines/cancelAndCompose(kotlinx.coroutines/Deferred<*>, kotlinx.coroutines/Deferred<*>) // arrow.fx.coroutines/cancelAndCompose|cancelAndCompose(kotlinx.coroutines.Deferred<*>;kotlinx.coroutines.Deferred<*>){}[0]
final suspend fun arrow.fx.coroutines/unit() // arrow.fx.coroutines/unit|unit(){}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.fx.coroutines/parZipOrAccumulate(crossinline kotlin/Function2<#A, #A, #A>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #G>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #H>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #I>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #J>, crossinline kotlin.coroutines/SuspendFunction10<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K>): #K // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:6>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:7>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:8>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:9>;kotlin.coroutines.SuspendFunction10<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.fx.coroutines/parZipOrAccumulate(kotlin.coroutines/CoroutineContext, crossinline kotlin/Function2<#A, #A, #A>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #G>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #H>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #I>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #J>, crossinline kotlin.coroutines/SuspendFunction10<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K>): #K // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.coroutines.CoroutineContext;kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:6>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:7>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:8>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:9>;kotlin.coroutines.SuspendFunction10<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.fx.coroutines/parZipOrAccumulate(crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #G>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #H>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #I>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #J>, crossinline kotlin.coroutines/SuspendFunction10<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K>): #K // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:6>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:7>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:8>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:9>;kotlin.coroutines.SuspendFunction10<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?, #K: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.fx.coroutines/parZipOrAccumulate(kotlin.coroutines/CoroutineContext, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #G>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #H>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #I>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #J>, crossinline kotlin.coroutines/SuspendFunction10<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G, #H, #I, #J, #K>): #K // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:6>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:7>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:8>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:9>;kotlin.coroutines.SuspendFunction10<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9,0:10>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>;10§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.fx.coroutines/parZipOrAccumulate(crossinline kotlin/Function2<#A, #A, #A>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #G>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #H>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #I>, crossinline kotlin.coroutines/SuspendFunction9<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G, #H, #I, #J>): #J // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:6>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:7>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:8>;kotlin.coroutines.SuspendFunction9<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.fx.coroutines/parZipOrAccumulate(kotlin.coroutines/CoroutineContext, crossinline kotlin/Function2<#A, #A, #A>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #G>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #H>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #I>, crossinline kotlin.coroutines/SuspendFunction9<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G, #H, #I, #J>): #J // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.coroutines.CoroutineContext;kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:6>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:7>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:8>;kotlin.coroutines.SuspendFunction9<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.fx.coroutines/parZipOrAccumulate(crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #G>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #H>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #I>, crossinline kotlin.coroutines/SuspendFunction9<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G, #H, #I, #J>): #J // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:6>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:7>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:8>;kotlin.coroutines.SuspendFunction9<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.fx.coroutines/parZipOrAccumulate(kotlin.coroutines/CoroutineContext, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #G>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #H>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #I>, crossinline kotlin.coroutines/SuspendFunction9<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G, #H, #I, #J>): #J // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:6>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:7>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:8>;kotlin.coroutines.SuspendFunction9<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?> arrow.fx.coroutines/parZip(crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #C>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #D>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #E>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #F>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #G>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #H>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #I>, crossinline kotlin.coroutines/SuspendFunction10<kotlinx.coroutines/CoroutineScope, #A, #B, #C, #D, #E, #F, #G, #H, #I, #J>): #J // arrow.fx.coroutines/parZip|parZip(kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:2>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:3>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:4>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:5>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:6>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:7>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:8>;kotlin.coroutines.SuspendFunction10<kotlinx.coroutines.CoroutineScope,0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?, #J: kotlin/Any?> arrow.fx.coroutines/parZip(kotlin.coroutines/CoroutineContext =..., crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #C>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #D>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #E>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #F>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #G>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #H>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #I>, crossinline kotlin.coroutines/SuspendFunction10<kotlinx.coroutines/CoroutineScope, #A, #B, #C, #D, #E, #F, #G, #H, #I, #J>): #J // arrow.fx.coroutines/parZip|parZip(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:2>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:3>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:4>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:5>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:6>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:7>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:8>;kotlin.coroutines.SuspendFunction10<kotlinx.coroutines.CoroutineScope,0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.fx.coroutines/parZipOrAccumulate(crossinline kotlin/Function2<#A, #A, #A>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #G>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #H>, crossinline kotlin.coroutines/SuspendFunction8<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G, #H, #I>): #I // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:6>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:7>;kotlin.coroutines.SuspendFunction8<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.fx.coroutines/parZipOrAccumulate(kotlin.coroutines/CoroutineContext, crossinline kotlin/Function2<#A, #A, #A>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #G>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #H>, crossinline kotlin.coroutines/SuspendFunction8<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G, #H, #I>): #I // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.coroutines.CoroutineContext;kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:6>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:7>;kotlin.coroutines.SuspendFunction8<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.fx.coroutines/parZipOrAccumulate(crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #G>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #H>, crossinline kotlin.coroutines/SuspendFunction8<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G, #H, #I>): #I // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:6>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:7>;kotlin.coroutines.SuspendFunction8<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.fx.coroutines/parZipOrAccumulate(kotlin.coroutines/CoroutineContext, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #G>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #H>, crossinline kotlin.coroutines/SuspendFunction8<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G, #H, #I>): #I // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:6>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:7>;kotlin.coroutines.SuspendFunction8<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?> arrow.fx.coroutines/parZip(crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #C>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #D>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #E>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #F>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #G>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #H>, crossinline kotlin.coroutines/SuspendFunction9<kotlinx.coroutines/CoroutineScope, #A, #B, #C, #D, #E, #F, #G, #H, #I>): #I // arrow.fx.coroutines/parZip|parZip(kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:2>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:3>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:4>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:5>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:6>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:7>;kotlin.coroutines.SuspendFunction9<kotlinx.coroutines.CoroutineScope,0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?, #I: kotlin/Any?> arrow.fx.coroutines/parZip(kotlin.coroutines/CoroutineContext =..., crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #C>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #D>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #E>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #F>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #G>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #H>, crossinline kotlin.coroutines/SuspendFunction9<kotlinx.coroutines/CoroutineScope, #A, #B, #C, #D, #E, #F, #G, #H, #I>): #I // arrow.fx.coroutines/parZip|parZip(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:2>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:3>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:4>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:5>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:6>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:7>;kotlin.coroutines.SuspendFunction9<kotlinx.coroutines.CoroutineScope,0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.fx.coroutines/parZipOrAccumulate(crossinline kotlin/Function2<#A, #A, #A>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #G>, crossinline kotlin.coroutines/SuspendFunction7<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G, #H>): #H // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:6>;kotlin.coroutines.SuspendFunction7<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.fx.coroutines/parZipOrAccumulate(kotlin.coroutines/CoroutineContext, crossinline kotlin/Function2<#A, #A, #A>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #G>, crossinline kotlin.coroutines/SuspendFunction7<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G, #H>): #H // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.coroutines.CoroutineContext;kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:6>;kotlin.coroutines.SuspendFunction7<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.fx.coroutines/parZipOrAccumulate(crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #G>, crossinline kotlin.coroutines/SuspendFunction7<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G, #H>): #H // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:6>;kotlin.coroutines.SuspendFunction7<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.fx.coroutines/parZipOrAccumulate(kotlin.coroutines/CoroutineContext, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #G>, crossinline kotlin.coroutines/SuspendFunction7<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G, #H>): #H // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:6>;kotlin.coroutines.SuspendFunction7<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?> arrow.fx.coroutines/parZip(crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #C>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #D>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #E>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #F>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #G>, crossinline kotlin.coroutines/SuspendFunction8<kotlinx.coroutines/CoroutineScope, #A, #B, #C, #D, #E, #F, #G, #H>): #H // arrow.fx.coroutines/parZip|parZip(kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:2>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:3>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:4>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:5>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:6>;kotlin.coroutines.SuspendFunction8<kotlinx.coroutines.CoroutineScope,0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?, #H: kotlin/Any?> arrow.fx.coroutines/parZip(kotlin.coroutines/CoroutineContext =..., crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #C>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #D>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #E>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #F>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #G>, crossinline kotlin.coroutines/SuspendFunction8<kotlinx.coroutines/CoroutineScope, #A, #B, #C, #D, #E, #F, #G, #H>): #H // arrow.fx.coroutines/parZip|parZip(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:2>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:3>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:4>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:5>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:6>;kotlin.coroutines.SuspendFunction8<kotlinx.coroutines.CoroutineScope,0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.fx.coroutines/parZipOrAccumulate(crossinline kotlin/Function2<#A, #A, #A>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction6<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G>): #G // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction6<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.fx.coroutines/parZipOrAccumulate(kotlin.coroutines/CoroutineContext, crossinline kotlin/Function2<#A, #A, #A>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction6<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G>): #G // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.coroutines.CoroutineContext;kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction6<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.fx.coroutines/parZipOrAccumulate(crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction6<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G>): #G // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction6<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.fx.coroutines/parZipOrAccumulate(kotlin.coroutines/CoroutineContext, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #F>, crossinline kotlin.coroutines/SuspendFunction6<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F, #G>): #G // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:5>;kotlin.coroutines.SuspendFunction6<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?> arrow.fx.coroutines/parZip(crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #C>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #D>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #E>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #F>, crossinline kotlin.coroutines/SuspendFunction7<kotlinx.coroutines/CoroutineScope, #A, #B, #C, #D, #E, #F, #G>): #G // arrow.fx.coroutines/parZip|parZip(kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:2>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:3>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:4>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:5>;kotlin.coroutines.SuspendFunction7<kotlinx.coroutines.CoroutineScope,0:0,0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?, #G: kotlin/Any?> arrow.fx.coroutines/parZip(kotlin.coroutines/CoroutineContext =..., crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #C>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #D>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #E>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #F>, crossinline kotlin.coroutines/SuspendFunction7<kotlinx.coroutines/CoroutineScope, #A, #B, #C, #D, #E, #F, #G>): #G // arrow.fx.coroutines/parZip|parZip(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:2>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:3>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:4>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:5>;kotlin.coroutines.SuspendFunction7<kotlinx.coroutines.CoroutineScope,0:0,0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.fx.coroutines/parZipOrAccumulate(crossinline kotlin/Function2<#A, #A, #A>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction5<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F>): #F // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction5<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.fx.coroutines/parZipOrAccumulate(kotlin.coroutines/CoroutineContext, crossinline kotlin/Function2<#A, #A, #A>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction5<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F>): #F // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.coroutines.CoroutineContext;kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction5<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.fx.coroutines/parZipOrAccumulate(crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction5<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F>): #F // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction5<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.fx.coroutines/parZipOrAccumulate(kotlin.coroutines/CoroutineContext, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #E>, crossinline kotlin.coroutines/SuspendFunction5<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E, #F>): #F // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:4>;kotlin.coroutines.SuspendFunction5<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?> arrow.fx.coroutines/parZip(crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #C>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #D>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #E>, crossinline kotlin.coroutines/SuspendFunction6<kotlinx.coroutines/CoroutineScope, #A, #B, #C, #D, #E, #F>): #F // arrow.fx.coroutines/parZip|parZip(kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:2>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:3>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:4>;kotlin.coroutines.SuspendFunction6<kotlinx.coroutines.CoroutineScope,0:0,0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?, #F: kotlin/Any?> arrow.fx.coroutines/parZip(kotlin.coroutines/CoroutineContext =..., crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #C>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #D>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #E>, crossinline kotlin.coroutines/SuspendFunction6<kotlinx.coroutines/CoroutineScope, #A, #B, #C, #D, #E, #F>): #F // arrow.fx.coroutines/parZip|parZip(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:2>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:3>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:4>;kotlin.coroutines.SuspendFunction6<kotlinx.coroutines.CoroutineScope,0:0,0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.fx.coroutines/parZipOrAccumulate(crossinline kotlin/Function2<#A, #A, #A>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction4<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E>): #E // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction4<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.fx.coroutines/parZipOrAccumulate(kotlin.coroutines/CoroutineContext, crossinline kotlin/Function2<#A, #A, #A>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction4<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E>): #E // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.coroutines.CoroutineContext;kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction4<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.fx.coroutines/parZipOrAccumulate(crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction4<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E>): #E // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction4<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.fx.coroutines/parZipOrAccumulate(kotlin.coroutines/CoroutineContext, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #D>, crossinline kotlin.coroutines/SuspendFunction4<kotlinx.coroutines/CoroutineScope, #B, #C, #D, #E>): #E // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:3>;kotlin.coroutines.SuspendFunction4<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?> arrow.fx.coroutines/parZip(crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #C>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #D>, crossinline kotlin.coroutines/SuspendFunction5<kotlinx.coroutines/CoroutineScope, #A, #B, #C, #D, #E>): #E // arrow.fx.coroutines/parZip|parZip(kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:2>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:3>;kotlin.coroutines.SuspendFunction5<kotlinx.coroutines.CoroutineScope,0:0,0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?, #E: kotlin/Any?> arrow.fx.coroutines/parZip(kotlin.coroutines/CoroutineContext =..., crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #C>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #D>, crossinline kotlin.coroutines/SuspendFunction5<kotlinx.coroutines/CoroutineScope, #A, #B, #C, #D, #E>): #E // arrow.fx.coroutines/parZip|parZip(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:2>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:3>;kotlin.coroutines.SuspendFunction5<kotlinx.coroutines.CoroutineScope,0:0,0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.fx.coroutines/parZipOrAccumulate(crossinline kotlin/Function2<#A, #A, #A>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction3<kotlinx.coroutines/CoroutineScope, #B, #C, #D>): #D // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction3<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (arrow.core.raise/Raise<#A>).arrow.fx.coroutines/parZipOrAccumulate(kotlin.coroutines/CoroutineContext, crossinline kotlin/Function2<#A, #A, #A>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction3<kotlinx.coroutines/CoroutineScope, #B, #C, #D>): #D // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<0:0>(kotlin.coroutines.CoroutineContext;kotlin.Function2<0:0,0:0,0:0>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction3<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.fx.coroutines/parZipOrAccumulate(crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction3<kotlinx.coroutines/CoroutineScope, #B, #C, #D>): #D // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction3<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> (arrow.core.raise/Raise<arrow.core/NonEmptyList<#A>>).arrow.fx.coroutines/parZipOrAccumulate(kotlin.coroutines/CoroutineContext, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #B>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ScopedRaiseAccumulate<#A>, #C>, crossinline kotlin.coroutines/SuspendFunction3<kotlinx.coroutines/CoroutineScope, #B, #C, #D>): #D // arrow.fx.coroutines/parZipOrAccumulate|parZipOrAccumulate@arrow.core.raise.Raise<arrow.core.NonEmptyList<0:0>>(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:1>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ScopedRaiseAccumulate<0:0>,0:2>;kotlin.coroutines.SuspendFunction3<kotlinx.coroutines.CoroutineScope,0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> arrow.fx.coroutines/parZip(crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #C>, crossinline kotlin.coroutines/SuspendFunction4<kotlinx.coroutines/CoroutineScope, #A, #B, #C, #D>): #D // arrow.fx.coroutines/parZip|parZip(kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:2>;kotlin.coroutines.SuspendFunction4<kotlinx.coroutines.CoroutineScope,0:0,0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?, #D: kotlin/Any?> arrow.fx.coroutines/parZip(kotlin.coroutines/CoroutineContext =..., crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #C>, crossinline kotlin.coroutines/SuspendFunction4<kotlinx.coroutines/CoroutineScope, #A, #B, #C, #D>): #D // arrow.fx.coroutines/parZip|parZip(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:2>;kotlin.coroutines.SuspendFunction4<kotlinx.coroutines.CoroutineScope,0:0,0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> arrow.fx.coroutines/parZip(crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction3<kotlinx.coroutines/CoroutineScope, #A, #B, #C>): #C // arrow.fx.coroutines/parZip|parZip(kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction3<kotlinx.coroutines.CoroutineScope,0:0,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> arrow.fx.coroutines/parZip(kotlin.coroutines/CoroutineContext =..., crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction3<kotlinx.coroutines/CoroutineScope, #A, #B, #C>): #C // arrow.fx.coroutines/parZip|parZip(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction3<kotlinx.coroutines.CoroutineScope,0:0,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> arrow.fx.coroutines/raceN(crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #C>): arrow.fx.coroutines/Race3<#A, #B, #C> // arrow.fx.coroutines/raceN|raceN(kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?, #C: kotlin/Any?> arrow.fx.coroutines/raceN(kotlin.coroutines/CoroutineContext =..., crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #C>): arrow.fx.coroutines/Race3<#A, #B, #C> // arrow.fx.coroutines/raceN|raceN(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?> arrow.fx.coroutines/bracket(crossinline kotlin.coroutines/SuspendFunction0<#A>, kotlin.coroutines/SuspendFunction1<#A, #B>, crossinline kotlin.coroutines/SuspendFunction1<#A, kotlin/Unit>): #B // arrow.fx.coroutines/bracket|bracket(kotlin.coroutines.SuspendFunction0<0:0>;kotlin.coroutines.SuspendFunction1<0:0,0:1>;kotlin.coroutines.SuspendFunction1<0:0,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?> arrow.fx.coroutines/bracketCase(crossinline kotlin.coroutines/SuspendFunction0<#A>, kotlin.coroutines/SuspendFunction1<#A, #B>, crossinline kotlin.coroutines/SuspendFunction2<#A, arrow.fx.coroutines/ExitCase, kotlin/Unit>): #B // arrow.fx.coroutines/bracketCase|bracketCase(kotlin.coroutines.SuspendFunction0<0:0>;kotlin.coroutines.SuspendFunction1<0:0,0:1>;kotlin.coroutines.SuspendFunction2<0:0,arrow.fx.coroutines.ExitCase,kotlin.Unit>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?> arrow.fx.coroutines/raceN(crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>): arrow.core/Either<#A, #B> // arrow.fx.coroutines/raceN|raceN(kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?, #B: kotlin/Any?> arrow.fx.coroutines/raceN(kotlin.coroutines/CoroutineContext =..., crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #A>, crossinline kotlin.coroutines/SuspendFunction1<kotlinx.coroutines/CoroutineScope, #B>): arrow.core/Either<#A, #B> // arrow.fx.coroutines/raceN|raceN(kotlin.coroutines.CoroutineContext;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:0>;kotlin.coroutines.SuspendFunction1<kotlinx.coroutines.CoroutineScope,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?> arrow.fx.coroutines/guarantee(kotlin.coroutines/SuspendFunction0<#A>, crossinline kotlin.coroutines/SuspendFunction0<kotlin/Unit>): #A // arrow.fx.coroutines/guarantee|guarantee(kotlin.coroutines.SuspendFunction0<0:0>;kotlin.coroutines.SuspendFunction0<kotlin.Unit>){0§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?> arrow.fx.coroutines/guaranteeCase(kotlin.coroutines/SuspendFunction0<#A>, crossinline kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ExitCase, kotlin/Unit>): #A // arrow.fx.coroutines/guaranteeCase|guaranteeCase(kotlin.coroutines.SuspendFunction0<0:0>;kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.ExitCase,kotlin.Unit>){0§<kotlin.Any?>}[0]
final suspend inline fun <#A: kotlin/Any?> arrow.fx.coroutines/onCancel(kotlin.coroutines/SuspendFunction0<#A>, crossinline kotlin.coroutines/SuspendFunction0<kotlin/Unit>): #A // arrow.fx.coroutines/onCancel|onCancel(kotlin.coroutines.SuspendFunction0<0:0>;kotlin.coroutines.SuspendFunction0<kotlin.Unit>){0§<kotlin.Any?>}[0]
final suspend inline fun arrow.fx.coroutines/runReleaseAndRethrow(kotlin/Throwable, crossinline kotlin.coroutines/SuspendFunction0<kotlin/Unit>): kotlin/Nothing // arrow.fx.coroutines/runReleaseAndRethrow|runReleaseAndRethrow(kotlin.Throwable;kotlin.coroutines.SuspendFunction0<kotlin.Unit>){}[0]
final value class <#A: kotlin/Any?> arrow.fx.coroutines/Use { // arrow.fx.coroutines/Use|null[0]
    constructor <init>(kotlin.coroutines/SuspendFunction0<#A>) // arrow.fx.coroutines/Use.<init>|<init>(kotlin.coroutines.SuspendFunction0<1:0>){}[0]
    final fun equals(kotlin/Any?): kotlin/Boolean // arrow.fx.coroutines/Use.equals|equals(kotlin.Any?){}[0]
    final fun hashCode(): kotlin/Int // arrow.fx.coroutines/Use.hashCode|hashCode(){}[0]
    final fun toString(): kotlin/String // arrow.fx.coroutines/Use.toString|toString(){}[0]
}
open annotation class arrow.fx.coroutines.continuations/ResourceDSL : kotlin/Annotation { // arrow.fx.coroutines.continuations/ResourceDSL|null[0]
    constructor <init>() // arrow.fx.coroutines.continuations/ResourceDSL.<init>|<init>(){}[0]
}
open annotation class arrow.fx.coroutines.continuations/ScopeDSL : kotlin/Annotation { // arrow.fx.coroutines.continuations/ScopeDSL|null[0]
    constructor <init>() // arrow.fx.coroutines.continuations/ScopeDSL.<init>|<init>(){}[0]
}
sealed class <#A: kotlin/Any?, #B: kotlin/Any?> arrow.fx.coroutines/Schedule { // arrow.fx.coroutines/Schedule|null[0]
    abstract fun <#A1: #A, #B1: kotlin/Any?, #C1: kotlin/Any?> combineNanos(arrow.fx.coroutines/Schedule<#A1, #B1>, kotlin/Function2<kotlin/Boolean, kotlin/Boolean, kotlin/Boolean>, kotlin/Function2<kotlin/Double, kotlin/Double, kotlin/Double>, kotlin/Function2<#B, #B1, #C1>): arrow.fx.coroutines/Schedule<#A1, #C1> // arrow.fx.coroutines/Schedule.combineNanos|combineNanos(arrow.fx.coroutines.Schedule<0:0,0:1>;kotlin.Function2<kotlin.Boolean,kotlin.Boolean,kotlin.Boolean>;kotlin.Function2<kotlin.Double,kotlin.Double,kotlin.Double>;kotlin.Function2<1:1,0:1,0:2>){0§<1:0>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
    abstract fun <#A1: #A, #B1: kotlin/Any?> andThen(arrow.fx.coroutines/Schedule<#A1, #B1>): arrow.fx.coroutines/Schedule<#A1, arrow.core/Either<#B, #B1>> // arrow.fx.coroutines/Schedule.andThen|andThen(arrow.fx.coroutines.Schedule<0:0,0:1>){0§<1:0>;1§<kotlin.Any?>}[0]
    abstract fun <#A1: #A> check(kotlin.coroutines/SuspendFunction2<#A1, #B, kotlin/Boolean>): arrow.fx.coroutines/Schedule<#A1, #B> // arrow.fx.coroutines/Schedule.check|check(kotlin.coroutines.SuspendFunction2<0:0,1:1,kotlin.Boolean>){0§<1:0>}[0]
    abstract fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?> zip(arrow.fx.coroutines/Schedule<#A1, #B1>, kotlin/Function2<#B, #B1, #C1>): arrow.fx.coroutines/Schedule<kotlin/Pair<#A, #A1>, #C1> // arrow.fx.coroutines/Schedule.zip|zip(arrow.fx.coroutines.Schedule<0:0,0:1>;kotlin.Function2<1:1,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
    abstract fun <#A1: kotlin/Any?, #B1: kotlin/Any?> choose(arrow.fx.coroutines/Schedule<#A1, #B1>): arrow.fx.coroutines/Schedule<arrow.core/Either<#A, #A1>, arrow.core/Either<#B, #B1>> // arrow.fx.coroutines/Schedule.choose|choose(arrow.fx.coroutines.Schedule<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    abstract fun <#A1: kotlin/Any?> contramap(kotlin.coroutines/SuspendFunction1<#A1, #A>): arrow.fx.coroutines/Schedule<#A1, #B> // arrow.fx.coroutines/Schedule.contramap|contramap(kotlin.coroutines.SuspendFunction1<0:0,1:0>){0§<kotlin.Any?>}[0]
    abstract fun <#A1: kotlin/Any?> foldLazy(kotlin.coroutines/SuspendFunction0<#A1>, kotlin.coroutines/SuspendFunction2<#A1, #B, #A1>): arrow.fx.coroutines/Schedule<#A, #A1> // arrow.fx.coroutines/Schedule.foldLazy|foldLazy(kotlin.coroutines.SuspendFunction0<0:0>;kotlin.coroutines.SuspendFunction2<0:0,1:1,0:0>){0§<kotlin.Any?>}[0]
    abstract fun <#A1: kotlin/Any?> map(kotlin/Function1<#B, #A1>): arrow.fx.coroutines/Schedule<#A, #A1> // arrow.fx.coroutines/Schedule.map|map(kotlin.Function1<1:1,0:0>){0§<kotlin.Any?>}[0]
    abstract fun <#A1: kotlin/Any?> pipe(arrow.fx.coroutines/Schedule<#B, #A1>): arrow.fx.coroutines/Schedule<#A, #A1> // arrow.fx.coroutines/Schedule.pipe|pipe(arrow.fx.coroutines.Schedule<1:1,0:0>){0§<kotlin.Any?>}[0]
    abstract fun forever(): arrow.fx.coroutines/Schedule<#A, #B> // arrow.fx.coroutines/Schedule.forever|forever(){}[0]
    abstract fun log(kotlin.coroutines/SuspendFunction2<#A, #B, kotlin/Unit>): arrow.fx.coroutines/Schedule<#A, #B> // arrow.fx.coroutines/Schedule.log|log(kotlin.coroutines.SuspendFunction2<1:0,1:1,kotlin.Unit>){}[0]
    abstract fun logInput(kotlin.coroutines/SuspendFunction1<#A, kotlin/Unit>): arrow.fx.coroutines/Schedule<#A, #B> // arrow.fx.coroutines/Schedule.logInput|logInput(kotlin.coroutines.SuspendFunction1<1:0,kotlin.Unit>){}[0]
    abstract fun logOutput(kotlin.coroutines/SuspendFunction1<#B, kotlin/Unit>): arrow.fx.coroutines/Schedule<#A, #B> // arrow.fx.coroutines/Schedule.logOutput|logOutput(kotlin.coroutines.SuspendFunction1<1:1,kotlin.Unit>){}[0]
    abstract fun modifyNanos(kotlin.coroutines/SuspendFunction2<#B, kotlin/Double, kotlin/Double>): arrow.fx.coroutines/Schedule<#A, #B> // arrow.fx.coroutines/Schedule.modifyNanos|modifyNanos(kotlin.coroutines.SuspendFunction2<1:1,kotlin.Double,kotlin.Double>){}[0]
    abstract fun not(): arrow.fx.coroutines/Schedule<#A, #B> // arrow.fx.coroutines/Schedule.not|not(){}[0]
    abstract suspend fun <#A1: kotlin/Any?> repeatOrElseEither(kotlin.coroutines/SuspendFunction0<#A>, kotlin.coroutines/SuspendFunction2<kotlin/Throwable, #B?, #A1>): arrow.core/Either<#A1, #B> // arrow.fx.coroutines/Schedule.repeatOrElseEither|repeatOrElseEither(kotlin.coroutines.SuspendFunction0<1:0>;kotlin.coroutines.SuspendFunction2<kotlin.Throwable,1:1?,0:0>){0§<kotlin.Any?>}[0]
    abstract suspend fun <#A1: kotlin/Any?> repeatOrElseEitherAsFlow(kotlin.coroutines/SuspendFunction0<#A>, kotlin.coroutines/SuspendFunction2<kotlin/Throwable, #B?, #A1>): kotlinx.coroutines.flow/Flow<arrow.core/Either<#A1, #B>> // arrow.fx.coroutines/Schedule.repeatOrElseEitherAsFlow|repeatOrElseEitherAsFlow(kotlin.coroutines.SuspendFunction0<1:0>;kotlin.coroutines.SuspendFunction2<kotlin.Throwable,1:1?,0:0>){0§<kotlin.Any?>}[0]
    constructor <init>() // arrow.fx.coroutines/Schedule.<init>|<init>(){}[0]
    final class <#A1: out kotlin/Any?, #B1: out kotlin/Any?> Decision { // arrow.fx.coroutines/Schedule.Decision|null[0]
        constructor <init>(kotlin/Boolean, kotlin/Double, #A1, arrow.core/Eval<#B1>) // arrow.fx.coroutines/Schedule.Decision.<init>|<init>(kotlin.Boolean;kotlin.Double;1:0;arrow.core.Eval<1:1>){}[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?> combine(arrow.fx.coroutines/Schedule.Decision<#A2, #B2>, kotlin/Function2<kotlin/Boolean, kotlin/Boolean, kotlin/Boolean>, kotlin/Function2<kotlin.time/Duration, kotlin.time/Duration, kotlin.time/Duration>, kotlin/Function2<#B1, #B2, #C2>): arrow.fx.coroutines/Schedule.Decision<kotlin/Pair<#A1, #A2>, #C2> // arrow.fx.coroutines/Schedule.Decision.combine|combine(arrow.fx.coroutines.Schedule.Decision<0:0,0:1>;kotlin.Function2<kotlin.Boolean,kotlin.Boolean,kotlin.Boolean>;kotlin.Function2<kotlin.time.Duration,kotlin.time.Duration,kotlin.time.Duration>;kotlin.Function2<1:1,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?> combineNanos(arrow.fx.coroutines/Schedule.Decision<#A2, #B2>, kotlin/Function2<kotlin/Boolean, kotlin/Boolean, kotlin/Boolean>, kotlin/Function2<kotlin/Double, kotlin/Double, kotlin/Double>, kotlin/Function2<#B1, #B2, #C2>): arrow.fx.coroutines/Schedule.Decision<kotlin/Pair<#A1, #A2>, #C2> // arrow.fx.coroutines/Schedule.Decision.combineNanos|combineNanos(arrow.fx.coroutines.Schedule.Decision<0:0,0:1>;kotlin.Function2<kotlin.Boolean,kotlin.Boolean,kotlin.Boolean>;kotlin.Function2<kotlin.Double,kotlin.Double,kotlin.Double>;kotlin.Function2<1:1,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> bimap(kotlin/Function1<#A1, #A2>, kotlin/Function1<#B1, #B2>): arrow.fx.coroutines/Schedule.Decision<#A2, #B2> // arrow.fx.coroutines/Schedule.Decision.bimap|bimap(kotlin.Function1<1:0,0:0>;kotlin.Function1<1:1,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> map(kotlin/Function1<#B1, #A2>): arrow.fx.coroutines/Schedule.Decision<#A1, #A2> // arrow.fx.coroutines/Schedule.Decision.map|map(kotlin.Function1<1:1,0:0>){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> mapLeft(kotlin/Function1<#A1, #A2>): arrow.fx.coroutines/Schedule.Decision<#A2, #B1> // arrow.fx.coroutines/Schedule.Decision.mapLeft|mapLeft(kotlin.Function1<1:0,0:0>){0§<kotlin.Any?>}[0]
        final fun component1(): kotlin/Boolean // arrow.fx.coroutines/Schedule.Decision.component1|component1(){}[0]
        final fun component2(): kotlin/Double // arrow.fx.coroutines/Schedule.Decision.component2|component2(){}[0]
        final fun component3(): #A1 // arrow.fx.coroutines/Schedule.Decision.component3|component3(){}[0]
        final fun component4(): arrow.core/Eval<#B1> // arrow.fx.coroutines/Schedule.Decision.component4|component4(){}[0]
        final fun copy(kotlin/Boolean =..., kotlin/Double =..., #A1 =..., arrow.core/Eval<#B1> =...): arrow.fx.coroutines/Schedule.Decision<#A1, #B1> // arrow.fx.coroutines/Schedule.Decision.copy|copy(kotlin.Boolean;kotlin.Double;1:0;arrow.core.Eval<1:1>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.fx.coroutines/Schedule.Decision.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.fx.coroutines/Schedule.Decision.hashCode|hashCode(){}[0]
        final fun not(): arrow.fx.coroutines/Schedule.Decision<#A1, #B1> // arrow.fx.coroutines/Schedule.Decision.not|not(){}[0]
        final fun toString(): kotlin/String // arrow.fx.coroutines/Schedule.Decision.toString|toString(){}[0]
        final object Companion { // arrow.fx.coroutines/Schedule.Decision.Companion|null[0]
            final fun <#A3: kotlin/Any?, #B3: kotlin/Any?> cont(kotlin.time/Duration, #A3, arrow.core/Eval<#B3>): arrow.fx.coroutines/Schedule.Decision<#A3, #B3> // arrow.fx.coroutines/Schedule.Decision.Companion.cont|cont(kotlin.time.Duration;0:0;arrow.core.Eval<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
            final fun <#A3: kotlin/Any?, #B3: kotlin/Any?> cont(kotlin/Double, #A3, arrow.core/Eval<#B3>): arrow.fx.coroutines/Schedule.Decision<#A3, #B3> // arrow.fx.coroutines/Schedule.Decision.Companion.cont|cont(kotlin.Double;0:0;arrow.core.Eval<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
            final fun <#A3: kotlin/Any?, #B3: kotlin/Any?> done(kotlin.time/Duration, #A3, arrow.core/Eval<#B3>): arrow.fx.coroutines/Schedule.Decision<#A3, #B3> // arrow.fx.coroutines/Schedule.Decision.Companion.done|done(kotlin.time.Duration;0:0;arrow.core.Eval<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
            final fun <#A3: kotlin/Any?, #B3: kotlin/Any?> done(kotlin/Double, #A3, arrow.core/Eval<#B3>): arrow.fx.coroutines/Schedule.Decision<#A3, #B3> // arrow.fx.coroutines/Schedule.Decision.Companion.done|done(kotlin.Double;0:0;arrow.core.Eval<0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
        }
        final val cont // arrow.fx.coroutines/Schedule.Decision.cont|<get-cont>(){}[0]
            final fun <get-cont>(): kotlin/Boolean // arrow.fx.coroutines/Schedule.Decision.cont.<get-cont>|<get-cont>(){}[0]
        final val delayInNanos // arrow.fx.coroutines/Schedule.Decision.delayInNanos|<get-delayInNanos>(){}[0]
            final fun <get-delayInNanos>(): kotlin/Double // arrow.fx.coroutines/Schedule.Decision.delayInNanos.<get-delayInNanos>|<get-delayInNanos>(){}[0]
        final val duration // arrow.fx.coroutines/Schedule.Decision.duration|{}duration[0]
            final fun <get-duration>(): kotlin.time/Duration // arrow.fx.coroutines/Schedule.Decision.duration.<get-duration>|<get-duration>(){}[0]
        final val finish // arrow.fx.coroutines/Schedule.Decision.finish|<get-finish>(){}[0]
            final fun <get-finish>(): arrow.core/Eval<#B1> // arrow.fx.coroutines/Schedule.Decision.finish.<get-finish>|<get-finish>(){}[0]
        final val state // arrow.fx.coroutines/Schedule.Decision.state|<get-state>(){}[0]
            final fun <get-state>(): #A1 // arrow.fx.coroutines/Schedule.Decision.state.<get-state>|<get-state>(){}[0]
    }
    final fun <#A1: #A, #B1: kotlin/Any?, #C1: kotlin/Any?> combine(arrow.fx.coroutines/Schedule<#A1, #B1>, kotlin/Function2<kotlin/Boolean, kotlin/Boolean, kotlin/Boolean>, kotlin/Function2<kotlin.time/Duration, kotlin.time/Duration, kotlin.time/Duration>, kotlin/Function2<#B, #B1, #C1>): arrow.fx.coroutines/Schedule<#A1, #C1> // arrow.fx.coroutines/Schedule.combine|combine(arrow.fx.coroutines.Schedule<0:0,0:1>;kotlin.Function2<kotlin.Boolean,kotlin.Boolean,kotlin.Boolean>;kotlin.Function2<kotlin.time.Duration,kotlin.time.Duration,kotlin.time.Duration>;kotlin.Function2<1:1,0:1,0:2>){0§<1:0>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
    final fun <#A1: #A, #B1: kotlin/Any?> and(arrow.fx.coroutines/Schedule<#A1, #B1>): arrow.fx.coroutines/Schedule<#A1, kotlin/Pair<#B, #B1>> // arrow.fx.coroutines/Schedule.and|and(arrow.fx.coroutines.Schedule<0:0,0:1>){0§<1:0>;1§<kotlin.Any?>}[0]
    final fun <#A1: #A, #B1: kotlin/Any?> or(arrow.fx.coroutines/Schedule<#A1, #B1>): arrow.fx.coroutines/Schedule<#A1, kotlin/Pair<#B, #B1>> // arrow.fx.coroutines/Schedule.or|or(arrow.fx.coroutines.Schedule<0:0,0:1>){0§<1:0>;1§<kotlin.Any?>}[0]
    final fun <#A1: #A, #B1: kotlin/Any?> zipLeft(arrow.fx.coroutines/Schedule<#A1, #B1>): arrow.fx.coroutines/Schedule<#A1, #B> // arrow.fx.coroutines/Schedule.zipLeft|zipLeft(arrow.fx.coroutines.Schedule<0:0,0:1>){0§<1:0>;1§<kotlin.Any?>}[0]
    final fun <#A1: #A, #B1: kotlin/Any?> zipRight(arrow.fx.coroutines/Schedule<#A1, #B1>): arrow.fx.coroutines/Schedule<#A1, #B1> // arrow.fx.coroutines/Schedule.zipRight|zipRight(arrow.fx.coroutines.Schedule<0:0,0:1>){0§<1:0>;1§<kotlin.Any?>}[0]
    final fun <#A1: #A> untilInput(kotlin.coroutines/SuspendFunction1<#A1, kotlin/Boolean>): arrow.fx.coroutines/Schedule<#A1, #B> // arrow.fx.coroutines/Schedule.untilInput|untilInput(kotlin.coroutines.SuspendFunction1<0:0,kotlin.Boolean>){0§<1:0>}[0]
    final fun <#A1: #A> whileInput(kotlin.coroutines/SuspendFunction1<#A1, kotlin/Boolean>): arrow.fx.coroutines/Schedule<#A1, #B> // arrow.fx.coroutines/Schedule.whileInput|whileInput(kotlin.coroutines.SuspendFunction1<0:0,kotlin.Boolean>){0§<1:0>}[0]
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> dimap(kotlin.coroutines/SuspendFunction1<#A1, #A>, kotlin/Function1<#B, #B1>): arrow.fx.coroutines/Schedule<#A1, #B1> // arrow.fx.coroutines/Schedule.dimap|dimap(kotlin.coroutines.SuspendFunction1<0:0,1:0>;kotlin.Function1<1:1,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> zip(arrow.fx.coroutines/Schedule<#A1, #B1>): arrow.fx.coroutines/Schedule<kotlin/Pair<#A, #A1>, kotlin/Pair<#B, #B1>> // arrow.fx.coroutines/Schedule.zip|zip(arrow.fx.coroutines.Schedule<0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> compose(arrow.fx.coroutines/Schedule<#A1, #A>): arrow.fx.coroutines/Schedule<#A1, #B> // arrow.fx.coroutines/Schedule.compose|compose(arrow.fx.coroutines.Schedule<0:0,1:0>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> const(#A1): arrow.fx.coroutines/Schedule<#A, #A1> // arrow.fx.coroutines/Schedule.const|const(0:0){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> fold(#A1, kotlin.coroutines/SuspendFunction2<#A1, #B, #A1>): arrow.fx.coroutines/Schedule<#A, #A1> // arrow.fx.coroutines/Schedule.fold|fold(0:0;kotlin.coroutines.SuspendFunction2<0:0,1:1,0:0>){0§<kotlin.Any?>}[0]
    final fun collect(): arrow.fx.coroutines/Schedule<#A, kotlin.collections/List<#B>> // arrow.fx.coroutines/Schedule.collect|collect(){}[0]
    final fun delay(kotlin.coroutines/SuspendFunction1<kotlin.time/Duration, kotlin.time/Duration>): arrow.fx.coroutines/Schedule<#A, #B> // arrow.fx.coroutines/Schedule.delay|delay(kotlin.coroutines.SuspendFunction1<kotlin.time.Duration,kotlin.time.Duration>){}[0]
    final fun delayed(kotlin.coroutines/SuspendFunction2<#B, kotlin.time/Duration, kotlin.time/Duration>): arrow.fx.coroutines/Schedule<#A, #B> // arrow.fx.coroutines/Schedule.delayed|delayed(kotlin.coroutines.SuspendFunction2<1:1,kotlin.time.Duration,kotlin.time.Duration>){}[0]
    final fun delayedNanos(kotlin.coroutines/SuspendFunction1<kotlin/Double, kotlin/Double>): arrow.fx.coroutines/Schedule<#A, #B> // arrow.fx.coroutines/Schedule.delayedNanos|delayedNanos(kotlin.coroutines.SuspendFunction1<kotlin.Double,kotlin.Double>){}[0]
    final fun doUntil(kotlin.coroutines/SuspendFunction2<#A, #B, kotlin/Boolean>): arrow.fx.coroutines/Schedule<#A, #B> // arrow.fx.coroutines/Schedule.doUntil|doUntil(kotlin.coroutines.SuspendFunction2<1:0,1:1,kotlin.Boolean>){}[0]
    final fun doWhile(kotlin.coroutines/SuspendFunction2<#A, #B, kotlin/Boolean>): arrow.fx.coroutines/Schedule<#A, #B> // arrow.fx.coroutines/Schedule.doWhile|doWhile(kotlin.coroutines.SuspendFunction2<1:0,1:1,kotlin.Boolean>){}[0]
    final fun jittered(kotlin.coroutines/SuspendFunction0<kotlin.time/Duration>): arrow.fx.coroutines/Schedule<#A, #B> // arrow.fx.coroutines/Schedule.jittered|jittered(kotlin.coroutines.SuspendFunction0<kotlin.time.Duration>){}[0]
    final fun jittered(kotlin.coroutines/SuspendFunction0<kotlin/Double>): arrow.fx.coroutines/Schedule<#A, #B> // arrow.fx.coroutines/Schedule.jittered|jittered(kotlin.coroutines.SuspendFunction0<kotlin.Double>){}[0]
    final fun jittered(kotlin.random/Random =...): arrow.fx.coroutines/Schedule<#A, #B> // arrow.fx.coroutines/Schedule.jittered|jittered(kotlin.random.Random){}[0]
    final fun modify(kotlin.coroutines/SuspendFunction2<#B, kotlin.time/Duration, kotlin.time/Duration>): arrow.fx.coroutines/Schedule<#A, #B> // arrow.fx.coroutines/Schedule.modify|modify(kotlin.coroutines.SuspendFunction2<1:1,kotlin.time.Duration,kotlin.time.Duration>){}[0]
    final fun untilOutput(kotlin.coroutines/SuspendFunction1<#B, kotlin/Boolean>): arrow.fx.coroutines/Schedule<#A, #B> // arrow.fx.coroutines/Schedule.untilOutput|untilOutput(kotlin.coroutines.SuspendFunction1<1:1,kotlin.Boolean>){}[0]
    final fun void(): arrow.fx.coroutines/Schedule<#A, kotlin/Unit> // arrow.fx.coroutines/Schedule.void|void(){}[0]
    final fun whileOutput(kotlin.coroutines/SuspendFunction1<#B, kotlin/Boolean>): arrow.fx.coroutines/Schedule<#A, #B> // arrow.fx.coroutines/Schedule.whileOutput|whileOutput(kotlin.coroutines.SuspendFunction1<1:1,kotlin.Boolean>){}[0]
    final object Companion { // arrow.fx.coroutines/Schedule.Companion|null[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?, #C2: kotlin/Any?> invoke(kotlin.coroutines/SuspendFunction0<#A2>, kotlin.coroutines/SuspendFunction2<#B2, #A2, arrow.fx.coroutines/Schedule.Decision<#A2, #C2>>): arrow.fx.coroutines/Schedule<#B2, #C2> // arrow.fx.coroutines/Schedule.Companion.invoke|invoke(kotlin.coroutines.SuspendFunction0<0:0>;kotlin.coroutines.SuspendFunction2<0:1,0:0,arrow.fx.coroutines.Schedule.Decision<0:0,0:2>>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> unfold(#B2, kotlin/Function1<#B2, #B2>): arrow.fx.coroutines/Schedule<#A2, #B2> // arrow.fx.coroutines/Schedule.Companion.unfold|unfold(0:1;kotlin.Function1<0:1,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?, #B2: kotlin/Any?> unfoldLazy(kotlin.coroutines/SuspendFunction0<#B2>, kotlin.coroutines/SuspendFunction1<#B2, #B2>): arrow.fx.coroutines/Schedule<#A2, #B2> // arrow.fx.coroutines/Schedule.Companion.unfoldLazy|unfoldLazy(kotlin.coroutines.SuspendFunction0<0:1>;kotlin.coroutines.SuspendFunction1<0:1,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> collect(): arrow.fx.coroutines/Schedule<#A2, kotlin.collections/List<#A2>> // arrow.fx.coroutines/Schedule.Companion.collect|collect(){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> decision(): arrow.fx.coroutines/Schedule<#A2, kotlin/Boolean> // arrow.fx.coroutines/Schedule.Companion.decision|decision(){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> delayInNanos(): arrow.fx.coroutines/Schedule<#A2, kotlin/Double> // arrow.fx.coroutines/Schedule.Companion.delayInNanos|delayInNanos(){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> delayed(arrow.fx.coroutines/Schedule<#A2, kotlin.time/Duration>): arrow.fx.coroutines/Schedule<#A2, kotlin.time/Duration> // arrow.fx.coroutines/Schedule.Companion.delayed|delayed(arrow.fx.coroutines.Schedule<0:0,kotlin.time.Duration>){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> delayed(arrow.fx.coroutines/Schedule<#A2, kotlin/Double>): arrow.fx.coroutines/Schedule<#A2, kotlin/Double> // arrow.fx.coroutines/Schedule.Companion.delayed|delayed(arrow.fx.coroutines.Schedule<0:0,kotlin.Double>){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> doUntil(kotlin.coroutines/SuspendFunction1<#A2, kotlin/Boolean>): arrow.fx.coroutines/Schedule<#A2, #A2> // arrow.fx.coroutines/Schedule.Companion.doUntil|doUntil(kotlin.coroutines.SuspendFunction1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> doWhile(kotlin.coroutines/SuspendFunction1<#A2, kotlin/Boolean>): arrow.fx.coroutines/Schedule<#A2, #A2> // arrow.fx.coroutines/Schedule.Companion.doWhile|doWhile(kotlin.coroutines.SuspendFunction1<0:0,kotlin.Boolean>){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> duration(): arrow.fx.coroutines/Schedule<#A2, kotlin.time/Duration> // arrow.fx.coroutines/Schedule.Companion.duration|duration(){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> exponential(kotlin.time/Duration, kotlin/Double =...): arrow.fx.coroutines/Schedule<#A2, kotlin.time/Duration> // arrow.fx.coroutines/Schedule.Companion.exponential|exponential(kotlin.time.Duration;kotlin.Double){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> exponential(kotlin/Double, kotlin/Double =...): arrow.fx.coroutines/Schedule<#A2, kotlin/Double> // arrow.fx.coroutines/Schedule.Companion.exponential|exponential(kotlin.Double;kotlin.Double){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> fibonacci(kotlin.time/Duration): arrow.fx.coroutines/Schedule<#A2, kotlin.time/Duration> // arrow.fx.coroutines/Schedule.Companion.fibonacci|fibonacci(kotlin.time.Duration){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> fibonacci(kotlin/Double): arrow.fx.coroutines/Schedule<#A2, kotlin/Double> // arrow.fx.coroutines/Schedule.Companion.fibonacci|fibonacci(kotlin.Double){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> forever(): arrow.fx.coroutines/Schedule<#A2, kotlin/Int> // arrow.fx.coroutines/Schedule.Companion.forever|forever(){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> identity(): arrow.fx.coroutines/Schedule<#A2, #A2> // arrow.fx.coroutines/Schedule.Companion.identity|identity(){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> linear(kotlin.time/Duration): arrow.fx.coroutines/Schedule<#A2, kotlin.time/Duration> // arrow.fx.coroutines/Schedule.Companion.linear|linear(kotlin.time.Duration){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> linear(kotlin/Double): arrow.fx.coroutines/Schedule<#A2, kotlin/Double> // arrow.fx.coroutines/Schedule.Companion.linear|linear(kotlin.Double){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> logInput(kotlin.coroutines/SuspendFunction1<#A2, kotlin/Unit>): arrow.fx.coroutines/Schedule<#A2, #A2> // arrow.fx.coroutines/Schedule.Companion.logInput|logInput(kotlin.coroutines.SuspendFunction1<0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> logOutput(kotlin.coroutines/SuspendFunction1<#A2, kotlin/Unit>): arrow.fx.coroutines/Schedule<#A2, #A2> // arrow.fx.coroutines/Schedule.Companion.logOutput|logOutput(kotlin.coroutines.SuspendFunction1<0:0,kotlin.Unit>){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> never(): arrow.fx.coroutines/Schedule<#A2, kotlin/Nothing> // arrow.fx.coroutines/Schedule.Companion.never|never(){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> once(): arrow.fx.coroutines/Schedule<#A2, kotlin/Unit> // arrow.fx.coroutines/Schedule.Companion.once|once(){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> recurs(kotlin/Int): arrow.fx.coroutines/Schedule<#A2, kotlin/Int> // arrow.fx.coroutines/Schedule.Companion.recurs|recurs(kotlin.Int){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> spaced(kotlin.time/Duration): arrow.fx.coroutines/Schedule<#A2, kotlin/Int> // arrow.fx.coroutines/Schedule.Companion.spaced|spaced(kotlin.time.Duration){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> spaced(kotlin/Double): arrow.fx.coroutines/Schedule<#A2, kotlin/Int> // arrow.fx.coroutines/Schedule.Companion.spaced|spaced(kotlin.Double){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> unit(): arrow.fx.coroutines/Schedule<#A2, kotlin/Unit> // arrow.fx.coroutines/Schedule.Companion.unit|unit(){0§<kotlin.Any?>}[0]
    }
    final suspend fun repeat(kotlin.coroutines/SuspendFunction0<#A>): #B // arrow.fx.coroutines/Schedule.repeat|repeat(kotlin.coroutines.SuspendFunction0<1:0>){}[0]
    final suspend fun repeatAsFlow(kotlin.coroutines/SuspendFunction0<#A>): kotlinx.coroutines.flow/Flow<#B> // arrow.fx.coroutines/Schedule.repeatAsFlow|repeatAsFlow(kotlin.coroutines.SuspendFunction0<1:0>){}[0]
    final suspend fun repeatOrElse(kotlin.coroutines/SuspendFunction0<#A>, kotlin.coroutines/SuspendFunction2<kotlin/Throwable, #B?, #B>): #B // arrow.fx.coroutines/Schedule.repeatOrElse|repeatOrElse(kotlin.coroutines.SuspendFunction0<1:0>;kotlin.coroutines.SuspendFunction2<kotlin.Throwable,1:1?,1:1>){}[0]
    final suspend fun repeatOrElseAsFlow(kotlin.coroutines/SuspendFunction0<#A>, kotlin.coroutines/SuspendFunction2<kotlin/Throwable, #B?, #B>): kotlinx.coroutines.flow/Flow<#B> // arrow.fx.coroutines/Schedule.repeatOrElseAsFlow|repeatOrElseAsFlow(kotlin.coroutines.SuspendFunction0<1:0>;kotlin.coroutines.SuspendFunction2<kotlin.Throwable,1:1?,1:1>){}[0]
}
sealed class <#A: out kotlin/Any?, #B: out kotlin/Any?, #C: out kotlin/Any?> arrow.fx.coroutines/Race3 { // arrow.fx.coroutines/Race3|null[0]
    constructor <init>() // arrow.fx.coroutines/Race3.<init>|<init>(){}[0]
    final class <#A1: kotlin/Any?> First : arrow.fx.coroutines/Race3<#A1, kotlin/Nothing, kotlin/Nothing> { // arrow.fx.coroutines/Race3.First|null[0]
        constructor <init>(#A1) // arrow.fx.coroutines/Race3.First.<init>|<init>(1:0){}[0]
        final fun component1(): #A1 // arrow.fx.coroutines/Race3.First.component1|component1(){}[0]
        final fun copy(#A1 =...): arrow.fx.coroutines/Race3.First<#A1> // arrow.fx.coroutines/Race3.First.copy|copy(1:0){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.fx.coroutines/Race3.First.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.fx.coroutines/Race3.First.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // arrow.fx.coroutines/Race3.First.toString|toString(){}[0]
        final val winner // arrow.fx.coroutines/Race3.First.winner|{}winner[0]
            final fun <get-winner>(): #A1 // arrow.fx.coroutines/Race3.First.winner.<get-winner>|<get-winner>(){}[0]
    }
    final class <#A1: kotlin/Any?> Second : arrow.fx.coroutines/Race3<kotlin/Nothing, #A1, kotlin/Nothing> { // arrow.fx.coroutines/Race3.Second|null[0]
        constructor <init>(#A1) // arrow.fx.coroutines/Race3.Second.<init>|<init>(1:0){}[0]
        final fun component1(): #A1 // arrow.fx.coroutines/Race3.Second.component1|component1(){}[0]
        final fun copy(#A1 =...): arrow.fx.coroutines/Race3.Second<#A1> // arrow.fx.coroutines/Race3.Second.copy|copy(1:0){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.fx.coroutines/Race3.Second.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.fx.coroutines/Race3.Second.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // arrow.fx.coroutines/Race3.Second.toString|toString(){}[0]
        final val winner // arrow.fx.coroutines/Race3.Second.winner|{}winner[0]
            final fun <get-winner>(): #A1 // arrow.fx.coroutines/Race3.Second.winner.<get-winner>|<get-winner>(){}[0]
    }
    final class <#A1: kotlin/Any?> Third : arrow.fx.coroutines/Race3<kotlin/Nothing, kotlin/Nothing, #A1> { // arrow.fx.coroutines/Race3.Third|null[0]
        constructor <init>(#A1) // arrow.fx.coroutines/Race3.Third.<init>|<init>(1:0){}[0]
        final fun component1(): #A1 // arrow.fx.coroutines/Race3.Third.component1|component1(){}[0]
        final fun copy(#A1 =...): arrow.fx.coroutines/Race3.Third<#A1> // arrow.fx.coroutines/Race3.Third.copy|copy(1:0){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.fx.coroutines/Race3.Third.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.fx.coroutines/Race3.Third.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // arrow.fx.coroutines/Race3.Third.toString|toString(){}[0]
        final val winner // arrow.fx.coroutines/Race3.Third.winner|{}winner[0]
            final fun <get-winner>(): #A1 // arrow.fx.coroutines/Race3.Third.winner.<get-winner>|<get-winner>(){}[0]
    }
    final inline fun <#A1: kotlin/Any?> fold(kotlin/Function1<#A, #A1>, kotlin/Function1<#B, #A1>, kotlin/Function1<#C, #A1>): #A1 // arrow.fx.coroutines/Race3.fold|fold(kotlin.Function1<1:0,0:0>;kotlin.Function1<1:1,0:0>;kotlin.Function1<1:2,0:0>){0§<kotlin.Any?>}[0]
}
sealed class <#A: out kotlin/Any?> arrow.fx.coroutines/Resource { // arrow.fx.coroutines/Resource|null[0]
    constructor <init>() // arrow.fx.coroutines/Resource.<init>|<init>(){}[0]
    final class <#A1: kotlin/Any?, #B1: kotlin/Any?> Bind : arrow.fx.coroutines/Resource<#B1> { // arrow.fx.coroutines/Resource.Bind|null[0]
        constructor <init>(arrow.fx.coroutines/Resource<#A1>, kotlin/Function1<#A1, arrow.fx.coroutines/Resource<#B1>>) // arrow.fx.coroutines/Resource.Bind.<init>|<init>(arrow.fx.coroutines.Resource<1:0>;kotlin.Function1<1:0,arrow.fx.coroutines.Resource<1:1>>){}[0]
        final val f // arrow.fx.coroutines/Resource.Bind.f|<get-f>(){}[0]
            final fun <get-f>(): kotlin/Function1<#A1, arrow.fx.coroutines/Resource<#B1>> // arrow.fx.coroutines/Resource.Bind.f.<get-f>|<get-f>(){}[0]
        final val source // arrow.fx.coroutines/Resource.Bind.source|<get-source>(){}[0]
            final fun <get-source>(): arrow.fx.coroutines/Resource<#A1> // arrow.fx.coroutines/Resource.Bind.source.<get-source>|<get-source>(){}[0]
    }
    final class <#A1: kotlin/Any?> Allocate : arrow.fx.coroutines/Resource<#A1> { // arrow.fx.coroutines/Resource.Allocate|null[0]
        constructor <init>(kotlin.coroutines/SuspendFunction0<#A1>, kotlin.coroutines/SuspendFunction2<#A1, arrow.fx.coroutines/ExitCase, kotlin/Unit>) // arrow.fx.coroutines/Resource.Allocate.<init>|<init>(kotlin.coroutines.SuspendFunction0<1:0>;kotlin.coroutines.SuspendFunction2<1:0,arrow.fx.coroutines.ExitCase,kotlin.Unit>){}[0]
        final val acquire // arrow.fx.coroutines/Resource.Allocate.acquire|<get-acquire>(){}[0]
            final fun <get-acquire>(): kotlin.coroutines/SuspendFunction0<#A1> // arrow.fx.coroutines/Resource.Allocate.acquire.<get-acquire>|<get-acquire>(){}[0]
        final val release // arrow.fx.coroutines/Resource.Allocate.release|<get-release>(){}[0]
            final fun <get-release>(): kotlin.coroutines/SuspendFunction2<#A1, arrow.fx.coroutines/ExitCase, kotlin/Unit> // arrow.fx.coroutines/Resource.Allocate.release.<get-release>|<get-release>(){}[0]
    }
    final class <#A1: kotlin/Any?> Defer : arrow.fx.coroutines/Resource<#A1> { // arrow.fx.coroutines/Resource.Defer|null[0]
        constructor <init>(kotlin.coroutines/SuspendFunction0<arrow.fx.coroutines/Resource<#A1>>) // arrow.fx.coroutines/Resource.Defer.<init>|<init>(kotlin.coroutines.SuspendFunction0<arrow.fx.coroutines.Resource<1:0>>){}[0]
        final val resource // arrow.fx.coroutines/Resource.Defer.resource|<get-resource>(){}[0]
            final fun <get-resource>(): kotlin.coroutines/SuspendFunction0<arrow.fx.coroutines/Resource<#A1>> // arrow.fx.coroutines/Resource.Defer.resource.<get-resource>|<get-resource>(){}[0]
    }
    final class <#A1: kotlin/Any?> Dsl : arrow.fx.coroutines/Resource<#A1> { // arrow.fx.coroutines/Resource.Dsl|null[0]
        constructor <init>(kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines.continuations/ResourceScope, #A1>) // arrow.fx.coroutines/Resource.Dsl.<init>|<init>(kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.continuations.ResourceScope,1:0>){}[0]
        final fun component1(): kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines.continuations/ResourceScope, #A1> // arrow.fx.coroutines/Resource.Dsl.component1|component1(){}[0]
        final fun copy(kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines.continuations/ResourceScope, #A1> =...): arrow.fx.coroutines/Resource.Dsl<#A1> // arrow.fx.coroutines/Resource.Dsl.copy|copy(kotlin.coroutines.SuspendFunction1<arrow.fx.coroutines.continuations.ResourceScope,1:0>){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.fx.coroutines/Resource.Dsl.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.fx.coroutines/Resource.Dsl.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // arrow.fx.coroutines/Resource.Dsl.toString|toString(){}[0]
        final val dsl // arrow.fx.coroutines/Resource.Dsl.dsl|<get-dsl>(){}[0]
            final fun <get-dsl>(): kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines.continuations/ResourceScope, #A1> // arrow.fx.coroutines/Resource.Dsl.dsl.<get-dsl>|<get-dsl>(){}[0]
    }
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> parZip(arrow.fx.coroutines/Resource<#A1>, kotlin.coroutines/SuspendFunction2<#A, #A1, #B1>): arrow.fx.coroutines/Resource<#B1> // arrow.fx.coroutines/Resource.parZip|parZip(arrow.fx.coroutines.Resource<0:0>;kotlin.coroutines.SuspendFunction2<1:0,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?, #B1: kotlin/Any?> parZip(kotlin.coroutines/CoroutineContext =..., arrow.fx.coroutines/Resource<#A1>, kotlin.coroutines/SuspendFunction2<#A, #A1, #B1>): arrow.fx.coroutines/Resource<#B1> // arrow.fx.coroutines/Resource.parZip|parZip(kotlin.coroutines.CoroutineContext;arrow.fx.coroutines.Resource<0:0>;kotlin.coroutines.SuspendFunction2<1:0,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> ap(arrow.fx.coroutines/Resource<kotlin/Function1<#A, #A1>>): arrow.fx.coroutines/Resource<#A1> // arrow.fx.coroutines/Resource.ap|ap(arrow.fx.coroutines.Resource<kotlin.Function1<1:0,0:0>>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> flatMap(kotlin/Function1<#A, arrow.fx.coroutines/Resource<#A1>>): arrow.fx.coroutines/Resource<#A1> // arrow.fx.coroutines/Resource.flatMap|flatMap(kotlin.Function1<1:0,arrow.fx.coroutines.Resource<0:0>>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> map(kotlin.coroutines/SuspendFunction1<#A, #A1>): arrow.fx.coroutines/Resource<#A1> // arrow.fx.coroutines/Resource.map|map(kotlin.coroutines.SuspendFunction1<1:0,0:0>){0§<kotlin.Any?>}[0]
    final fun <#A1: kotlin/Any?> zip(arrow.fx.coroutines/Resource<#A1>): arrow.fx.coroutines/Resource<kotlin/Pair<#A, #A1>> // arrow.fx.coroutines/Resource.zip|zip(arrow.fx.coroutines.Resource<0:0>){0§<kotlin.Any?>}[0]
    final fun tap(kotlin.coroutines/SuspendFunction1<#A, kotlin/Unit>): arrow.fx.coroutines/Resource<#A> // arrow.fx.coroutines/Resource.tap|tap(kotlin.coroutines.SuspendFunction1<1:0,kotlin.Unit>){}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?, #D1: kotlin/Any?, #E1: kotlin/Any?, #F1: kotlin/Any?, #G1: kotlin/Any?, #H1: kotlin/Any?, #I1: kotlin/Any?, #J1: kotlin/Any?> zip(arrow.fx.coroutines/Resource<#A1>, arrow.fx.coroutines/Resource<#B1>, arrow.fx.coroutines/Resource<#C1>, arrow.fx.coroutines/Resource<#D1>, arrow.fx.coroutines/Resource<#E1>, arrow.fx.coroutines/Resource<#F1>, arrow.fx.coroutines/Resource<#G1>, arrow.fx.coroutines/Resource<#H1>, arrow.fx.coroutines/Resource<#I1>, crossinline kotlin/Function10<#A, #A1, #B1, #C1, #D1, #E1, #F1, #G1, #H1, #I1, #J1>): arrow.fx.coroutines/Resource<#J1> // arrow.fx.coroutines/Resource.zip|zip(arrow.fx.coroutines.Resource<0:0>;arrow.fx.coroutines.Resource<0:1>;arrow.fx.coroutines.Resource<0:2>;arrow.fx.coroutines.Resource<0:3>;arrow.fx.coroutines.Resource<0:4>;arrow.fx.coroutines.Resource<0:5>;arrow.fx.coroutines.Resource<0:6>;arrow.fx.coroutines.Resource<0:7>;arrow.fx.coroutines.Resource<0:8>;kotlin.Function10<1:0,0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8,0:9>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>;9§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?, #D1: kotlin/Any?, #E1: kotlin/Any?, #F1: kotlin/Any?, #G1: kotlin/Any?, #H1: kotlin/Any?, #I1: kotlin/Any?> zip(arrow.fx.coroutines/Resource<#A1>, arrow.fx.coroutines/Resource<#B1>, arrow.fx.coroutines/Resource<#C1>, arrow.fx.coroutines/Resource<#D1>, arrow.fx.coroutines/Resource<#E1>, arrow.fx.coroutines/Resource<#F1>, arrow.fx.coroutines/Resource<#G1>, arrow.fx.coroutines/Resource<#H1>, crossinline kotlin/Function9<#A, #A1, #B1, #C1, #D1, #E1, #F1, #G1, #H1, #I1>): arrow.fx.coroutines/Resource<#I1> // arrow.fx.coroutines/Resource.zip|zip(arrow.fx.coroutines.Resource<0:0>;arrow.fx.coroutines.Resource<0:1>;arrow.fx.coroutines.Resource<0:2>;arrow.fx.coroutines.Resource<0:3>;arrow.fx.coroutines.Resource<0:4>;arrow.fx.coroutines.Resource<0:5>;arrow.fx.coroutines.Resource<0:6>;arrow.fx.coroutines.Resource<0:7>;kotlin.Function9<1:0,0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7,0:8>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>;8§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?, #D1: kotlin/Any?, #E1: kotlin/Any?, #F1: kotlin/Any?, #G1: kotlin/Any?, #H1: kotlin/Any?> zip(arrow.fx.coroutines/Resource<#A1>, arrow.fx.coroutines/Resource<#B1>, arrow.fx.coroutines/Resource<#C1>, arrow.fx.coroutines/Resource<#D1>, arrow.fx.coroutines/Resource<#E1>, arrow.fx.coroutines/Resource<#F1>, arrow.fx.coroutines/Resource<#G1>, crossinline kotlin/Function8<#A, #A1, #B1, #C1, #D1, #E1, #F1, #G1, #H1>): arrow.fx.coroutines/Resource<#H1> // arrow.fx.coroutines/Resource.zip|zip(arrow.fx.coroutines.Resource<0:0>;arrow.fx.coroutines.Resource<0:1>;arrow.fx.coroutines.Resource<0:2>;arrow.fx.coroutines.Resource<0:3>;arrow.fx.coroutines.Resource<0:4>;arrow.fx.coroutines.Resource<0:5>;arrow.fx.coroutines.Resource<0:6>;kotlin.Function8<1:0,0:0,0:1,0:2,0:3,0:4,0:5,0:6,0:7>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>;7§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?, #D1: kotlin/Any?, #E1: kotlin/Any?, #F1: kotlin/Any?, #G1: kotlin/Any?> zip(arrow.fx.coroutines/Resource<#A1>, arrow.fx.coroutines/Resource<#B1>, arrow.fx.coroutines/Resource<#C1>, arrow.fx.coroutines/Resource<#D1>, arrow.fx.coroutines/Resource<#E1>, arrow.fx.coroutines/Resource<#F1>, crossinline kotlin/Function7<#A, #A1, #B1, #C1, #D1, #E1, #F1, #G1>): arrow.fx.coroutines/Resource<#G1> // arrow.fx.coroutines/Resource.zip|zip(arrow.fx.coroutines.Resource<0:0>;arrow.fx.coroutines.Resource<0:1>;arrow.fx.coroutines.Resource<0:2>;arrow.fx.coroutines.Resource<0:3>;arrow.fx.coroutines.Resource<0:4>;arrow.fx.coroutines.Resource<0:5>;kotlin.Function7<1:0,0:0,0:1,0:2,0:3,0:4,0:5,0:6>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?, #D1: kotlin/Any?, #E1: kotlin/Any?, #F1: kotlin/Any?, #G1: kotlin/Any?> zip(arrow.fx.coroutines/Resource<#A1>, arrow.fx.coroutines/Resource<#B1>, arrow.fx.coroutines/Resource<#C1>, arrow.fx.coroutines/Resource<#D1>, arrow.fx.coroutines/Resource<#E1>, crossinline kotlin/Function6<#A, #A1, #B1, #C1, #D1, #E1, #F1>): arrow.fx.coroutines/Resource<#F1> // arrow.fx.coroutines/Resource.zip|zip(arrow.fx.coroutines.Resource<0:0>;arrow.fx.coroutines.Resource<0:1>;arrow.fx.coroutines.Resource<0:2>;arrow.fx.coroutines.Resource<0:3>;arrow.fx.coroutines.Resource<0:4>;kotlin.Function6<1:0,0:0,0:1,0:2,0:3,0:4,0:5>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>;5§<kotlin.Any?>;6§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?, #D1: kotlin/Any?, #E1: kotlin/Any?> zip(arrow.fx.coroutines/Resource<#A1>, arrow.fx.coroutines/Resource<#B1>, arrow.fx.coroutines/Resource<#C1>, arrow.fx.coroutines/Resource<#D1>, crossinline kotlin/Function5<#A, #A1, #B1, #C1, #D1, #E1>): arrow.fx.coroutines/Resource<#E1> // arrow.fx.coroutines/Resource.zip|zip(arrow.fx.coroutines.Resource<0:0>;arrow.fx.coroutines.Resource<0:1>;arrow.fx.coroutines.Resource<0:2>;arrow.fx.coroutines.Resource<0:3>;kotlin.Function5<1:0,0:0,0:1,0:2,0:3,0:4>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>;4§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?, #D1: kotlin/Any?> zip(arrow.fx.coroutines/Resource<#A1>, arrow.fx.coroutines/Resource<#B1>, arrow.fx.coroutines/Resource<#C1>, crossinline kotlin/Function4<#A, #A1, #B1, #C1, #D1>): arrow.fx.coroutines/Resource<#D1> // arrow.fx.coroutines/Resource.zip|zip(arrow.fx.coroutines.Resource<0:0>;arrow.fx.coroutines.Resource<0:1>;arrow.fx.coroutines.Resource<0:2>;kotlin.Function4<1:0,0:0,0:1,0:2,0:3>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>;3§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?, #C1: kotlin/Any?> zip(arrow.fx.coroutines/Resource<#A1>, arrow.fx.coroutines/Resource<#B1>, crossinline kotlin/Function3<#A, #A1, #B1, #C1>): arrow.fx.coroutines/Resource<#C1> // arrow.fx.coroutines/Resource.zip|zip(arrow.fx.coroutines.Resource<0:0>;arrow.fx.coroutines.Resource<0:1>;kotlin.Function3<1:0,0:0,0:1,0:2>){0§<kotlin.Any?>;1§<kotlin.Any?>;2§<kotlin.Any?>}[0]
    final inline fun <#A1: kotlin/Any?, #B1: kotlin/Any?> zip(arrow.fx.coroutines/Resource<#A1>, crossinline kotlin/Function2<#A, #A1, #B1>): arrow.fx.coroutines/Resource<#B1> // arrow.fx.coroutines/Resource.zip|zip(arrow.fx.coroutines.Resource<0:0>;kotlin.Function2<1:0,0:0,0:1>){0§<kotlin.Any?>;1§<kotlin.Any?>}[0]
    final object Companion { // arrow.fx.coroutines/Resource.Companion|null[0]
        final fun <#A2: kotlin/Any?> defer(kotlin.coroutines/SuspendFunction0<arrow.fx.coroutines/Resource<#A2>>): arrow.fx.coroutines/Resource<#A2> // arrow.fx.coroutines/Resource.Companion.defer|defer(kotlin.coroutines.SuspendFunction0<arrow.fx.coroutines.Resource<0:0>>){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> invoke(kotlin.coroutines/SuspendFunction0<#A2>, kotlin.coroutines/SuspendFunction2<#A2, arrow.fx.coroutines/ExitCase, kotlin/Unit>): arrow.fx.coroutines/Resource<#A2> // arrow.fx.coroutines/Resource.Companion.invoke|invoke(kotlin.coroutines.SuspendFunction0<0:0>;kotlin.coroutines.SuspendFunction2<0:0,arrow.fx.coroutines.ExitCase,kotlin.Unit>){0§<kotlin.Any?>}[0]
        final fun <#A2: kotlin/Any?> just(#A2): arrow.fx.coroutines/Resource<#A2> // arrow.fx.coroutines/Resource.Companion.just|just(0:0){0§<kotlin.Any?>}[0]
        final val unit // arrow.fx.coroutines/Resource.Companion.unit|{}unit[0]
            final fun <get-unit>(): arrow.fx.coroutines/Resource<kotlin/Unit> // arrow.fx.coroutines/Resource.Companion.unit.<get-unit>|<get-unit>(){}[0]
    }
    final suspend fun <#A1: kotlin/Any?> use(kotlin.coroutines/SuspendFunction1<#A, #A1>): #A1 // arrow.fx.coroutines/Resource.use|use(kotlin.coroutines.SuspendFunction1<1:0,0:0>){0§<kotlin.Any?>}[0]
    final suspend fun allocate(): kotlin/Pair<#A, kotlin.coroutines/SuspendFunction1<arrow.fx.coroutines/ExitCase, kotlin/Unit>> // arrow.fx.coroutines/Resource.allocate|allocate(){}[0]
    final suspend fun allocated(): kotlin/Pair<kotlin.coroutines/SuspendFunction0<#A>, kotlin.coroutines/SuspendFunction2<#A, arrow.fx.coroutines/ExitCase, kotlin/Unit>> // arrow.fx.coroutines/Resource.allocated|allocated(){}[0]
}
sealed class arrow.fx.coroutines/ExitCase { // arrow.fx.coroutines/ExitCase|null[0]
    constructor <init>() // arrow.fx.coroutines/ExitCase.<init>|<init>(){}[0]
    final class Cancelled : arrow.fx.coroutines/ExitCase { // arrow.fx.coroutines/ExitCase.Cancelled|null[0]
        constructor <init>(kotlin.coroutines.cancellation/CancellationException) // arrow.fx.coroutines/ExitCase.Cancelled.<init>|<init>(kotlin.coroutines.cancellation.CancellationException){}[0]
        final fun component1(): kotlin.coroutines.cancellation/CancellationException // arrow.fx.coroutines/ExitCase.Cancelled.component1|component1(){}[0]
        final fun copy(kotlin.coroutines.cancellation/CancellationException =...): arrow.fx.coroutines/ExitCase.Cancelled // arrow.fx.coroutines/ExitCase.Cancelled.copy|copy(kotlin.coroutines.cancellation.CancellationException){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.fx.coroutines/ExitCase.Cancelled.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.fx.coroutines/ExitCase.Cancelled.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // arrow.fx.coroutines/ExitCase.Cancelled.toString|toString(){}[0]
        final val exception // arrow.fx.coroutines/ExitCase.Cancelled.exception|{}exception[0]
            final fun <get-exception>(): kotlin.coroutines.cancellation/CancellationException // arrow.fx.coroutines/ExitCase.Cancelled.exception.<get-exception>|<get-exception>(){}[0]
    }
    final class Failure : arrow.fx.coroutines/ExitCase { // arrow.fx.coroutines/ExitCase.Failure|null[0]
        constructor <init>(kotlin/Throwable) // arrow.fx.coroutines/ExitCase.Failure.<init>|<init>(kotlin.Throwable){}[0]
        final fun component1(): kotlin/Throwable // arrow.fx.coroutines/ExitCase.Failure.component1|component1(){}[0]
        final fun copy(kotlin/Throwable =...): arrow.fx.coroutines/ExitCase.Failure // arrow.fx.coroutines/ExitCase.Failure.copy|copy(kotlin.Throwable){}[0]
        final fun equals(kotlin/Any?): kotlin/Boolean // arrow.fx.coroutines/ExitCase.Failure.equals|equals(kotlin.Any?){}[0]
        final fun hashCode(): kotlin/Int // arrow.fx.coroutines/ExitCase.Failure.hashCode|hashCode(){}[0]
        final fun toString(): kotlin/String // arrow.fx.coroutines/ExitCase.Failure.toString|toString(){}[0]
        final val failure // arrow.fx.coroutines/ExitCase.Failure.failure|{}failure[0]
            final fun <get-failure>(): kotlin/Throwable // arrow.fx.coroutines/ExitCase.Failure.failure.<get-failure>|<get-failure>(){}[0]
    }
    final object Companion { // arrow.fx.coroutines/ExitCase.Companion|null[0]
        final fun ExitCase(kotlin/Throwable): arrow.fx.coroutines/ExitCase // arrow.fx.coroutines/ExitCase.Companion.ExitCase|ExitCase(kotlin.Throwable){}[0]
    }
    final object Completed : arrow.fx.coroutines/ExitCase { // arrow.fx.coroutines/ExitCase.Completed|null[0]
        final fun toString(): kotlin/String // arrow.fx.coroutines/ExitCase.Completed.toString|toString(){}[0]
    }
}
